{"version":3,"sources":["reducers/userSession.js","reducers/networks.js","reducers/basicAuth.js","reducers/dockerImages.js","reducers/containers.js","reducers/solution.js","reducers/solutionParameters.js","reducers/domains.js","reducers/nginxConfigs.js","reducers/settings.js","reducers/nginxDockerLinks.js","reducers/literals.js","reducers/nginxPresetParams.js","store/store.js","reducers/index.js","services/API.js","services/sockerPubSub.js","services/authentication.js","serviceWorker.js","App.js","components/pages/styles.js","components/elements/LoadingIndicator/index.js","lib/StoreHelper/loadData.js","components/elements/SharableView/index.js","components/elements/AlertBar/index.js","components/elements/Dialogs/AlertDialog.js","components/pages/SolutionConfigurations/components/styles.js","components/elements/ValidationForm/index.js","components/pages/SolutionConfigurations/components/solutionEditor/solutionEditor.js","components/pages/SolutionConfigurations/components/exportWizardDialog/exportWizardDialog.js","components/pages/SolutionConfigurations/SolutionConfigurations.js","components/elements/TableEditors/styles.js","components/elements/TableEditors/networks.js","components/elements/TableEditors/dockerImages.js","components/elements/Dialogs/ContainerVolumeDialog.js","components/elements/TableEditors/containers.js","components/pages/DockerConfigurations/DockerConfigurations.js","components/elements/Dialogs/CertificateUploadDialog.js","components/elements/TableEditors/domains.js","components/elements/TableEditors/basicAuth.js","components/elements/TableEditors/nginxPresetParams.js","components/elements/TableEditors/nginxConfigs.js","components/pages/NGinxConfigurations/NGinxConfigurations.js","components/pages/SettingsConfigurations/SettingsConfigurations.js","components/pages/Login/Login.js","i18n/index.js","index.js","logo.svg"],"names":["initialState","token","userId","online","userSession","state","arguments","length","undefined","action","type","Object","assign","data","networks","reducers_basicAuth","dockerImages","reducers_containers","map","c","id","reducers_solution","filter","o","solutionParameters","domains","reducers_nginxConfigs","settings","reducers_nginxDockerLinks","concat","toConsumableArray","reducers_literals","nginxPresetParams","configureStore","createStore","combineReducers","containers","nginxConfigs","basicAuth","literals","solutions","nginxDockerLinks","API","entity","this","endpoints","name","createBasicCRUDEndpoints","arrayOfEntity","forEach","createEntity","bind","_this","_ref","resourceURL","url","getOne","query","Promise","resolve","reject","fetch","JSON","stringify","method","headers","then","response","ok","err","Error","status","json","catch","console","log","getAll","getAllRelations","relationName","deleteById","create","toCreate","body","linkRelation","relatedModelName","relatedId","relationObject","unlinkRelation","update","toUpdate","remote","solutionExport","solutionId","formData","Authorization","solutionImport","uploadCertificate","domainId","remoteGet","queryString","key","push","encodeURIComponent","join","buildRemoteFileUri","upload","Content-Type","Accept","require","apiBaseRoute","io","SockerPubSub","sockerio_url","socketioBaseRoute","window","location","protocol","hostname","socket","path","on","emit","uid","store","dispatch","subscriptions","eventName","cb","disconnect","Authentication","credentials","SdfUsers","loginData","setUser","SocketPubSub","login","sessionStorage","accessToken","logout","Boolean","match","App","react_default","a","createElement","Redirect","to","Component","connect","props","styles","theme","root","flexGrow","title","fontSize","color","paper","padding","spacing","unit","backgroundColor","position","margin","redColor","greenColor","blueColor","greyColor","modalPaper","width","palette","background","boxShadow","shadows","tableTitleDiv","marginTop","marginBottom","textAlign","tableCell","whiteSpace","wordWrap","snackClose","configPaper","paddingLeft","paddingRight","menuItem","menuItemSelected","primary","icon","viewContainer","borderLeft","emptyView","height","backgroundSize","backgroundRepeat","backgroundPosition","LoadingIndicator","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","show","style","zIndex","top","bottom","left","right","flex","alignItems","justifyContent","className","src","logo","fontWeight","lineHeight","message","StoreHelper","initialized","reloadCoreData","Settings","resultSettings","Networks","resultNetworks","BasicAuths","resultBasicAuth","DockerImages","resultDockerImages","Containers","resultContainers","i","networkRelations","Solutions","resultSolutions","NginxDockerLinks","SolutionParameters","resultSolutionParameters","Domains","resultDomains","NginxConfigs","resultNginxConfigs","NginxPresetParams","resultNginxPresetParams","SharableViewComponent","selectedPageIndex","pageIndex","loading","loadingMessage","_this2","setState","notify","loadTableList","off","_this3","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","loadStoreData","t0","clearStoreData","stop","defaultNginxDomain","find","s","value","_this4","alt","index_es","variant","textTransform","onClick","disabled","deploy","Tabs_default","onChange","event","history","centered","textColor","Tab_default","label","children","elements_LoadingIndicator","variantIcon","success","CheckCircleIcon","warning","WarningIcon","error","ErrorIcon","info","InfoIcon","SnackbarContentWrapper","withStyles","green","dark","amber","iconVariant","opacity","marginRight","display","classes","onClose","other","objectWithoutProperties","Icon","msgArray","SnackbarContent_default","classNames","aria-describedby","m","maxWidth","IconButton_default","aria-label","close","Close_default","AlertSnackbars","open","handleClose","reason","duration","Snackbar_default","anchorOrigin","vertical","horizontal","autoHideDuration","React","ReactConfirmAlert","handleClickButton","button","target","document","getElementById","unmountComponentAtNode","parentNode","removeChild","removeElementReconfirm","keyboardClose","keyCode","componentDidMount","addEventListener","componentWillUnmount","removeEventListener","willUnmount","_this$props","buttons","Dialog_default","aria-labelledby","DialogTitle_default","DialogContent_default","DialogContentText_default","DialogActions_default","Button_default","confirmAlert","properties","divTarget","render","AlertDialog_ReactConfirmAlert","classList","add","appendChild","createElementReconfirm","defaultProps","sectionBlockHeader","sectionBlockBody","saveSection","fab","uploadButton","rightButtonIcon","marginLeft","appBar","minWidth","emptyLine","ValidatorForm","isValidated","validate","formEl","formLength","checkValidity","elem","errorLabel","getAttribute","querySelector","textContent","autocomplete","nodeName","toLowerCase","validity","valid","validationMessage","hasCustomErrors","submitHandler","preventDefault","onSubmit","noValidate","ref","form","shortid","SolutionEditor","VOLUME_MAPPER","saveSolution","nginxErrors","_loop","dbSolution","_loop2","y","_loop3","_i","_context4","solution","_name","abrupt","nginxConfigIds","ndx","containerId","_solutionParameters","nginxConfigId","where","sent","description","_description","alias","_sp","delegateYield","container","_loop4","_y2","_context3","volumes","spVolumeObj","pathMapKey","vObject","containerPath","hostPath","nginxConfigObj","_context2","nc","uriPath","subdomain","asSubdomain","solutionSaved","t2","availableContainersAnchorEl","parse","sp","_prepareContainerStates","currentTarget","cIndex","stateObject","stateReset","keys","stateKey","indexOf","volumeKey","_v","volumeObj","cid","stateData","_this5","containerVolumeMapObject","volume","vId","generate","ndl","nxc","_this6","item","xs","e","stateUpd","_this7","row","control","checked","_this8","fullWidth","_this9","htmlFor","defineProperty","inputProps","domain","_this10","containerBlocks","solutionParameter","availableVolumes","gutterBottom","onRemoveContainer","paddingTop","onLookupVolume","anchorEl","handleAvailableVolumeMenuClose","v","vs","required","volumeDescription","paddingBottom","size","onRemoveVolume","Delete_default","z","borderRadius","port","getDialogFormBlockDomain","getDialogFormBlockUriPath","getDialogFormBlockIsSubdomain","getDialogFormBlockSubdomain","_this11","availableContainers","onLookupContainer","handleAvailableContainerMenuClose","getSolutionContainerBlock","_this12","nameSpan","ValidationForm","onDeleteSolution","exportSolution","multiline","getSolutionContainerEditor","ExportWizardDialog","handlePublicImageSwitchChange","_this$setState","stateObj","refName","ReactDOM","findDOMNode","refs","click","files","FormData","append","blob","URL","createObjectURL","href","download","remove","allValide","onDialogClose","exportNow","image","dockerImageId","version","accept","handleDockerfileZipSelected","openFileDialog","CloudUpload_default","Divider_default","isProd","environment","SAFE_STRING_REGEX","SolutionPage","sharedView","handleSnackClose","snackOpen","handleSolutionMenuClick","selectedSolutionId","selectedSolutionAlias","setTimeout","handleNewSolutionClose","targetSelect","newSolutionAnchorEl","aliasInputDialogValueErrors","aliasInputDialogValue","aliasInputDialogOpen","snackMessage","snackVariant","exportSolutionWizard","hasSubdomains","openSnack","solutionEditor","deleteSolution","afterSolutionSaved","_onClick","_callee2","sid","solutionLinks","apply","autoFocus","exec","openImportSolutionFileDialog","fileInputDom","import_input","containerBuildDirs","solutionJsonFilePath","emptyState","backgroundImage","SharableView","el","aria-owns","aria-haspopup","handleNewSolutionClick","CreateNewFolderOutlined_default","inset","ImportExport_default","DonutLarge_default","noWrap","renderSolutionEditor","AlertBar","getAliasEditorDialog","handleImportSolutionSelect","exportWizardDialog","onSolutionExportDialogClose","formDiv","overflow","maxHeight","tableHeaderCell","tableCellButton","card","cardInfo","emptyDialogLine","Transition","Slide_default","direction","NetworksTable","SET_DATA_REDUCER_ACTION","handleDialogClose","setSelected","saveDialogData","modelObject","dbResult","_dbResult","updData","_id","populateSelected","mode","deleteDialogData","_callee3","populateEditorFormFromObject","selected","tblClickDebouncer","cellClasses","isSelected","selectedId","TableRow_default","hover","handleRowClick","TableCell_default","selectedItem","clearTimeout","si","tblHeader","tableHeader","Table_default","table","TableHead_default","TableBody_default","tableRow","Typography_default","LinearProgress_default","TransitionComponent","AppBar_default","Toolbar_default","generateFormContent","DockerImagesTable","template","YAML","t1","_version","_template","component","colSpan","ReactContainerVolumeDialog","doit","currentVolumes","onDuplicate","git","cmd","execOnEveryDeploy","Grid_default","TextField_default","FormGroup_default","FormControlLabel_default","Switch_default","submitLabel","volumeDialog","ContainerVolumeDialog_ReactContainerVolumeDialog","PORT_MAPPING_REGEX","DNS_MAPPING_REGEX","ENV_REGEX","MenuProps","PaperProps","ITEM_HEIGHT","ConfigsTable","dependsOnOverlap","_i2","_dependsOn","depCont","dependsOn","u","_networks","networkId","toDelSolutionParams","inputDialogOpen","inputDialogLabel","inputDialogTarget","inputDialogValue","inputDialogKey","inputDialogValueErrors","containerStatuses","actionDialogOpen","actionDialogAnchor","tblButtonEventSource","containerStatusUpdateInterval","containerStatus","setInterval","clearInterval","rowId","_callee4","_callee5","_context5","_callee6","_context6","enabledState","_callee7","_context7","enabled","dImage","di","isUp","_row","handleEnable","CheckBoxOutlineBlank_default","CheckBoxOutlined_default","handleStop","Stop_default","handleStart","PlayCircleOutline_default","handleRestart","Replay_default","_dockerImageId","_env","env","_ports","ports","_command","command","_user","user","_workingDir","workingDir","_volumes","_dns","dns","text","validator","validationErrors","_this13","networkNames","n","multiple","renderValue","_this14","containerNames","oid","cl","_this15","imageObject","yamlDoc","substring","networkIds","depends_on","configIds","working_dir","_this16","dense","en","index","CheckCircleOutline_default","secondary","splice","_this17","_onSubmit","_callee8","_context8","_x","vObj","_this18","_ref7","_callee9","oldContainerPath","_context9","_x2","_x3","FolderOpen_default","_this19","Dns_default","_this20","_this21","getDialogFormBlockName","getDialogFormBlockDockerImages","getDialogFormBlockCommand","getDialogFormBlockUser","getDialogFormBlockWorkingDir","getDialogFormBlockDependsOn","getDialogFormBlockVolumes","getDialogFormBlockDns","getDialogFormBlockEnvironementVariables","getDialogFormBlockPorts","stringEditorDialog","DockerPage","TableEditors_dockerImages","TableEditors_containers","CertificateUploadDialog","privkey","cert","onDone","fName","endsWith","handleFileSelected","certificateUploadDialog","CertificateUploadDialog_CertificateUploadDialog","DOMAIN_AS_IP_REGEX","DomainsTable","allOk","checkDomain","_value","httpsEnabled","configured","sslMissing","defaultDomain","settingsInterval","Security_default","defaultDomainToggleEvent","previousDefaultDomain","settingsUpdate","settingsClone","sc","_httpsEnabled","setLoading","_onDone","Card_default","CardContent_default","scroll","getDialogFormBlockHttpsEnabled","getDialogFormBlockUploadCertificates","BasicAuthTable","username","_username","basicAuthId","_password","password","NginxPresetsTable","nginxPresetParamsId","_list","list","getDialogFormBlockParamssList","nginxDockerLink","_serverTarget","_port","_asSubdomain","_domainId","_selectedContainers","_nginxDockerLink","cUpdated","populateEditorFormObject","_uriPath","_subdomain","_proxyPath","proxyPath","_nginxPresetParamsId","_basicAuthId","serverTarget","psItem","getDialogFormBlockBasicAuth","getDialogFormBlockServerTarget","getDialogFormBlockContainers","getDialogFormBlockPort","getDialogFormBlockProxyTarget","getDialogFormBlockPresetParams","NginxConfigurationsPage","TableEditors_domains","loadingStateChange","TableEditors_nginxPresetParams","TableEditors_basicAuth","TableEditors_nginxConfigs","_nginxConfigPath","_composeConfigPath","_defaultNginxDomain","_nginxHtpasswdDir","stateForm","newSettings","obj","setting","sort","b","saveSettings","getSettingField","LoginPage","email","transform","justify","icons_index_es","md","sm","langs","PubSubController","lang","loadLang","routing","BrowserRouter","basename","es","Route","exact","SolutionConfigurationPage","DockerConfigurationsPage","SettingsConfigurationsPage","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.4159738a.chunk.js","sourcesContent":["let initialState = { token: null, userId: null, online: false };\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"LOGGIN_USER\":\r\n            state = Object.assign({}, state, action.data);\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n};","let initialState = [];\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"SET_NETWORKS\":\r\n            return action.data;\r\n        default:\r\n            return state;\r\n    }\r\n};","let initialState = [];\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"SET_BASICAUTH\":\r\n            return action.data;\r\n        default:\r\n            return state;\r\n    }\r\n};","let initialState = [];\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"SET_DOCKER_IMAGES\":\r\n            return action.data;\r\n        default:\r\n            return state;\r\n    }\r\n};","let initialState = [];\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"SET_CONTAINERS\":\r\n            return action.data;\r\n        case \"UPDATE_CONTAINER\":\r\n            return state.map(c => {\r\n                if (c.id == action.data.id) {\r\n                    return action.data;\r\n                } else {\r\n                    return c;\r\n                }\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n};","let initialState = [];\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"SET_SOLUTIONS\":\r\n            return action.data;\r\n        case \"DELETE_SOLUTION\":\r\n            return state.filter(o => o.id != action.data);\r\n        default:\r\n            return state;\r\n    }\r\n};","let initialState = [];\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"SET_SOLUTION_PARAMETERS\":\r\n            return action.data;\r\n        case \"DELETE_SOLUTION_PARAMETER\":\r\n            return state.filter(o => o.id != action.data);\r\n        default:\r\n            return state;\r\n    }\r\n};","let initialState = [];\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"SET_DOMAINS\":\r\n            return action.data;\r\n        default:\r\n            return state;\r\n    }\r\n};","let initialState = [];\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"SET_NGINX_CONFIGS\":\r\n            return action.data;\r\n        default:\r\n            return state;\r\n    }\r\n};","let initialState = [];\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"SET_SETTINGS\":\r\n            return action.data;\r\n        default:\r\n            return state;\r\n    }\r\n};","let initialState = [];\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"SET_NGINX_DOCKER_LINKS\":\r\n            return action.data;\r\n        case \"ADD_NGINX_DOCKER_LINKS\":\r\n            return [...state, ...action.data];\r\n        case \"DELETE_NGINX_DOCKER_LINK\":\r\n            return state.filter(o => o.id != action.data);\r\n        default:\r\n            return state;\r\n    }\r\n};","let initialState = { };\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case \"LOAD_LITERALS\":\n            state = Object.assign({}, state, action.data);\n            return state;\n        default:\n            return state;\n    }\n};","let initialState = [];\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"SET_NGINX_PRESET_PARAMS\":\r\n            return action.data;\r\n        default:\r\n            return state;\r\n    }\r\n};","import { createStore } from 'redux';\r\nimport reducers from '../reducers/index';\r\n\r\nlet configureStore = () => {\r\n    // Now create the store\r\n    let store = createStore(reducers());// , applyMiddleware(middleware)\r\n\r\n    return store;\r\n};\r\n\r\nexport default configureStore;","import { combineReducers } from 'redux';\r\n\r\nimport userSession from './userSession';\r\nimport networks from './networks';\r\nimport basicAuth from './basicAuth';\r\nimport dockerImages from './dockerImages';\r\nimport containers from './containers';\r\nimport solutions from './solution';\r\nimport solutionParameters from './solutionParameters';\r\nimport domains from './domains';\r\nimport nginxConfigs from './nginxConfigs';\r\nimport settings from './settings';\r\nimport nginxDockerLinks from './nginxDockerLinks';\r\nimport literals from './literals';\r\nimport nginxPresetParams from './nginxPresetParams';\r\n\r\nexport default () => {\r\n    return combineReducers({\r\n        userSession,\r\n        networks,\r\n        dockerImages,\r\n        containers,\r\n        domains,\r\n        nginxConfigs,\r\n        nginxPresetParams,\r\n        settings,\r\n        basicAuth,\r\n        literals,\r\n        solutions,\r\n        solutionParameters,\r\n        nginxDockerLinks\r\n    })\r\n};","class API {\n    /**\n     * Create and store a single entity's endpoints\n     * @param {A entity Object} entity\n     */\n    static createEntity(entity) {\n        this.endpoints[entity.name] = this.createBasicCRUDEndpoints(entity)\n    }\n\n    /**\n     * createEntities\n     * @param {*} arrayOfEntity \n     */\n    static createEntities(arrayOfEntity) {\n        arrayOfEntity.forEach(this.createEntity.bind(this))\n    }\n    /**\n     * Create the basic endpoints handlers for CRUD operations\n     * @param {A entity Object} entity\n     */\n    static createBasicCRUDEndpoints({ name }) {\n        var endpoints = {}\n\n        const resourceURL = `${this.url}/${name}`;\n        /**\n         * getOne\n         * @param {*} query \n         */\n        endpoints.getOne = (query) => {\n            return new Promise((resolve, reject) => {\n                fetch(`${resourceURL}/findOne${query ? ('?filter=' + JSON.stringify(query)) : ''}`, {\n                    method: \"GET\",\n                    headers: this.headers\n                }).then(response => {\n                    if (!response.ok) {\n                        let err = new Error(\"An error occured\");\n                        err.status = response.status;\n                        return reject(err);\n                    }\n                    resolve(response.json());\n                }).catch(err => {\n                    console.log(err);\n                    reject(err);\n                });\n            });\n        }\n\n        /**\n         * getAll\n         * @param {*} query \n         */\n        endpoints.getAll = (query) => {\n            return new Promise((resolve, reject) => {\n                fetch(`${resourceURL}${query ? ('?filter=' + JSON.stringify(query)) : ''}`, {\n                    method: \"GET\",\n                    headers: this.headers\n                }).then(response => {\n                    if (!response.ok) {\n                        let err = new Error(\"An error occured\");\n                        err.status = response.status;\n                        return reject(err);\n                    }\n                    resolve(response.json());\n                }).catch(err => {\n                    reject(err);\n                });\n            });\n        }\n\n        /**\n         * getAll\n         * @param {*} query \n         */\n        endpoints.getAllRelations = (id, relationName) => {\n            return new Promise((resolve, reject) => {\n\n                fetch(`${resourceURL}/${id}/${relationName}`, {\n                    method: \"GET\",\n                    headers: this.headers\n                }).then(response => {\n                    if (!response.ok) {\n                        let err = new Error(\"An error occured\");\n                        err.status = response.status;\n                        return reject(err);\n                    }\n                    resolve(response.json());\n                }).catch(err => {\n                    reject(err);\n                });\n            });\n        }\n\n        /**\n         * deleteById\n         * @param {*} query \n         */\n        endpoints.deleteById = (id) => {\n            return new Promise((resolve, reject) => {\n                fetch(`${resourceURL}/${id}`, {\n                    method: \"DELETE\",\n                    headers: this.headers\n                }).then(response => {\n                    if (!response.ok) {\n                        let err = new Error(\"An error occured\");\n                        err.status = response.status;\n                        return reject(err);\n                    }\n                    resolve(response.json());\n                }).catch(err => {\n                    reject(err);\n                });\n            });\n        }\n\n        /**\n         * create\n         * @param {*} toCreate \n         */\n        endpoints.create = (toCreate) => {\n            return new Promise((resolve, reject) => {\n                fetch(`${resourceURL}`, {\n                    method: \"POST\",\n                    headers: this.headers,\n                    body: JSON.stringify(toCreate)\n                }).then(response => {\n                    if (!response.ok) {\n                        let err = new Error(\"An error occured\");\n                        err.status = response.status;\n                        return reject(err);\n                    }\n                    resolve(response.json());\n                }).catch(err => {\n                    reject(err);\n                });\n            });\n        }\n\n        /**\n         * linkRelation\n         */\n        endpoints.linkRelation = (id, relatedModelName, relatedId, relationObject) => {\n            return new Promise((resolve, reject) => {\n                fetch(`${resourceURL}/${id}/${relatedModelName}/rel/${relatedId}`, {\n                    method: \"PUT\",\n                    headers: this.headers,\n                    body: JSON.stringify(relationObject)\n                }).then(response => {\n                    if (!response.ok) {\n                        let err = new Error(\"An error occured\");\n                        err.status = response.status;\n                        return reject(err);\n                    }\n                    resolve();\n                }).catch(err => {\n                    reject(err);\n                });\n            });\n        }\n\n        /**\n         * linkRelation\n         */\n        endpoints.unlinkRelation = (id, relatedModelName, relatedId) => {\n            return new Promise((resolve, reject) => {\n                fetch(`${resourceURL}/${id}/${relatedModelName}/rel/${relatedId}`, {\n                    method: \"DELETE\",\n                    headers: this.headers\n                }).then(response => {\n                    if (!response.ok) {\n                        let err = new Error(\"An error occured\");\n                        err.status = response.status;\n                        return reject(err);\n                    }\n                    resolve();\n                }).catch(err => {\n                    reject(err);\n                });\n            });\n        }\n\n        /**\n         * update\n         * @param {*} toUpdate \n         */\n        endpoints.update = (toUpdate) => {\n            return new Promise((resolve, reject) => {\n                fetch(`${resourceURL}`, {\n                    method: \"PUT\",\n                    headers: this.headers,\n                    body: JSON.stringify(toUpdate)\n                }).then(response => {\n                    if (!response.ok) {\n                        let err = new Error(\"An error occured\");\n                        err.status = response.status;\n                        return reject(err);\n                    }\n                    resolve(response.json());\n                }).catch(err => {\n                    reject(err);\n                });\n            });\n        }\n\n        /**\n         * remote\n         * @param {*} name \n         * @param {*} id \n         * @param {*} body \n         */\n        endpoints.remote = (name, id, method, body) => {\n            return new Promise((resolve, reject) => {\n                fetch(`${resourceURL}/${name}${id ? (\"/\" + id) : \"\"}`, {\n                    method: method,\n                    headers: this.headers,\n                    body: JSON.stringify(body)\n                }).then(response => {\n                    if (!response.ok) {\n                        let err = new Error(\"An error occured\");\n                        err.status = response.status;\n                        return reject(err);\n                    }\n                    resolve(response.status != 204 ? response.json() : null);\n                }).catch(err => {\n                    reject(err);\n                });\n            });\n        }\n\n        /**\n         * solutionExport\n         */\n        endpoints.solutionExport = (solutionId, formData) => {\n            return new Promise((resolve, reject) => {\n                fetch(`${resourceURL}/exportSolution/${solutionId}`, {\n                    method: \"POST\",\n                    headers: {\n                        'Authorization': this.headers.Authorization\n                    },\n                    body: formData\n                }).then(response => {\n                    if (!response.ok) {\n                        let err = new Error(\"Invalide Dockerfile folder\");\n                        err.status = response.status;\n                        return reject(err);\n                    }\n                    resolve(response);\n                }).catch(err => {\n                    reject(err);\n                });\n            });\n        }\n\n        /**\n         * solutionImport\n         */\n        endpoints.solutionImport = (formData) => {\n            return new Promise((resolve, reject) => {\n                fetch(`${resourceURL}/importSolution`, {\n                    method: \"POST\",\n                    headers: {\n                        'Authorization': this.headers.Authorization\n                    },\n                    body: formData\n                }).then(response => {\n                    if (!response.ok) {\n                        let err = new Error(\"An error occured\");\n                        err.status = response.status;\n                        return reject(err);\n                    }\n                    resolve(response.status != 204 ? response.json() : null);\n                }).catch(err => {\n                    reject(err);\n                });\n            });\n        }\n\n        /**\n         * solutionImport\n         */\n        endpoints.uploadCertificate = (domainId, formData) => {\n            return new Promise((resolve, reject) => {\n                fetch(`${resourceURL}/uploadCertificate/${domainId}`, {\n                    method: \"POST\",\n                    headers: {\n                        'Authorization': this.headers.Authorization\n                    },\n                    body: formData\n                }).then(response => {\n                    if (!response.ok) {\n                        let err = new Error(\"An error occured\");\n                        err.status = response.status;\n                        return reject(err);\n                    }\n                    resolve(response.status != 204 ? response.json() : null);\n                }).catch(err => {\n                    reject(err);\n                });\n            });\n        }\n\n        /**\n         * remoteGet\n         */\n        endpoints.remoteGet = (name, query) => {\n            let queryString = [];\n            query = query || {};\n            for (let key in query) {\n                queryString.push(key + \"=\" + encodeURIComponent(query[key]));\n            }\n\n            return new Promise((resolve, reject) => {\n                fetch(`${resourceURL}/${name}${queryString.length > 0 ? (\"?\" + queryString.join(\"&\")) : \"\"}`, {\n                    method: \"GET\",\n                    headers: this.headers\n                }).then(response => {\n                    if (!response.ok) {\n                        let err = new Error(\"An error occured\");\n                        err.status = response.status;\n                        return reject(err);\n                    }\n                    resolve(response.json());\n                }).catch(err => {\n                    reject(err);\n                });\n            });\n        }\n\n        /**\n         * buildRemoteFileUri\n         */\n        endpoints.buildRemoteFileUri = (name, query) => {\n            let queryString = [];\n            query = query || {};\n            for (let key in query) {\n                queryString.push(key + \"=\" + encodeURIComponent(query[key]));\n            }\n            if (this.headers.Authorization)\n                queryString.push(\"access_token=\" + this.headers.Authorization);\n\n            return `${resourceURL}/${name}${queryString.length > 0 ? (\"?\" + queryString.join(\"&\")) : \"\"}`;\n        }\n\n        /**\n         * upload\n         * @param {*} name \n         * @param {*} id \n         * @param {*} formData \n         */\n        endpoints.upload = (name, id, formData) => {\n            return new Promise((resolve, reject) => {\n                fetch(`${resourceURL}/${name}${id ? (\"/\" + id) : \"\"}`, {\n                    method: \"POST\",\n                    headers: {\n                        'Content-Type': 'multipart/form-data',\n                        'Authorization': this.headers.Authorization\n                    },\n                    body: formData\n                }).then(response => {\n                    if (!response.ok) {\n                        let err = new Error(\"An error occured\");\n                        err.status = response.status;\n                        return reject(err);\n                    }\n                    resolve(response.json());\n                }).catch(err => {\n                    reject(err);\n                });\n            });\n        }\n\n\n\n        // endpoints.getOne = ({ id }) => fetch.get(`${resourceURL}/${id}`)\n\n        // endpoints.update = (toUpdate) => fetch.put(`${resourceURL}/${toUpdate.id}`, toUpdate)\n\n        // endpoints.patch = ({ id }, toPatch) => fetch.patch(`${resourceURL}/${id}`, toPatch)\n\n        // endpoints.delete = ({ id }) => fetch.delete(`${resourceURL}/${id}`)\n\n        return endpoints\n    }\n}\n\nAPI.headers = {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n};\nAPI.url = require(\"../env.json\").apiBaseRoute;\nAPI.endpoints = {};\n\nAPI.createEntity({ name: 'SdfUsers' });\nAPI.createEntity({ name: 'Networks' });\nAPI.createEntity({ name: 'DockerImages' });\nAPI.createEntity({ name: 'Containers' });\nAPI.createEntity({ name: 'NginxConfigs' });\nAPI.createEntity({ name: 'NginxPresetParams' });\nAPI.createEntity({ name: 'Domains' });\nAPI.createEntity({ name: 'BasicAuths' });\nAPI.createEntity({ name: 'Settings' });\nAPI.createEntity({ name: 'Solutions' });\nAPI.createEntity({ name: 'SolutionParameters' });\nAPI.createEntity({ name: 'NginxDockerLinks' });\n\nexport default API;","const io = require(\"socket.io-client\");\r\n\r\nclass SockerPubSub {\r\n    /**\r\n     * login\r\n     */\r\n    static login(userId) {\r\n        let sockerio_url = require(\"../env.json\").socketioBaseRoute;\r\n        console.log(\"=> Connecting to socket IO server: \", `${window.location.protocol}//${window.location.hostname}`);\r\n        this.socket = io(sockerio_url ? sockerio_url : `${window.location.protocol}//${window.location.hostname}`, { path: '/psh-socket' });\r\n\r\n        // When the RTM server socket connections is established\r\n        this.socket.on('connect', () => {\r\n            console.log(\"connected\");\r\n            // Ask to open a connection for a specific \r\n            this.socket.emit('registerSockerUser', {\r\n                \"uid\": userId\r\n            });\r\n\r\n            this.store.dispatch(\r\n                {\r\n                    type: \"LOGGIN_USER\",\r\n                    data: { \"online\": true }\r\n                }\r\n            );\r\n        });\r\n\r\n        // When an update on the server occures\r\n        this.socket.on('dataUpdate', (data) => {\r\n            // console.log(JSON.stringify(data, null, 4));\r\n        });\r\n\r\n        // When an update on the server occures\r\n        this.socket.on('deployStatus', (data) => {\r\n            this.subscriptions.forEach(o => {\r\n                if (o.eventName == 'deployStatus') {\r\n                    o.cb(data);\r\n                }\r\n            });\r\n        });\r\n\r\n        // When an update on the server occures\r\n        this.socket.on('importStatus', (data) => {\r\n            this.subscriptions.forEach(o => {\r\n                if (o.eventName == 'importStatus') {\r\n                    o.cb(data);\r\n                }\r\n            });\r\n        });\r\n\r\n        // When an update on the server occures\r\n        this.socket.on('containerStatus', (data) => {\r\n            this.subscriptions.forEach(o => {\r\n                if (o.eventName == 'containerStatus') {\r\n                    o.cb(data);\r\n                }\r\n            });\r\n        });\r\n\r\n        // When the RTM server socket connections goes down\r\n        this.socket.on('disconnect', () => {\r\n            console.log(\"Disconnected\");\r\n            this.store.dispatch(\r\n                {\r\n                    type: \"LOGGIN_USER\",\r\n                    data: { \"online\": false }\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * logout\r\n     */\r\n    static logout() {\r\n        if (this.socket) {\r\n            this.socket.disconnect();\r\n            this.socket = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * on\r\n     */\r\n    static on(eventName, cb) {\r\n        this.subscriptions.push({\r\n            \"eventName\": eventName,\r\n            \"cb\": cb\r\n        });\r\n    }\r\n\r\n    /**\r\n     * off\r\n     */\r\n    static off(eventName) {\r\n        this.subscriptions = this.subscriptions.filter(o => o.eventName != eventName);\r\n    }\r\n}\r\nSockerPubSub.store = null;\r\nSockerPubSub.socket = null;\r\nSockerPubSub.subscriptions = [];\r\n\r\nexport default SockerPubSub;\r\n","import API from \"./API\";\r\nimport SocketPubSub from './sockerPubSub';\r\n\r\n\r\n\r\nclass Authentication {\r\n\r\n    /**\r\n     * login\r\n     */\r\n    static async login(credentials) {\r\n        // Try to login on the sdf server\r\n        let loginData = await API.endpoints.SdfUsers.remote(\"login\", null, \"POST\", credentials);\r\n        await this.setUser(loginData);\r\n    }\r\n\r\n    /**\r\n     * setUser\r\n     */\r\n    static async setUser(loginData) {\r\n        SocketPubSub.login(loginData.userId);\r\n\r\n        API.headers.Authorization = loginData.id;\r\n        sessionStorage.accessToken = JSON.stringify(loginData);\r\n        // Dispatch userObject to store\r\n        this.store.dispatch(\r\n            {\r\n                type: \"LOGGIN_USER\",\r\n                data: { \"token\": loginData.id, \"userId\": loginData.userId }\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * logout\r\n     */\r\n    static async logout() {\r\n        // TODO: Needs to be implemented\r\n        // await API.endpoints.SdfUsers.remote(\"logout\", null, \"POST\", );\r\n\r\n        SocketPubSub.logout();\r\n\r\n        // Dispatch userObject to store\r\n        this.store.dispatch({\r\n            type: \"LOGGIN_USER\",\r\n            data: { \"token\": null }\r\n        });\r\n\r\n        delete API.headers.Authorization;\r\n        sessionStorage.accessToken = null;\r\n    }\r\n}\r\n\r\nAuthentication.store = null;\r\n\r\nexport default Authentication;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (<Redirect to='/login' />);\n  }\n}\n\n// The function takes data from the app current state,\n// and insert/links it into the props of our component.\n// This function makes Redux know that this component needs to be passed a piece of the state\nconst mapStateToProps = (state, props) => ({\n  userSession: state.userSession\n});\n\nconst mapDispatchToProps = (dispatch) => ({ \"dispatch\": dispatch });\n\n//Connect everything\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const styles = theme => ({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    title: {\r\n        fontSize: 32,\r\n        color: '#ffffff'\r\n    },\r\n    paper: {\r\n        padding: theme.spacing.unit,\r\n        backgroundColor: 'rgba(255, 255, 255, 0.8)',\r\n        position: 'relative'\r\n    },\r\n    margin: {\r\n        margin: theme.spacing.unit * 2,\r\n    },\r\n    padding: {\r\n        padding: theme.spacing.unit\r\n    },\r\n    redColor: {\r\n        color: \"#db1d1d\",\r\n    },\r\n    greenColor: {\r\n        color: \"green\",\r\n    },\r\n    blueColor: {\r\n        color: \"blue\",\r\n    },\r\n    greyColor: {\r\n        color: \"#cccccc\",\r\n    },\r\n    modalPaper: {\r\n        position: 'absolute',\r\n        width: theme.spacing.unit * 50,\r\n        backgroundColor: theme.palette.background.paper,\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing.unit * 4,\r\n    },\r\n    tableTitleDiv: {\r\n        fontSize: 28,\r\n        marginTop: 5,\r\n        marginBottom: 10,\r\n        textAlign: 'left'\r\n    },\r\n    tableCell: {\r\n        whiteSpace: 'normal',\r\n        wordWrap: 'break-word'\r\n    },\r\n    snackClose: {\r\n        padding: theme.spacing.unit / 2,\r\n    },\r\n    configPaper: {\r\n        padding: theme.spacing.unit,\r\n        position: 'relative',\r\n        textAlign: 'left',\r\n        paddingLeft: 10,\r\n        paddingRight: 10,\r\n        backgroundColor: 'rgba(255, 255, 255, 0.8)'\r\n    },\r\n    menuItem: {},\r\n    menuItemSelected: {\r\n        backgroundColor: '#bbbbbb',\r\n    },\r\n    primary: {},\r\n    icon: {},\r\n    viewContainer: {\r\n        borderLeft: '10px solid #cccccc'\r\n    },\r\n    emptyView: {\r\n        height: 400,\r\n        backgroundSize: 'contain',\r\n        backgroundRepeat: 'no-repeat',\r\n        backgroundPosition: 'center'\r\n    }\r\n});\r\n\r\nexport default styles;\r\n","'use strict';\n\nimport React, { Component } from 'react';\nimport logo from '../../../logo.svg';\n\nclass LoadingIndicator extends Component {\n\t/**\n\t * \n\t * @param {*} props \n\t */\n\tconstructor(props) {\n\t\tsuper(props);\n\t}\n\n\t/**\n\t * \n\t */\n\trender() {\n\t\tif (this.props.show) {\n\t\t\treturn <div style={{\n\t\t\t\tposition: \"fixed\",\n\t\t\t\tzIndex: 2000,\n\t\t\t\ttop: 0,\n\t\t\t\tbottom: 0,\n\t\t\t\tleft: 0,\n\t\t\t\tright: 0,\n\t\t\t\tflex: 1,\n\t\t\t\talignItems: \"center\",\n\t\t\t\tjustifyContent: \"center\",\n\t\t\t\ttextAlign: \"center\",\n\t\t\t\tbackgroundColor: 'rgba(0, 0, 0, 0.7)'\n\t\t\t}}>\n\t\t\t\t<img className=\"Loading\" src={logo} />\n\t\t\t\t<div style={{\n\t\t\t\t\tcolor: \"#ffffff\",\n\t\t\t\t\tfontWeight: \"bold\",\n\t\t\t\t\tlineHeight: 2,\n\t\t\t\t\tpaddingLeft: 40,\n\t\t\t\t\tpaddingRight: 40,\n\t\t\t\t}}>{this.props.message ? this.props.message : \"Processing...\"}</div>\n\t\t\t</div >;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\n//Connect everything\nexport default LoadingIndicator;","import API from \"../../services/API\";\n\nclass StoreHelper {\n\n    /**\n     * loadStoreData\n     * @param {*} dispatch \n     */\n    static async loadStoreData(dispatch) {\n        if (!this.initialized) {\n            await this.reloadCoreData(dispatch);\n\n            let resultSettings = await API.endpoints.Settings.getAll();\n            dispatch({\n                type: \"SET_SETTINGS\",\n                data: resultSettings\n            });\n        }\n        this.initialized = true;\n    }\n\n    /**\n     * clearStoreData\n     * @param {*} dispatch \n     */\n    static async clearStoreData(dispatch) {\n        this.initialized = false;\n        dispatch({\n            type: \"SET_NETWORKS\",\n            data: []\n        });\n        dispatch({\n            type: \"SET_BASICAUTH\",\n            data: []\n        });\n        dispatch({\n            type: \"SET_CONTAINERS\",\n            data: []\n        });\n        dispatch({\n            type: \"SET_DOCKER_IMAGES\",\n            data: []\n        });\n        dispatch({\n            type: \"SET_DOMAINS\",\n            data: []\n        });\n        dispatch({\n            type: \"SET_NGINX_CONFIGS\",\n            data: []\n        });\n        dispatch({\n            type: \"SET_NGINX_PRESET_PARAMS\",\n            data: []\n        });\n        dispatch({\n            type: \"SET_SETTINGS\",\n            data: []\n        });\n    }\n\n    /**\n     * reloadCoreData\n     * @param {*} dispatch \n     */\n    static async reloadCoreData(dispatch) {\n        let resultNetworks = await API.endpoints.Networks.getAll();\n        dispatch({\n            type: \"SET_NETWORKS\",\n            data: resultNetworks\n        });\n\n        let resultBasicAuth = await API.endpoints.BasicAuths.getAll();\n        dispatch({\n            type: \"SET_BASICAUTH\",\n            data: resultBasicAuth\n        });\n\n        let resultDockerImages = await API.endpoints.DockerImages.getAll();\n        dispatch({\n            type: \"SET_DOCKER_IMAGES\",\n            data: resultDockerImages\n        });\n\n        let resultContainers = await API.endpoints.Containers.getAll();\n        for (let i = 0; i < resultContainers.length; i++) {\n            let networkRelations = await API.endpoints.Containers.getAllRelations(resultContainers[i].id, \"networks\");\n            resultContainers[i].networks = networkRelations.map(o => o.id);\n        }\n        dispatch({\n            type: \"SET_CONTAINERS\",\n            data: resultContainers\n        });\n\n        let resultSolutions = await API.endpoints.Solutions.getAll();\n        dispatch({\n            type: \"SET_SOLUTIONS\",\n            data: resultSolutions\n        });\n\n        let nginxDockerLinks = await API.endpoints.NginxDockerLinks.getAll();\n        dispatch({\n            type: \"SET_NGINX_DOCKER_LINKS\",\n            data: nginxDockerLinks\n        });\n\n        let resultSolutionParameters = await API.endpoints.SolutionParameters.getAll();\n        dispatch({\n            type: \"SET_SOLUTION_PARAMETERS\",\n            data: resultSolutionParameters\n        });\n\n        let resultDomains = await API.endpoints.Domains.getAll();\n        dispatch({\n            type: \"SET_DOMAINS\",\n            data: resultDomains\n        });\n\n        let resultNginxConfigs = await API.endpoints.NginxConfigs.getAll();\n        dispatch({\n            type: \"SET_NGINX_CONFIGS\",\n            data: resultNginxConfigs\n        });\n\n        let resultNginxPresetParams = await API.endpoints.NginxPresetParams.getAll();\n        dispatch({\n            type: \"SET_NGINX_PRESET_PARAMS\",\n            data: resultNginxPresetParams\n        });\n    }\n}\nStoreHelper.initialized = false;\nexport default StoreHelper;","'use strict';\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport logo from '../../../logo.svg';\nimport { Button } from '@material-ui/core';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Authentication from '../../../services/authentication';\nimport LoadingIndicator from \"../LoadingIndicator/index\";\nimport SocketPubSub from '../../../services/sockerPubSub';\nimport StoreHelper from '../../../lib/StoreHelper/loadData';\n\nclass SharableViewComponent extends Component {\n\t/**\n\t * \n\t * @param {*} props \n\t */\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tselectedPageIndex: this.props.pageIndex,\n\t\t\tloading: false,\n\t\t\tloadingMessage: null\n\t\t};\n\t}\n\n\t/**\n     * componentDidMount\n     */\n\tcomponentDidMount() {\n\t\tSocketPubSub.on(\"deployStatus\", (data) => {\n\t\t\tif (data.status && data.status == \"done\") {\n\t\t\t\tthis.setState({\n\t\t\t\t\t\"loading\": false,\n\t\t\t\t\t\"loadingMessage\": null\n\t\t\t\t});\n\t\t\t\tthis.props.notify([\"Successfully deployed configuration.\", \"If you changed the SSL status of the default config, remember to manually change your URL in your browser to get back to this website.\", \"Your server might take up to a minute to respond again, so be patient.\"]);\n\t\t\t} else if (data.status && data.status == \"error\") {\n\t\t\t\tthis.setState({\n\t\t\t\t\t\"loading\": false,\n\t\t\t\t\t\"loadingMessage\": null\n\t\t\t\t});\n\t\t\t\tthis.props.notify((data.message ? data.message : \"An error occured, could not deploy configuration\"), \"error\");\n\t\t\t} else if (data.message) {\n\t\t\t\tthis.setState({\n\t\t\t\t\t\"loadingMessage\": data.message\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tif (!this.props.userSession.token) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.loadTableList();\n\t}\n\n\t/**\n\t *componentWillUnmount\n\t */\n\tcomponentWillUnmount() {\n\t\tSocketPubSub.off(\"deployStatus\");\n\t}\n\n\t/**\n     * loadTableList\n     */\n\tloadTableList() {\n\t\t(async () => {\n\t\t\ttry {\n\t\t\t\tthis.setState({\n\t\t\t\t\t\"loading\": true,\n\t\t\t\t\t\"loadingMessage\": null\n\t\t\t\t});\n\n\t\t\t\tawait StoreHelper.loadStoreData(this.props.dispatch);\n\n\t\t\t\tthis.setState({\n\t\t\t\t\t\"loading\": false,\n\t\t\t\t\t\"loadingMessage\": null\n\t\t\t\t});\n\t\t\t} catch (err) {\n\n\t\t\t\tawait StoreHelper.clearStoreData(this.props.dispatch);\n\n\t\t\t\tthis.setState({\n\t\t\t\t\t\"loading\": false,\n\t\t\t\t\t\"loadingMessage\": null\n\t\t\t\t});\n\n\t\t\t\tthis.props.notify(\"Server unavailable\", \"error\");\n\t\t\t}\n\t\t})();\n\t}\n\n    /**\n     * logout\n     */\n\tlogout() {\n\t\tAuthentication.logout();\n\t}\n\n\t/**\n     * deploy\n     */\n\tasync deploy() {\n\t\tlet defaultNginxDomain = this.props.settings.find(s => s.name == 'defaultNginxDomain');\n\t\tif (!defaultNginxDomain || !defaultNginxDomain.value || defaultNginxDomain.value.length == 0) {\n\t\t\treturn this.props.notify(\"You need to set a default domain first to be able to deploy a new config.\", \"error\");\n\t\t}\n\t\tlet valideDomain = this.props.domains.find(o => (defaultNginxDomain.value == o.value));\n\t\tif (!valideDomain) {\n\t\t\treturn this.props.notify(\"You configured default domain has not ben declared in your domains.\", \"error\");\n\t\t}\n\n\t\tthis.setState({\n\t\t\t\"loading\": true,\n\t\t\t\"loadingMessage\": \"Deploying...\"\n\t\t});\n\t\ttry {\n\t\t\tSocketPubSub.socket.emit('deployConfig', {\n\t\t\t\t\"uid\": this.props.userSession.userId\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tthis.setState({\n\t\t\t\t\"loading\": false,\n\t\t\t\t\"loadingMessage\": null\n\t\t\t});\n\t\t\tthis.props.notify(\"An error occured, could not deploy configuration\", \"error\");\n\t\t}\n\t}\n\n\t/**\n\t * \n\t */\n\trender() {\n\t\treturn <div style={{ flex: 1 }}>\n\t\t\t<div className=\"App\">\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t\t<p>Server Docker Farm</p>\n\t\t\t\t\t<Button variant=\"contained\" color=\"secondary\" style={{ textTransform: \"none\", position: 'absolute', right: 20, top: 20 }} onClick={this.logout.bind(this)}>Logout</Button>\n\t\t\t\t\t<Button disabled={!this.props.userSession.online} variant=\"contained\" color=\"primary\" style={{ textTransform: \"none\", position: 'absolute', right: 120, top: 20 }} onClick={this.deploy.bind(this)}>Deploy</Button>\n\t\t\t\t</header>\n\t\t\t\t{/* <AppBar position=\"static\"> */}\n\n\t\t\t\t<Tabs\n\t\t\t\t\tvalue={this.state.selectedPageIndex}\n\t\t\t\t\tonChange={(event, value) => {\n\t\t\t\t\t\tthis.setState({ selectedPageIndex: value });\n\n\t\t\t\t\t\tif (value == 2) {\n\t\t\t\t\t\t\tthis.props.history.push(\"/nginx\")\n\t\t\t\t\t\t} else if (value == 3) {\n\t\t\t\t\t\t\tthis.props.history.push(\"/config\")\n\t\t\t\t\t\t} else if (value == 0) {\n\t\t\t\t\t\t\tthis.props.history.push(\"/solution\")\n\t\t\t\t\t\t} else if (value == 1) {\n\t\t\t\t\t\t\tthis.props.history.push(\"/docker\")\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t\tcentered\n\t\t\t\t\ttextColor=\"secondary\">\n\n\t\t\t\t\t<Tab label=\"Solutions\" style={this.state.selectedPageIndex != 0 ? { color: \"#ffffff\" } : null} />\n\t\t\t\t\t<Tab label=\"Containers\" style={this.state.selectedPageIndex != 1 ? { color: \"#ffffff\" } : null} />\n\t\t\t\t\t<Tab label=\"NGinx\" style={this.state.selectedPageIndex != 2 ? { color: \"#ffffff\" } : null} />\n\t\t\t\t\t<Tab label=\"Settings\" style={this.state.selectedPageIndex != 3 ? { color: \"#ffffff\" } : null} />\n\t\t\t\t</Tabs>\n\t\t\t\t{/* </AppBar> */}\n\t\t\t\t<div className=\"App-body\">\n\t\t\t\t\t{this.props.children}\n\t\t\t\t</div>\n\n\t\t\t</div >\n\t\t\t<LoadingIndicator show={this.state.loading} message={this.state.loadingMessage} />\n\t\t</div >;\n\t}\n}\n\n// The function takes data from the app current state,\n// and insert/links it into the props of our component.\n// This function makes Redux know that this component needs to be passed a piece of the state\nconst mapStateToProps = (state, props) => ({\n\tuserSession: state.userSession,\n\tdomains: state.domains,\n\tsettings: state.settings\n});\n\nconst mapDispatchToProps = (dispatch) => ({ \"dispatch\": dispatch });\n\n//Connect everything\nexport default connect(mapStateToProps, mapDispatchToProps)(SharableViewComponent);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Button from '@material-ui/core/Button';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport green from '@material-ui/core/colors/green';\nimport amber from '@material-ui/core/colors/amber';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst variantIcon = {\n    success: CheckCircleIcon,\n    warning: WarningIcon,\n    error: ErrorIcon,\n    info: InfoIcon,\n};\n\nconst styles1 = theme => ({\n    success: {\n        backgroundColor: green[600],\n    },\n    error: {\n        backgroundColor: theme.palette.error.dark,\n    },\n    info: {\n        backgroundColor: theme.palette.primary.dark,\n    },\n    warning: {\n        backgroundColor: amber[700],\n    },\n    icon: {\n        fontSize: 20,\n    },\n    iconVariant: {\n        opacity: 0.9,\n        marginRight: theme.spacing.unit,\n    },\n    message: {\n        display: 'flex',\n        alignItems: 'left',\n    },\n});\n\nfunction CustomSnackbarContent(props) {\n    const { classes, className, message, onClose, variant, ...other } = props;\n    const Icon = variantIcon[variant];\n\n    let msgArray = [];\n    if (typeof message === 'string') {\n        msgArray.push(message);\n    } else {\n        msgArray = message;\n    }\n\n    return (\n        <SnackbarContent\n            className={classNames(classes[variant], className)}\n            aria-describedby=\"client-snackbar\"\n            message={\n                <span id=\"client-snackbar\" className={classes.message}>\n                    <Icon className={classNames(classes.icon, classes.iconVariant)} />\n                    <div>\n                        {msgArray.map((m, i) => {\n                            return <div key={\"snack_\" + i} style={{ textAlign: 'left', marginTop: i > 0 ? 10 : 0, maxWidth: 480 }}>{m}</div>\n                        })}\n                    </div>\n                </span>\n            }\n            action={[\n                <IconButton\n                    key=\"close\"\n                    aria-label=\"Close\"\n                    color=\"inherit\"\n                    className={classes.close}\n                    onClick={onClose}\n                >\n                    <CloseIcon className={classes.icon} />\n                </IconButton>,\n            ]}\n            {...other}\n        />\n    );\n}\n\nCustomSnackbarContent.propTypes = {\n    classes: PropTypes.object.isRequired,\n    className: PropTypes.string,\n    message: PropTypes.node,\n    onClose: PropTypes.func,\n    variant: PropTypes.oneOf(['success', 'warning', 'error', 'info']).isRequired,\n};\n\nconst SnackbarContentWrapper = withStyles(styles1)(CustomSnackbarContent);\n\nconst styles2 = theme => ({\n    margin: {\n        margin: theme.spacing.unit,\n    },\n});\n\nclass AlertSnackbars extends React.Component {\n    state = {\n        open: false,\n    };\n\n    handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        this.props.handleClose();\n    };\n\n    render() {\n        const { classes } = this.props;\n\n        let duration = 6000;\n        if (this.props.variant && (this.props.variant == \"warning\" || this.props.variant == \"info\")) {\n            duration = 20000;\n        } else if (this.props.variant && this.props.variant == \"error\") {\n            duration = 15000;\n        }\n\n        return (\n            <div>\n                <Snackbar\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'left',\n                    }}\n                    open={this.props.open}\n                    autoHideDuration={duration}\n                    onClose={this.handleClose}\n                >\n                    <SnackbarContentWrapper\n                        onClose={this.handleClose}\n                        variant={this.props.variant ? this.props.variant : \"success\"}\n                        message={this.props.message}\n                    />\n                </Snackbar>\n            </div>\n        );\n    }\n}\n\nAlertSnackbars.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles2)(AlertSnackbars);","import React from 'react';\nimport PropTypes from 'prop-types'\nimport { render, unmountComponentAtNode } from 'react-dom'\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nexport default class ReactConfirmAlert extends React.Component {\n    static propTypes = {\n        title: PropTypes.string,\n        message: PropTypes.string,\n        buttons: PropTypes.array.isRequired,\n        willUnmount: PropTypes.func\n    }\n\n    static defaultProps = {\n        buttons: [\n            {\n                label: 'Cancel',\n                onClick: () => null\n            },\n            {\n                label: 'Confirm',\n                onClick: () => null\n            }\n        ],\n        willUnmount: () => null\n    }\n\n    handleClickButton = button => {\n        if (button.onClick) {\n            button.onClick();\n        }\n        this.close();\n    }\n\n    close = () => {\n        removeElementReconfirm();\n    }\n\n    keyboardClose = event => {\n        if (event.keyCode === 27) {\n            this.close()\n        }\n    }\n\n    componentDidMount = () => {\n        document.addEventListener('keydown', this.keyboardClose, false)\n    }\n\n    componentWillUnmount = () => {\n        document.removeEventListener('keydown', this.keyboardClose, false)\n        this.props.willUnmount()\n    }\n\n    render() {\n        const { title, message, buttons } = this.props\n\n        return (\n            <Dialog\n                open={true}\n                onClose={this.close}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                {title && <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>}\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-description\">\n                        {message}\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    {buttons.map((button, i) => (\n                        <Button\n                            key={i}\n                            onClick={() => this.handleClickButton(button)}\n                        >\n                            {button.label}\n                        </Button>\n                    ))}\n                </DialogActions>\n            </Dialog>\n        )\n    }\n}\n\nfunction createElementReconfirm(properties) {\n    let divTarget = document.getElementById('react-confirm-alert')\n    if (divTarget) {\n        // Rerender - the mounted ReactConfirmAlert\n        render(<ReactConfirmAlert {...properties} />, divTarget)\n    } else {\n        // Mount the ReactConfirmAlert component\n        document.body.children[0].classList.add('react-confirm-alert-blur')\n        divTarget = document.createElement('div')\n        divTarget.id = 'react-confirm-alert'\n        document.body.appendChild(divTarget)\n        render(<ReactConfirmAlert {...properties} />, divTarget)\n    }\n}\n\nfunction removeElementReconfirm() {\n    const target = document.getElementById('react-confirm-alert')\n    unmountComponentAtNode(target)\n    target.parentNode.removeChild(target)\n}\n\nexport function confirmAlert(properties) {\n    createElementReconfirm(properties)\n}","const styles = theme => ({\r\n    sectionBlockHeader: {\r\n        margin: `${theme.spacing.unit * 3}px 0px`,\r\n    },\r\n    sectionBlockBody: {\r\n        margin: `${theme.spacing.unit * 2}px 0px`,\r\n    },\r\n    saveSection: {\r\n        margin: `${theme.spacing.unit * 6}px 0px 0px`,\r\n    },\r\n    fab: {\r\n        margin: theme.spacing.unit,\r\n    },\r\n    uploadButton: {\r\n        margin: theme.spacing.unit,\r\n    },\r\n    rightButtonIcon: {\r\n        marginLeft: theme.spacing.unit,\r\n    },\r\n    appBar: {\r\n        position: 'relative',\r\n        minWidth: 550\r\n    },\r\n    flex: {\r\n        flex: 1,\r\n    },\r\n    emptyLine: {\r\n        fontSize: 14,\r\n    }\r\n});\r\n\r\nexport default styles;\r\n","import React from 'react'\r\n\r\n/**\r\n * A custom Form component that handles form validation errors.\r\n * It executes the form's checkValidity\r\n **/\r\nclass ValidatorForm extends React.Component {\r\n    state = {\r\n        isValidated: false\r\n    };\r\n\r\n    /**\r\n     * Them main function that validates the form and fills in the error messages.\r\n     * @returns bool Returns a boolean showing if the form is valid for submission or not.\r\n     **/\r\n    validate = () => {\r\n        //this.formEl is a reference in the component to the form DOM element.\r\n        const formEl = this.formEl;\r\n        const formLength = formEl.length;\r\n\r\n        //The form is valid, so we clear all the error messages\r\n        // for (let i = 0; i < formLength; i++) {\r\n        //     const elem = formEl[i];\r\n        //     console.log(elem.name, elem.value);\r\n        // }\r\n\r\n        /*\r\n        * The checkValidity() method on a form runs the \r\n        * html5 form validation of its elements and returns the result as a boolean.\r\n        * It returns 'false' if at least one of the form elements does not qualify,\r\n        * and 'true', if all form elements are filled with valid values.\r\n        */\r\n        if (formEl.checkValidity() === false) {\r\n            let hasCustomErrors = false;\r\n            for (let i = 0; i < formLength; i++) {\r\n                //the i-th child of the form corresponds to the forms i-th input element\r\n                const elem = formEl[i];\r\n\r\n                /*\r\n                * errorLabel placed next to an element is the container we want to use \r\n                * for validation error message for that element\r\n                */\r\n                let errorLabel;\r\n\r\n                /*\r\n                * A form element contains also any buttuns contained in the form.\r\n                * There is no need to validate a button, so, we'll skip that nodes.\r\n                */\r\n\r\n                if (elem.parentNode.parentNode.getAttribute(\"required\") != null) {\r\n                    errorLabel = elem.parentNode.parentNode.parentNode.querySelector(\".invalid-feedback\");\r\n                    if (elem.value == null || elem.value == undefined || elem.value.length == 0) {\r\n                        errorLabel.textContent = \"Required\";\r\n                        hasCustomErrors = true;\r\n                    } else {\r\n                        errorLabel.textContent = \"\";\r\n                    }\r\n                } else {\r\n                    if (elem.autocomplete === 'off' && elem.nodeName.toLowerCase() !== \"button\") {\r\n                        errorLabel = elem.parentNode.parentNode.parentNode.parentNode.querySelector(\".invalid-feedback\");\r\n                    } else {\r\n                        errorLabel = elem.parentNode.parentNode.parentNode.querySelector(\".invalid-feedback\");\r\n                    }\r\n\r\n                    if (errorLabel && elem.nodeName.toLowerCase() !== \"button\") {\r\n\r\n                        /*\r\n                        * Each note in html5 form has a validity property. \r\n                        * It contains the validation state of that element.\r\n                        * The elem.validity.valid property indicates whether the element qualifies its validation rules or no.\r\n                        * If it does not qualify, the elem.validationMessage property will contain the localized validation error message.\r\n                        * We will show that message in our error container if the element is invalid, and clear the previous message, if it is valid.\r\n                        */\r\n\r\n                        if (!elem.validity.valid) {\r\n                            errorLabel.textContent = elem.validationMessage;\r\n                        } else {\r\n                            errorLabel.textContent = \"\";\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            //Return 'false', as the formEl.checkValidity() method said there are some invalid form inputs.\r\n            return false;\r\n        } else {\r\n            let hasCustomErrors = false;\r\n            //The form is valid, so we clear all the error messages\r\n            for (let i = 0; i < formLength; i++) {\r\n                const elem = formEl[i];\r\n\r\n                if (elem.parentNode.parentNode.getAttribute(\"required\") != null) {\r\n                    const errorLabel = elem.parentNode.parentNode.parentNode.querySelector(\".invalid-feedback\");\r\n                    if (elem.value == null || elem.value == undefined || elem.value.length == 0) {\r\n                        errorLabel.textContent = \"Required\";\r\n                        hasCustomErrors = true;\r\n                    } else {\r\n                        errorLabel.textContent = \"\";\r\n                    }\r\n                } else {\r\n                    const errorLabel = elem.parentNode.parentNode.parentNode.querySelector(\".invalid-feedback\");\r\n                    if (errorLabel && elem.nodeName.toLowerCase() !== \"button\") {\r\n                        errorLabel.textContent = \"\";\r\n                    }\r\n                }\r\n            }\r\n\r\n            //Return 'true', as the form is valid for submission\r\n            return !hasCustomErrors;\r\n        }\r\n    };\r\n\r\n    /**\r\n    * This is the method that is called on form submit.\r\n    * It stops the default form submission process and proceeds with custom validation.\r\n    **/\r\n    submitHandler = event => {\r\n        event.preventDefault();\r\n\r\n        //If the call of the validate method was successful, we can proceed with form submission. Otherwise we do nothing.\r\n        if (this.validate()) {\r\n            this.props.onSubmit();\r\n        }\r\n\r\n        this.setState({ isValidated: true });\r\n    };\r\n\r\n    /**\r\n    * Render the component as a regular form element with appended children from props.\r\n    **/\r\n    render() {\r\n        // console.log(this.props);\r\n\r\n        //Add bootstrap's 'was-validated' class to the forms classes to support its styling\r\n        let classNames = [];\r\n\r\n        if (this.state.isValidated) {\r\n            classNames.push(\"was-validated\");\r\n        }\r\n\r\n        //The form will have a refference in the component and a submit handler set to the component's submitHandler\r\n        return (\r\n            <form\r\n                {...this.props}\r\n                className={classNames}\r\n                noValidate\r\n                ref={form => (this.formEl = form)}\r\n                onSubmit={this.submitHandler}\r\n            >\r\n                {this.props.children}\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ValidatorForm;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { withStyles } from '@material-ui/core/styles';\nimport styles from '../styles.js';\nimport ValidatorForm from \"../../../../elements/ValidationForm/index\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport LoadingIndicator from \"../../../../elements/LoadingIndicator/index\";\nimport API from \"../../../../../services/API\";\n\nimport {\n    FormControl,\n    Select,\n    Menu,\n    MenuItem,\n    InputLabel,\n    Grid, Button, TextField,\n    FormControlLabel,\n    FormGroup,\n    Switch,\n    Fab,\n    Divider,\n    Slide,\n    Typography\n} from '@material-ui/core';\n\nconst shortid = require('shortid');\n\nfunction Transition(props) {\n    return <Slide direction=\"up\" {...props} />;\n}\n\nclass SolutionEditor extends React.Component {\n    VOLUME_MAPPER = {}\n\n    /**\n     * constructor\n     * @param {*} props \n     */\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            _name: \"\",\n            _description: \"\",\n            _solutionParameters: [],\n\n            availableContainersAnchorEl: null,\n\n            loading: false,\n            loadingMessage: null\n        }\n    }\n\n    /**\n     * componentDidMount\n     */\n    componentDidMount() {\n        let _solutionParameters = [];\n        if (this.props.solution) {\n            // Need a deep copy for clones here\n            _solutionParameters = JSON.parse(JSON.stringify(this.props.solutionParameters.filter(sp => sp.solutionId == this.props.solution.id)));\n\n            this.setState({\n                _name: this.props.solution ? this.props.solution.name : \"\",\n                _description: this.props.solution ? this.props.solution.description : \"\",\n                _solutionParameters: _solutionParameters\n            });\n\n            // Map existing container volume short IDs\n            _solutionParameters.forEach(sp => {\n                this._prepareContainerStates({}, sp);\n            });\n        } else {\n            this.setState({\n                _name: this.props.solution ? this.props.solution.name : \"\",\n                _description: this.props.solution ? this.props.solution.description : \"\",\n                _solutionParameters: _solutionParameters\n            });\n        }\n    }\n\n    /**\n     * saveSolution\n     */\n    saveSolution = () => {\n        (async () => {\n            try {\n                let isValide = this.formEl.validate();\n                if (isValide) {\n                    if (this.props.solutions.find(o => (!this.props.solution || o.id != this.props.solution.id) && o.name.toLowerCase() == this.state._name.toLowerCase())) {\n                        return this.props.notify(\"Conflict: Solution name already in use.\", \"error\");\n                    }\n\n                    // Validate nginx configs\n                    let nginxErrors = null;\n                    for (let i = 0; i < this.state._solutionParameters.length; i++) {\n                        let nginxConfigIds = this.props.nginxDockerLinks.filter(ndx => ndx.containerId == this.state._solutionParameters[i].containerId).map(ndx => ndx.nginxConfigId);\n                        for (let y = 0; y < nginxConfigIds.length; y++) {\n                            if (this.state[\"proxy_asSubdomain_\" + nginxConfigIds[y]] && this.state[\"proxy_subdomain_\" + nginxConfigIds[y]].length == 0) {\n                                nginxErrors = \"Please set the missing subdomains for the Nginx domain configs\";\n                            }\n                        }\n                    }\n                    if (nginxErrors) {\n                        return this.props.notify(nginxErrors, \"error\");\n                    }\n\n                    // All good, save now\n                    this.setState({\n                        loading: true,\n                        loadingMessage: \"Saving ...\"\n                    });\n\n                    let dbSolution = null;\n                    // If existing solution\n                    if (this.props.solution) {\n                        // First, look up solution in DB\n                        dbSolution = await API.endpoints.Solutions.getOne({\n                            \"where\": { \"id\": this.props.solution.id }\n                        });\n                        // Update object with name and alias\n                        dbSolution.name = this.state._name;\n                        dbSolution.description = this.state._description;\n                        dbSolution.alias = this.props.alias;\n\n                        await API.endpoints.Solutions.update(dbSolution);\n                    }\n                    // New solution\n                    else {\n                        // First create solution in DB\n                        dbSolution = await API.endpoints.Solutions.create({\n                            name: this.state._name,\n                            description: this.state._description,\n                            alias: this.props.alias,\n                        });\n                    }\n\n                    // Check if we need to delete a solution parameter that no longer exists (only possible for existing solutions)\n                    if (this.props.solution) {\n                        for (let y = 0; y < this.props.solutionParameters.length; y++) {\n                            if (this.props.solutionParameters[y].solutionId == this.props.solution.id) {\n                                // If solution parameter no longer exists, delete it from db\n                                if (!this.state._solutionParameters.find(_sp => _sp.containerId == this.props.solutionParameters[y].containerId)) {\n                                    await API.endpoints.SolutionParameters.deleteById(this.props.solutionParameters[y].id);\n                                }\n                            }\n                        }\n                    }\n\n                    // Now create / update solution parameters\n                    for (let i = 0; i < this.state._solutionParameters.length; i++) {\n                        if (this.state._solutionParameters[i].id) {\n                            await API.endpoints.SolutionParameters.update(this.state._solutionParameters[i]);\n                        } else {\n                            await API.endpoints.SolutionParameters.create({\n                                solutionId: dbSolution.id,\n                                containerId: this.state._solutionParameters[i].containerId,\n                                volumes: this.state._solutionParameters[i].volumes\n                            });\n                        }\n\n                        // Now update container volume mappings\n                        if (this.state._solutionParameters[i].volumes.length > 0) {\n                            let container = this.props.containers.find(c => c.id == this.state._solutionParameters[i].containerId);\n\n                            this.state._solutionParameters[i].volumes.forEach((spVolumeObj) => {\n                                let pathMapKey = this.VOLUME_MAPPER[this.state._solutionParameters[i].containerId][spVolumeObj.path];\n                                container.volumes = container.volumes.map(vObject => {\n                                    if (vObject.containerPath == spVolumeObj.path) {\n                                        vObject.hostPath = this.state[pathMapKey];\n                                    }\n                                    return vObject;\n                                });\n                            });\n\n                            await API.endpoints.Containers.update(container);\n\n                            this.props.dispatch({\n                                type: \"UPDATE_CONTAINER\",\n                                data: container\n                            });\n                        }\n\n                        // update nginx configs\n                        let nginxConfigIds = this.props.nginxDockerLinks.filter(ndx => ndx.containerId == this.state._solutionParameters[i].containerId).map(ndx => ndx.nginxConfigId);\n                        for (let y = 0; y < nginxConfigIds.length; y++) {\n                            let nginxConfigObj = this.props.nginxConfigs.find(nc => nc.id == nginxConfigIds[y]);\n                            if (this.state[\"proxy_uri_\" + nginxConfigIds[y]] != undefined) {\n                                nginxConfigObj.uriPath = this.state[\"proxy_uri_\" + nginxConfigIds[y]];\n                            }\n                            if (this.state[\"proxy_subdomain_\" + nginxConfigIds[y]] != undefined) {\n                                nginxConfigObj.subdomain = this.state[\"proxy_subdomain_\" + nginxConfigIds[y]];\n                            }\n                            if (this.state[\"proxy_domain_\" + nginxConfigIds[y]] != undefined) {\n                                nginxConfigObj.domainId = this.state[\"proxy_domain_\" + nginxConfigIds[y]];\n                            }\n                            if (this.state[\"proxy_asSubdomain_\" + nginxConfigIds[y]] != undefined) {\n                                nginxConfigObj.asSubdomain = this.state[\"proxy_asSubdomain_\" + nginxConfigIds[y]];\n                            }\n\n                            await API.endpoints.NginxConfigs.update(nginxConfigObj);\n                        }\n                    }\n\n                    let resultSolutions = await API.endpoints.Solutions.getAll();\n                    this.props.dispatch({\n                        type: \"SET_SOLUTIONS\",\n                        data: resultSolutions\n                    });\n\n                    let resultSolutionParameters = await API.endpoints.SolutionParameters.getAll();\n                    this.props.dispatch({\n                        type: \"SET_SOLUTION_PARAMETERS\",\n                        data: resultSolutionParameters\n                    });\n\n                    let resultNginxConfigs = await API.endpoints.NginxConfigs.getAll();\n                    this.props.dispatch({\n                        type: \"SET_NGINX_CONFIGS\",\n                        data: resultNginxConfigs\n                    });\n\n                    this.setState({\n                        loading: false,\n                        loadingMessage: null\n                    });\n\n                    this.props.notify(\"Solution saved\");\n\n                    this.props.solutionSaved(dbSolution.id);\n                }\n            } catch (err) {\n                console.log(err);\n                this.setState({\n                    loading: false,\n                    loadingMessage: null\n                });\n\n                this.props.notify(\"An error occured\", \"error\");\n            }\n        })();\n    }\n\n    /**\n     * onLookupContainer\n     */\n    onLookupContainer(event) {\n        this.setState({ availableContainersAnchorEl: event.currentTarget });\n    }\n\n    /**\n     * onLookupVolume\n     */\n    onLookupVolume(cIndex, event) {\n        let stateObject = {};\n        stateObject['availableVolumesAnchorEl_' + cIndex] = event.currentTarget;\n        this.setState(stateObject);\n    }\n\n    /**\n     * onRemoveContainer\n     */\n    onRemoveContainer(containerId) {\n        let stateReset = {\n            _solutionParameters: this.state._solutionParameters.filter(sp => sp.containerId != containerId)\n        };\n        Object.keys(this.VOLUME_MAPPER[containerId]).forEach((key) => {\n            stateReset[this.VOLUME_MAPPER[containerId][key]] = null;\n        });\n        delete this.VOLUME_MAPPER[containerId];\n\n        Object.keys(this.state).forEach((stateKey) => {\n            if (stateKey.indexOf('portContainer_' + containerId + '_') == 0) {\n                stateReset[stateKey] = null;\n            }\n        });\n\n        this.setState(stateReset);\n    }\n\n    /**\n     * onRemoveVolume\n     * @param {*} containerId \n     * @param {*} volumeKey \n     */\n    onRemoveVolume(containerId, volumeKey) {\n        let stateReset = {};\n        Object.keys(this.VOLUME_MAPPER[containerId]).forEach((key) => {\n            if (this.VOLUME_MAPPER[containerId][key] == volumeKey) {\n                this.state._solutionParameters = this.state._solutionParameters.map(sp => {\n\n                    if (sp.containerId == containerId && sp.volumes.find(_v => _v.path == key) != null) {\n                        // Remove volume from solution parameter object\n                        sp.volumes = sp.volumes.filter(_v => _v.path != key);\n\n                        // Reset volume host path in case volume is added again later\n                        let container = this.props.containers.find(c => c.id == containerId);\n                        container.volumes.forEach((volumeObj) => {\n                            if (volumeObj.containerPath == key) {\n                                stateReset[this.VOLUME_MAPPER[containerId][key]] = volumeObj.hostPath;\n                            }\n                        });\n                    }\n                    return sp;\n                });\n            }\n        });\n\n        stateReset._solutionParameters = this.state._solutionParameters;\n        this.setState(stateReset);\n    }\n\n    /**\n     * handleAvailableContainerMenuClose\n     */\n    handleAvailableContainerMenuClose(target) {\n        // If selected target container\n        if (target.cid) {\n            // Create memory solution paramleter\n            this.state._solutionParameters.push({\n                solutionId: this.props.solution ? this.props.solution.id : -1,\n                containerId: target.cid,\n                volumes: []\n            });\n\n            let stateData = {\n                availableContainersAnchorEl: null,\n                _solutionParameters: this.state._solutionParameters\n            };\n\n            this._prepareContainerStates(stateData, this.state._solutionParameters.find(_sp => _sp.containerId == target.cid));\n        } else {\n            this.setState({ availableContainersAnchorEl: null });\n        }\n    }\n\n    /**\n     * _prepareContainerStates\n     */\n    _prepareContainerStates(stateData, sp) {\n        // Prepare existing volume objects for state management\n        let containerVolumeMapObject = {};\n        // console.log(sp.volumes);\n        this.props.containers.find(c => c.id == sp.containerId).volumes.forEach(volume => {\n            let vId = shortid.generate();\n\n            containerVolumeMapObject[volume.containerPath] = vId;\n            stateData[vId] = volume.hostPath;\n        });\n        this.VOLUME_MAPPER[sp.containerId] = containerVolumeMapObject;\n\n        // Prepare existing nginx config objects for state management\n        this.props.nginxDockerLinks.filter(ndl => ndl.containerId == sp.containerId).map(ndl => this.props.nginxConfigs.find(nc => nc.id == ndl.nginxConfigId)).forEach(nc => {\n            stateData[\"proxy_uri_\" + nc.id] = nc.uriPath;\n            stateData[\"proxy_subdomain_\" + nc.id] = nc.subdomain;\n            stateData[\"proxy_domain_\" + nc.id] = nc.domainId;\n            stateData[\"proxy_asSubdomain_\" + nc.id] = nc.asSubdomain;\n        });\n\n        // Prepare option menu ref state objects if not already done\n        this.state._solutionParameters.forEach((_sp, i) => {\n            this.state['availableVolumesAnchorEl_' + i] = null;\n        });\n\n        this.setState(stateData);\n    }\n\n    /**\n     * handleAvailableVolumeMenuClose\n     */\n    handleAvailableVolumeMenuClose(cIndex, target) {\n        let stateObject = {};\n        stateObject['availableVolumesAnchorEl_' + cIndex] = null;\n\n        if (target.volume) {\n            this.state._solutionParameters = this.state._solutionParameters.map(sp => {\n                if (sp.containerId == target.containerId) {\n                    sp.volumes.push({\n                        \"path\": target.volume,\n                        // \"git\": null,\n                        // \"cmd\": null\n                    });\n                }\n                return sp;\n            });\n            stateObject._solutionParameters = this.state._solutionParameters;\n        }\n        this.setState(stateObject);\n    }\n\n    /**\n     * getDialogFormBlockUriPath\n     */\n    getDialogFormBlockUriPath(container, nxc) {\n        return <Grid item xs={3} style={{ textAlign: 'left' }}>\n            <div className={\"form-group\"}>\n                <TextField\n                    name={\"proxy_uri_\" + nxc.id}\n                    className={\"form-control\"}\n                    value={this.state[\"proxy_uri_\" + nxc.id]}\n                    onChange={(e) => {\n                        let stateUpd = {};\n                        stateUpd[\"proxy_uri_\" + nxc.id] = e.target.value;\n                        this.setState(stateUpd);\n                    }}\n                    label=\"URI path\"\n                    type=\"text\" />\n                <div className=\"invalid-feedback\"></div>\n            </div>\n        </Grid>;\n    }\n\n    /**\n     * getDialogFormBlockIsSubdomain\n     */\n    getDialogFormBlockIsSubdomain(container, nxc) {\n        return <Grid item xs={3} style={{ textAlign: 'left' }}>\n            <FormGroup row>\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={this.state[\"proxy_asSubdomain_\" + nxc.id]}\n                            onChange={(event) => {\n                                let stateUpd = {};\n                                stateUpd[\"proxy_asSubdomain_\" + nxc.id] = event.target.checked;\n                                stateUpd[\"proxy_subdomain_\" + nxc.id] = \"\";\n                                this.setState(stateUpd);\n                            }}\n                        />\n                    }\n                    label=\"Subdomain\"\n                />\n            </FormGroup>\n        </Grid>;\n    }\n\n    /**\n     * getDialogFormBlockSubdomain\n     */\n    getDialogFormBlockSubdomain(container, nxc) {\n        return <Grid item xs={3} style={{ textAlign: 'left' }}>\n            {this.state[\"proxy_asSubdomain_\" + nxc.id] && <div className={\"form-group\"}>\n                <TextField\n                    name={\"proxy_subdomain_\" + nxc.id}\n                    className={\"form-control\"}\n                    value={this.state[\"proxy_subdomain_\" + nxc.id]}\n                    onChange={(e) => {\n                        let stateUpd = {};\n                        stateUpd[\"proxy_subdomain_\" + nxc.id] = e.target.value;\n                        this.setState(stateUpd);\n                    }}\n                    label=\"Subdomain\"\n                    type=\"text\"\n                    fullWidth />\n                <div className=\"invalid-feedback\"></div>\n            </div>}\n        </Grid>;\n    }\n\n    /**\n     * getDialogFormBlockDomain\n     */\n    getDialogFormBlockDomain(container, nxc) {\n        return <Grid item xs={3} style={{ textAlign: 'left' }}>\n            <div className={\"form-group\"} style={{ textAlign: 'left' }}>\n                <FormControl fullWidth>\n                    <InputLabel htmlFor={\"proxy_domain_\" + nxc.id}>Domain</InputLabel>\n                    <Select\n                        value={this.state[\"proxy_domain_\" + nxc.id] ? this.state[\"proxy_domain_\" + nxc.id] : \"\"}\n                        onChange={(event) => {\n                            this.setState({ [\"proxy_domain_\" + nxc.id]: event.target.value });\n                        }}\n                        inputProps={{\n                            name: \"proxy_domain_\" + nxc.id,\n                            id: \"proxy_domain_\" + nxc.id,\n                        }}\n                        fullWidth\n                    >\n                        <MenuItem value=\"\">\n                            <em>None</em>\n                        </MenuItem>\n\n                        {this.props.domains.map(domain => (\n                            <MenuItem key={\"proxy_domain_item_\" + container.id + \"_\" + nxc.id + \"_\" + domain.id} value={domain.id}>{domain.value}</MenuItem>\n                        ))}\n                    </Select>\n                    <div className=\"invalid-feedback\"></div>\n                </FormControl>\n            </div>\n        </Grid>;\n    }\n\n    /**\n     * getSolutionContainerBlock\n     */\n    getSolutionContainerBlock() {\n        const { classes } = this.props;\n\n        let containerBlocks = this.state._solutionParameters.map((solutionParameter, cIndex) => {\n            let container = this.props.containers.find(c => c.id == solutionParameter.containerId);\n            let availableVolumes = container.volumes.filter((volume) => {\n                return solutionParameter.volumes.find(_v => _v.path == volume.containerPath) == null;\n            }).map((volume) => {\n                return volume.containerPath;\n            });\n            let nginxConfigs = this.props.nginxDockerLinks.filter(ndl => ndl.containerId == container.id).map(ndl => this.props.nginxConfigs.find(nxc => nxc.id == ndl.nginxConfigId));\n\n            return <div key={'scont_' + solutionParameter.containerId}>\n                <div style={{ marginTop: cIndex == 0 ? 50 : 100 }}>\n                    <Grid container alignItems=\"center\">\n                        <Grid item xs>\n                            <Typography gutterBottom variant=\"headline\" style={{ color: 'rgb(224, 113, 80)' }}>\n                                {container.name}\n                            </Typography>\n                        </Grid>\n                        <Grid item>\n                            <Button color=\"secondary\" fullWidth onClick={this.onRemoveContainer.bind(this, container.id)}>\n                                Remove container\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </div>\n\n                <Divider variant=\"middle\" style={{ marginLeft: 0, marginRight: 0 }} />\n\n                <div style={{ paddingLeft: 30, paddingTop: 20 }}>\n\n                    {/* ---------------- Container volumes - header ---------------- */}\n                    <Grid container alignItems=\"center\">\n                        <Grid item xs>\n                            <Typography gutterBottom variant=\"h6\">\n                                Container volumes setup\n                            </Typography>\n                        </Grid>\n                        <Grid item>\n                            <Button color=\"primary\" fullWidth disabled={availableVolumes.length == 0} onClick={this.onLookupVolume.bind(this, cIndex)}>\n                                Configure\n                            </Button>\n                            <Menu\n                                id={\"simple-menu-volume-\" + cIndex}\n                                anchorEl={this.state['availableVolumesAnchorEl_' + cIndex]}\n                                open={Boolean(this.state['availableVolumesAnchorEl_' + cIndex])}\n                                onClose={this.handleAvailableVolumeMenuClose.bind(this, cIndex)}\n                            >\n                                {availableVolumes.map((v, i) => <MenuItem key={'vol_mi_' + i} onClick={this.handleAvailableVolumeMenuClose.bind(this, cIndex, { \"volume\": v, \"containerId\": container.id })}>Container volume : <i>{v}</i></MenuItem>)}\n                            </Menu>\n                        </Grid>\n                    </Grid>\n\n                    {/* Container volumes - list */}\n                    <div>\n                        {/* Volumes items */}\n                        {solutionParameter.volumes.map((volumeObj, i) => {\n                            let vs = this.props.containers.find(c => c.id == solutionParameter.containerId).volumes.find(_v => _v.containerPath == volumeObj.path);\n                            return <div key={'vol_line_' + this.VOLUME_MAPPER[container.id][volumeObj.path]}>\n                                <Grid container alignItems=\"center\" style={{ marginTop: 10 }}>\n                                    <Grid item xs>\n                                        <Grid container alignItems=\"center\" style={{ marginTop: 20 }}>\n                                            <Grid item xs>\n                                                <div className={\"form-group\"} style={{ paddingRight: 20 }}>\n                                                    <TextField\n                                                        name={this.VOLUME_MAPPER[container.id][volumeObj.path]}\n                                                        className={\"form-control\"}\n                                                        value={this.state[this.VOLUME_MAPPER[container.id][volumeObj.path]]}\n                                                        onChange={(e) => { this.setState({ [this.VOLUME_MAPPER[container.id][volumeObj.path]]: e.target.value }) }}\n                                                        label=\"Host path\"\n                                                        type=\"text\"\n                                                        fullWidth\n                                                        required />\n                                                    <div className=\"invalid-feedback\"></div>\n                                                </div>\n                                            </Grid>\n                                            <Grid item xs>\n                                                <Typography gutterBottom variant=\"body1\" style={{ paddingTop: 15 }}>\n                                                    Container path:\n                                            </Typography>\n                                                <Typography gutterBottom color=\"textSecondary\">\n                                                    {volumeObj.path}\n                                                </Typography>\n                                            </Grid>\n                                            {vs && vs.volumeDescription && <Grid item xs={12}>\n                                                <Typography gutterBottom style={{ color: \"#505050\", marginLeft: -5, paddingLeft: 10, paddingRight: 10, paddingTop: 5, paddingBottom: 5, backgroundColor: \"#cccccc\" }}>\n                                                    {vs.volumeDescription}\n                                                </Typography>\n                                            </Grid>}\n                                        </Grid>\n                                    </Grid>\n                                    <Grid item>\n                                        <Fab size=\"small\" className={classes.fab} onClick={this.onRemoveVolume.bind(this, container.id, this.VOLUME_MAPPER[container.id][volumeObj.path])}>\n                                            <DeleteIcon />\n                                        </Fab>\n                                    </Grid>\n                                </Grid>\n                            </div>\n                        })}\n                        {solutionParameter.volumes.length == 0 && <Typography variant=\"caption\" className={this.props.classes.emptyLine}>-none-</Typography>}\n                    </div>\n\n                    {/* ---------------- Container nginx - header ---------------- */}\n                    {nginxConfigs.length > 0 && <div>\n                        <Grid container alignItems=\"center\">\n                            <Grid item xs>\n                                <Typography gutterBottom variant=\"h6\" style={{ marginTop: 30 }}>\n                                    Nginx proxy configurations\n                            </Typography>\n                            </Grid>\n                        </Grid>\n\n                        {/* Container nginx - list */}\n                        <div>\n                            {/* HTTP Proxy details */}\n                            {nginxConfigs.map((nxc, z) => {\n                                return <Grid key={'nginx_block_' + container.id + '_' + nxc.id} container alignItems=\"center\" style={{\n                                    marginBottom: (z + 1) == nginxConfigs.length ? 40 : 10,\n                                    marginLeft: -10,\n                                    padding: 10,\n                                    borderRadius: 5,\n                                    backgroundColor: '#eeeeee'\n                                }}>\n                                    <Grid item xs>\n                                        <Grid container spacing={16}>\n                                            <Grid item xs={12}>\n                                                <Typography gutterBottom color=\"textSecondary\" style={{ fontWeight: 'bold' }}>\n                                                    HTTP Proxy setup for container port: {nxc.port}\n                                                </Typography>\n                                            </Grid>\n                                            {this.getDialogFormBlockDomain(container, nxc)}\n                                            {this.getDialogFormBlockUriPath(container, nxc)}\n                                            {this.getDialogFormBlockIsSubdomain(container, nxc)}\n                                            {this.getDialogFormBlockSubdomain(container, nxc)}\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            })}\n                        </div>\n                    </div>}\n                </div>\n            </div>;\n        });\n\n        return <div className={classes.sectionBlockBody}>{containerBlocks}</div>;\n    }\n\n    /**\n     * getSolutionContainerEditor\n     */\n    getSolutionContainerEditor() {\n        const { classes } = this.props;\n        const { availableContainersAnchorEl } = this.state;\n        let availableContainers = this.props.containers.filter(c => this.state._solutionParameters.find(sp => sp.containerId == c.id) == null);\n\n        return (\n            <div>\n                {/* Container Title Header */}\n                <div className={classes.sectionBlockHeader}>\n                    <Grid container alignItems=\"center\">\n                        <Grid item xs>\n                            <Typography gutterBottom variant=\"h4\">\n                                Containers\n                            </Typography>\n                        </Grid>\n                        <Grid item>\n                            <Button variant=\"outlined\" fullWidth disabled={availableContainers.length == 0} onClick={this.onLookupContainer.bind(this)}>\n                                Lookup container\n                            </Button>\n                            <Menu\n                                id=\"simple-menu\"\n                                anchorEl={availableContainersAnchorEl}\n                                open={Boolean(availableContainersAnchorEl)}\n                                onClose={this.handleAvailableContainerMenuClose.bind(this)}\n                            >\n                                {availableContainers.map(c => <MenuItem key={'cont_mi_' + c.id} onClick={this.handleAvailableContainerMenuClose.bind(this, { \"cid\": c.id })}>{c.name}</MenuItem>)}\n                            </Menu>\n                        </Grid>\n                    </Grid>\n                    <Typography color=\"textSecondary\">\n                        The docker containers that are part of the solution. Some container elements can be exposed here for user configuration as required.\n                    </Typography>\n                </div>\n\n                {/* Container block iteration */}\n                {this.getSolutionContainerBlock()}\n            </div>\n        );\n    }\n\n    /**\n     * render\n     */\n    render() {\n        const { classes } = this.props;\n\n        let nameSpan = 10;\n        if (this.props.alias) {\n            nameSpan = nameSpan - 2;\n        }\n        if (this.props.solution) {\n            nameSpan = nameSpan - 4;\n        }\n\n        return (\n            <div>\n                <ValidatorForm ref={form => (this.formEl = form)}>\n                    <Grid container spacing={16} style={{ padding: 20 }}>\n\n                        {/* Solution global setting */}\n                        <Grid item xs={nameSpan} style={{ textAlign: 'left' }}>\n                            <div className={\"form-group\"}>\n                                <TextField\n                                    name=\"name\"\n                                    className={\"form-control\"}\n                                    value={this.state._name}\n                                    onChange={(e) => { this.setState({ _name: e.target.value }) }}\n                                    label=\"Solution name\"\n                                    type=\"text\"\n                                    fullWidth\n                                    required />\n                                <div className=\"invalid-feedback\"></div>\n                            </div>\n                        </Grid>\n\n                        {this.props.alias && <Grid item xs={2} style={{ textAlign: 'right' }}>\n                            <Typography gutterBottom variant=\"body1\" style={{ paddingTop: 5 }}>\n                                Solution alias\n                            </Typography>\n                            <Typography gutterBottom color=\"textSecondary\">\n                                {this.props.alias}\n                            </Typography>\n                        </Grid>}\n\n                        {this.props.solution && <Grid item xs={2} style={{ textAlign: 'right' }}>\n                            <Button variant=\"outlined\" color=\"secondary\" fullWidth onClick={this.props.onDeleteSolution} style={{ marginTop: 8 }}>\n                                Delete\n                            </Button>\n                        </Grid>}\n\n                        <Grid item xs={2} style={{ textAlign: 'right' }}>\n                            <Button variant=\"outlined\" color=\"primary\" fullWidth onClick={this.saveSolution} style={{ marginTop: 8 }}>\n                                Save\n                            </Button>\n                        </Grid>\n\n                        {this.props.solution && <Grid item xs={2} style={{ textAlign: 'right' }}>\n                            <Button variant=\"outlined\" color=\"primary\" fullWidth onClick={this.props.exportSolution} style={{ marginTop: 8 }}>\n                                Export\n                            </Button>\n                        </Grid>}\n\n                        <Grid item xs={12} style={{ textAlign: 'left' }}>\n                            <div className={\"form-group\"}>\n                                <TextField\n                                    name=\"description\"\n                                    className={\"form-control\"}\n                                    value={this.state._description}\n                                    onChange={(e) => { this.setState({ _description: e.target.value }) }}\n                                    label=\"Solution description\"\n                                    type=\"text\"\n                                    multiline\n                                    fullWidth />\n                            </div>\n                        </Grid>\n\n                        <Grid item xs={12}>\n                            {this.getSolutionContainerEditor()}\n                        </Grid>\n                    </Grid>\n                </ValidatorForm>\n                <LoadingIndicator show={this.state.loading} message={this.state.loadingMessage} />\n            </div>\n        );\n    }\n}\n\n// The function takes data from the app current state,\n// and insert/links it into the props of our component.\n// This function makes Redux know that this component needs to be passed a piece of the state\nconst mapStateToProps = (state, props) => ({\n    domains: state.domains,\n    settings: state.settings,\n    containers: state.containers,\n    nginxConfigs: state.nginxConfigs,\n    solutions: state.solutions,\n    solutionParameters: state.solutionParameters,\n    nginxDockerLinks: state.nginxDockerLinks\n});\n\nconst mapDispatchToProps = (dispatch) => ({ \"dispatch\": dispatch });\n\n//Connect everything\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(SolutionEditor));","import React from 'react';\nimport { connect } from 'react-redux';\nimport ReactDOM from 'react-dom'\nimport { withStyles } from '@material-ui/core/styles';\nimport styles from '../styles.js';\nimport API from \"../../../../../services/API\";\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport CloseIcon from '@material-ui/icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport Divider from '@material-ui/core/Divider';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\n\nimport {\n    Grid,\n    Button,\n    FormControlLabel,\n    Switch,\n    Typography,\n    Dialog,\n    DialogContent,\n    DialogContentText,\n    AppBar,\n    Toolbar\n} from '@material-ui/core';\n\nclass ExportWizardDialog extends React.Component {\n\n    /**\n     * constructor\n     * @param {*} props \n     */\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            solution: null,\n            solutionParameters: []\n        }\n    }\n\n    /**\n     * componentDidMount\n     */\n    componentDidMount() {\n        let stateObj = {\n            solution: this.props.solutions.find(s => s.id == this.props.solutionId)\n        };\n\n        stateObj.solutionParameters = this.props.solutionParameters.filter(sp => sp.solutionId == this.props.solutionId);\n        stateObj.solutionParameters.forEach(sp => {\n            // let container = this.props.containers.find(c => c.id == sp.containerId);\n            stateObj['public_di_hub_' + sp.containerId] = true;\n            stateObj['public_di_zip_' + sp.containerId] = null;\n        });\n\n        this.setState(stateObj);\n    }\n\n    /**\n     * openFileDialog\n     * @param {*} refName \n     */\n    openFileDialog(refName) {\n        var fileInputDom = ReactDOM.findDOMNode(this.refs[refName]);\n        fileInputDom.click()\n    }\n\n    /**\n     * handlePublicImageSwitchChange\n     */\n    handlePublicImageSwitchChange = cid => event => {\n        this.setState({\n            ['public_di_hub_' + cid]: event.target.checked,\n            ['public_di_zip_' + cid]: null\n        });\n    };\n\n    /**\n     * handleDockerfileZipSelected\n     * @param {*} cid\n     * @param {*} event \n     */\n    handleDockerfileZipSelected(cid, event) {\n        if (event.target.files && event.target.files.length == 1) {\n            if (event.target.files[0].type != \"application/zip\") {\n                return this.props.notify(\"Invalide file format, expected a ZIP file\", \"error\");\n            }\n            this.setState({ ['public_di_zip_' + cid]: event.target.files[0] });\n        }\n    }\n\n    /**\n     * exportNow\n     */\n    async exportNow() {\n        // Prepare form data\n        const data = new FormData();\n        for (let key in this.state) {\n            if (key.indexOf('public_di_zip_') == 0) {\n                data.append(key, this.state[key]);\n            }\n        }\n\n        try {\n            // Upload\n            let response = await API.endpoints.Solutions.solutionExport(this.props.solutionId, data);\n\n            // Get return solution blob file\n            let blob = await response.blob();\n\n            // Let user download it\n            var url = window.URL.createObjectURL(blob);\n            var a = document.createElement('a');\n            a.href = url;\n            a.download = \"solution.zip\";\n            document.body.appendChild(a);\n            a.click();\n            a.remove();\n        } catch (err) {\n            this.props.notify(err.message, \"error\");\n        }\n    }\n\n    /**\n     * render\n     */\n    render() {\n        const { classes } = this.props;\n\n        let allValide = true;\n        this.state.solutionParameters.forEach(sp => {\n            if (!this.state['public_di_hub_' + sp.containerId] && !this.state['public_di_zip_' + sp.containerId]) {\n                allValide = false;\n            }\n        });\n\n        return (\n            <Dialog\n                open={true}\n                onClose={this.props.onDialogClose}\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <AppBar className={classes.appBar}>\n                    <Toolbar>\n                        <IconButton color=\"inherit\" onClick={this.props.onDialogClose} aria-label=\"Close\">\n                            <CloseIcon />\n                        </IconButton>\n                        <Typography variant=\"h6\" color=\"inherit\" className={classes.flex}>\n                            Export solution\n                        </Typography>\n                        {allValide && <Button color=\"secondary\" onClick={this.exportNow.bind(this)}>\n                            Export now\n                        </Button>\n                        }\n                    </Toolbar>\n                </AppBar>\n\n                <DialogContent>\n                    <DialogContentText style={{ marginTop: 20 }}>\n                        If one or more containers are not available on the public Docker Hub, therefore requiering a Docker image to be build locally on the target machine, then upload the required dockerfile and it's dependencies as a zip file for each docker container of your solution.\n                    </DialogContentText>\n\n                    {this.state.solutionParameters.map(sp => {\n                        let container = this.props.containers.find(c => c.id == sp.containerId);\n\n                        let image = this.props.dockerImages.find(i => i.id == container.dockerImageId);\n\n                        return <div key={'container_i_' + sp.id}>\n                            <Grid container spacing={16} style={{ padding: 20/*, height: 112*/ }}>\n                                <Grid item xs={this.state['public_di_hub_' + sp.containerId] ? 7 : 4} style={{ textAlign: 'left' }}>\n                                    <Typography variant=\"subtitle2\" gutterBottom style={{ marginTop: 17 }}>\n                                        {container.name}\n                                    </Typography>\n                                    <Typography variant=\"caption\" gutterBottom style={{ marginTop: 0 }}>\n                                        IMAGE => {image.name + (image.version && image.version.length > 0 ? \":\" + image.version : \"\")}\n                                    </Typography>\n                                </Grid>\n\n                                {!this.state['public_di_hub_' + sp.containerId] && <Grid item xs={3} style={{ textAlign: 'right' }}>\n                                    <input\n                                        accept=\"application/zip\"\n                                        style={{ display: 'none' }}\n                                        type=\"file\"\n                                        ref={'dockerfile_c_' + sp.containerId}\n                                        onChange={this.handleDockerfileZipSelected.bind(this, sp.containerId)}\n                                    />\n                                    <label htmlFor=\"raised-button-file\">\n                                        <Button variant=\"contained\" color={this.state['public_di_zip_' + sp.containerId] ? 'primary' : 'default'} className={classes.uploadButton} onClick={this.openFileDialog.bind(this, 'dockerfile_c_' + sp.containerId)}>\n                                            {this.state['public_di_zip_' + sp.containerId] ? 'SELECTED' : 'SELECT'}\n                                            <CloudUploadIcon className={classes.rightButtonIcon} />\n                                        </Button>\n                                    </label>\n                                </Grid>}\n\n                                <Grid item xs={5} style={{ textAlign: 'right' }}>\n                                    <FormControlLabel\n                                        control={\n                                            <Switch\n                                                checked={this.state['public_di_hub_' + sp.containerId]}\n                                                onChange={this.handlePublicImageSwitchChange(sp.containerId)}\n                                                value={\"public_di_hub_\" + sp.containerId}\n                                                color=\"primary\"\n                                            />\n                                        }\n                                        label=\"On Docker HUB\"\n                                    /><br />\n                                </Grid>\n                                {/* {sp.volumes.map(v => {\n                                    let vs = container.volumes.find(_v => _v.containerPath == v.path);\n                                    // console.log(v.containerPath);\n                                    return <Grid container spacing={16}>\n                                        <Grid item xs={6}>\n                                            <Typography variant=\"subtitle1\">\n                                                {vs.containerPath}\n                                            </Typography>\n                                        </Grid>\n                                        <Grid item xs={6} style={{ textAlign: 'right' }}>\n                                            <FormControlLabel\n                                                control={\n                                                    <Checkbox\n                                                        checked={true}\n                                                        style={{ padding: 0 }}\n                                                    // onChange={this.handleChange('checkedA')}\n                                                    />\n                                                }\n                                                label=\"Include content\"\n                                            />\n                                        </Grid>\n\n                                    </Grid>;\n                                })} */}\n\n                            </Grid>\n                            <Divider />\n                        </div>\n                    })}\n                </DialogContent>\n            </Dialog>\n        );\n    }\n}\n\n// The function takes data from the app current state,\n// and insert/links it into the props of our component.\n// This function makes Redux know that this component needs to be passed a piece of the state\nconst mapStateToProps = (state, props) => ({\n    domains: state.domains,\n    settings: state.settings,\n    containers: state.containers,\n    dockerImages: state.dockerImages,\n    nginxConfigs: state.nginxConfigs,\n    solutions: state.solutions,\n    solutionParameters: state.solutionParameters,\n    nginxDockerLinks: state.nginxDockerLinks\n});\n\nconst mapDispatchToProps = (dispatch) => ({ \"dispatch\": dispatch });\n\n//Connect everything\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(ExportWizardDialog));","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport ReactDOM from 'react-dom'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport styles from '../styles.js';\r\nimport SharableView from '../../elements/SharableView/index';\r\nimport LoadingIndicator from \"../../elements/LoadingIndicator/index\";\r\nimport API from \"../../../services/API\";\r\nimport SocketPubSub from '../../../services/sockerPubSub';\r\nimport StoreHelper from '../../../lib/StoreHelper/loadData';\r\nimport AlertSnackbars from '../../elements/AlertBar/index';\r\nimport { confirmAlert } from '../../elements/Dialogs/AlertDialog';\r\n\r\nimport {\r\n    Button,\r\n    Paper,\r\n    Grid,\r\n    Menu,\r\n    Snackbar,\r\n    MenuList,\r\n    MenuItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Typography,\r\n    Divider,\r\n    Dialog,\r\n    DialogContent,\r\n    DialogContentText,\r\n    TextField,\r\n    DialogActions\r\n} from '@material-ui/core';\r\n\r\nimport ConfigIcon from '@material-ui/icons/DonutLarge';\r\nimport NewIcon from '@material-ui/icons/CreateNewFolderOutlined';\r\nimport ImportIcon from '@material-ui/icons/ImportExport';\r\nimport SolutionEditor from './components/solutionEditor/solutionEditor';\r\nimport ExportWizardDialog from './components/exportWizardDialog/exportWizardDialog';\r\n\r\nlet isProd = require('../../../env.json').environment === 'prod';\r\n\r\nlet SAFE_STRING_REGEX = /([^A-Za-z0-9_]+)/;\r\n\r\nclass SolutionPage extends React.Component {\r\n    sharedView = null\r\n\r\n    /**\r\n     * constructor\r\n     * @param {*} props \r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            newSolutionAnchorEl: null,\r\n\r\n            // loading: false\r\n            snackOpen: false,\r\n            snackMessage: \"\",\r\n            snackVariant: null,\r\n            aliasInputDialogOpen: false,\r\n            selectedSolutionId: null,\r\n            selectedSolutionAlias: null,\r\n            aliasInputDialogValue: \"\",\r\n            aliasInputDialogValueErrors: null,\r\n\r\n            loading: false,\r\n            loadingMessage: null,\r\n\r\n            exportSolutionWizard: false\r\n        };\r\n    }\r\n\r\n    /**\r\n     * componentDidMount\r\n     */\r\n    componentDidMount() {\r\n        SocketPubSub.on(\"importStatus\", (data) => {\r\n            if (data.status == \"done\") {\r\n                (async () => {\r\n                    await StoreHelper.reloadCoreData(this.props.dispatch);\r\n\r\n                    this.setState({\r\n                        \"loading\": false,\r\n                        \"loadingMessage\": null\r\n                    });\r\n\r\n                    if (data.hasSubdomains) {\r\n                        this.openSnack([\"Solution imported.\", \"WARNING: One or more Ndginx configurations have a subdomain configured. You will have to specify a domain for those configurations before deploying the solution.\"], \"warning\");\r\n                    } else {\r\n                        this.openSnack(\"Solution imported.\");\r\n                    }\r\n                })();\r\n            } else if (data.status == \"message\") {\r\n                this.setState({\r\n                    \"loadingMessage\": data.message\r\n                });\r\n            } else if (data.status == \"error\") {\r\n                this.setState({\r\n                    \"loading\": false,\r\n                    \"loadingMessage\": null\r\n                });\r\n                this.openSnack(\"An error occured, the solution could not be imported\", \"error\");\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n\t *componentWillUnmount\r\n\t */\r\n    componentWillUnmount() {\r\n        SocketPubSub.off(\"importStatus\");\r\n    }\r\n\r\n    /**\r\n     * openSnack\r\n     * @param {*} message \r\n     * @param {*} variant \r\n     */\r\n    openSnack(message, variant) {\r\n        this.setState({ snackOpen: true, snackMessage: message, snackVariant: variant ? variant : \"success\" });\r\n    }\r\n\r\n    /**\r\n     * handleSnackClose\r\n     */\r\n    handleSnackClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        this.setState({ snackOpen: false });\r\n    };\r\n\r\n    /**\r\n     * handleSolutionMenuClick\r\n     */\r\n    handleSolutionMenuClick = id => {\r\n        // There is always an ID here, this logic is only there to reset the component for the new solution id object\r\n        if (this.state.selectedSolutionId == id) {\r\n            return;\r\n        }\r\n\r\n        if (this.state.selectedSolutionId === null) {\r\n            this.setState({ selectedSolutionId: id, selectedSolutionAlias: null });\r\n        } else {\r\n            this.setState({\r\n                loading: true,\r\n                loadingMessage: null,\r\n                selectedSolutionId: null,\r\n                selectedSolutionAlias: null\r\n            });\r\n            setTimeout(() => {\r\n                this.setState({\r\n                    selectedSolutionId: id,\r\n                    loading: false,\r\n                    loadingMessage: null\r\n                });\r\n            }, 500);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * renderSolutionEditor\r\n     */\r\n    renderSolutionEditor() {\r\n        if (this.state.selectedSolutionId === null) {\r\n            return null;\r\n        }\r\n        let solution = null;\r\n        if (this.state.selectedSolutionId != -1) {\r\n            solution = this.props.solutions.find(s => s.id == this.state.selectedSolutionId);\r\n        }\r\n\r\n        return <SolutionEditor\r\n            solution={solution}\r\n            alias={solution ? solution.alias : this.state.selectedSolutionAlias}\r\n            notify={this.openSnack.bind(this)}\r\n            onDeleteSolution={this.deleteSolution.bind(this)}\r\n            exportSolution={this.exportSolution.bind(this)}\r\n            solutionSaved={this.afterSolutionSaved.bind(this)} />;\r\n    }\r\n\r\n    /**\r\n     * deleteSolution\r\n     */\r\n    async deleteSolution() {\r\n        // Confirm delete\r\n        confirmAlert({\r\n            title: null,\r\n            message: 'Are you sure you want to delete this solution?',\r\n            buttons: [\r\n                {\r\n                    label: 'Yes',\r\n                    onClick: async () => {\r\n                        let sid = this.state.selectedSolutionId;\r\n                        this.setState({\r\n                            selectedSolutionId: null\r\n                        });\r\n\r\n                        let solutionLinks = this.props.solutionParameters.filter(ndl => ndl.solutionId == sid);\r\n                        for (let i = 0; i < solutionLinks.length; i++) {\r\n                            await API.endpoints.SolutionParameters.deleteById(solutionLinks[i].id);\r\n                            this.props.dispatch({\r\n                                type: \"DELETE_SOLUTION_PARAMETER\",\r\n                                data: solutionLinks[i].id\r\n                            });\r\n                        }\r\n\r\n                        await API.endpoints.Solutions.deleteById(sid);\r\n                        this.props.dispatch({\r\n                            type: \"DELETE_SOLUTION\",\r\n                            data: sid\r\n                        });\r\n\r\n                        this.openSnack(\"Solution deleted\");\r\n                    }\r\n                },\r\n                {\r\n                    label: 'No',\r\n                    onClick: () => {\r\n\r\n                    }\r\n                }\r\n            ]\r\n        });\r\n    }\r\n\r\n    /**\r\n     * afterSolutionSaved\r\n     */\r\n    afterSolutionSaved(solutionId) {\r\n        this.setState({\r\n            selectedSolutionId: solutionId\r\n        });\r\n    }\r\n\r\n    /**\r\n     * handleNewSolutionClick\r\n     * @param {*} event\r\n     */\r\n    handleNewSolutionClick(event) {\r\n        this.setState({ newSolutionAnchorEl: event.currentTarget });\r\n    }\r\n\r\n    /**\r\n     * handleNewSolutionClose\r\n     */\r\n    handleNewSolutionClose = (targetSelect) => {\r\n        if (targetSelect == 'blank') {\r\n            this.setState({\r\n                loading: true,\r\n                loadingMessage: null,\r\n                newSolutionAnchorEl: null,\r\n                aliasInputDialogValueErrors: null,\r\n                selectedSolutionId: null,\r\n                selectedSolutionAlias: null,\r\n                aliasInputDialogValue: \"\",\r\n                targetSelect: 'blank'\r\n            });\r\n\r\n            // Wait 500 millis to flush out container, so that a new instance get's created\r\n            setTimeout(() => {\r\n                this.setState({\r\n                    selectedSolutionId: -1,\r\n                    loading: false,\r\n                    loadingMessage: null\r\n                });\r\n            }, 500);\r\n        } else if (targetSelect == 'template') {\r\n            this.setState({\r\n                newSolutionAnchorEl: null,\r\n                aliasInputDialogOpen: true,\r\n                aliasInputDialogValue: \"\",\r\n                aliasInputDialogValueErrors: null,\r\n                targetSelect: 'template'\r\n            });\r\n        } else {\r\n            this.setState({\r\n                newSolutionAnchorEl: null,\r\n                aliasInputDialogOpen: false\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * getAliasEditorDialog\r\n     */\r\n    getAliasEditorDialog() {\r\n        return <Dialog\r\n            open={this.state.aliasInputDialogOpen}\r\n            // onClose={this.setState({ aliasInputDialogOpen: false })}\r\n            aria-labelledby=\"alias-form-dialog-title\"\r\n        >\r\n            <DialogContent>\r\n                <Typography color=\"textSecondary\">\r\n                    Specify an alias to avoid overwriting existing elements in your environement in case the solution uses similar names.\r\n                </Typography>\r\n\r\n                <Divider variant=\"middle\" style={{ marginLeft: 0, marginRight: 0, marginTop: 20, marginBottom: 20 }} />\r\n\r\n                <DialogContentText>Solution alias name</DialogContentText>\r\n                <TextField\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    type=\"text\"\r\n                    value={this.state.aliasInputDialogValue}\r\n                    fullWidth\r\n                    onChange={(e) => {\r\n                        this.setState({ aliasInputDialogValue: e.target.value.toLowerCase() })\r\n                    }}\r\n                />\r\n                {this.state.aliasInputDialogValueErrors && this.state.aliasInputDialogValueErrors.map((error, i) => <div key={\"err_\" + i} style={{\r\n                    color: \"red\",\r\n                    fontSize: 12\r\n                }}>{error}</div>)}\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => this.setState({ aliasInputDialogOpen: false })} color=\"primary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button onClick={() => {\r\n                    if (this.state.aliasInputDialogValue.length == 0) {\r\n                        this.setState({\r\n                            aliasInputDialogValueErrors: [\"Required value\"]\r\n                        });\r\n                    } else if (SAFE_STRING_REGEX.exec(this.state.aliasInputDialogValue)) {\r\n                        this.setState({\r\n                            aliasInputDialogValueErrors: [\"Error: alias must contain only letters, numbers or underscore.\"]\r\n                        });\r\n                    }\r\n                    else if (this.props.solutions.find(solution => solution.alias && solution.alias.toLowerCase() == this.state.aliasInputDialogValue.toLowerCase())) {\r\n                        this.setState({\r\n                            aliasInputDialogValueErrors: [\"Alias name already in use\"]\r\n                        });\r\n                    }\r\n                    else {\r\n                        this.openImportSolutionFileDialog();\r\n                    }\r\n                }} color=\"secondary\">\r\n                    Select ZIP\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>;\r\n    }\r\n\r\n    /**\r\n     * exportSolution\r\n     */\r\n    exportSolution() {\r\n        this.setState({ exportSolutionWizard: true });\r\n    }\r\n\r\n    /**\r\n     * onSolutionExportDialogClose\r\n     */\r\n    onSolutionExportDialogClose() {\r\n        this.setState({ exportSolutionWizard: false });\r\n    }\r\n\r\n    /**\r\n     * openImportSolutionFileDialog\r\n     */\r\n    openImportSolutionFileDialog() {\r\n        var fileInputDom = ReactDOM.findDOMNode(this.refs.import_input);\r\n        fileInputDom.value = '';\r\n        fileInputDom.click()\r\n    }\r\n\r\n    /**\r\n     * handleImportSolutionSelect\r\n     * @param {*} event \r\n     */\r\n    async handleImportSolutionSelect(event) {\r\n        if (event.target.files && event.target.files.length == 1) {\r\n\r\n            // Prepare form data\r\n            const data = new FormData();\r\n            data.append(this.state.aliasInputDialogValue, event.target.files[0]);\r\n\r\n            this.setState({\r\n                \"loading\": true,\r\n                \"loadingMessage\": \"Importing...\"\r\n            });\r\n\r\n            // Upload solution files and prepare import artefacts\r\n            let response = await API.endpoints.Solutions.solutionImport(data);\r\n            if (response.data.success) {\r\n                try {\r\n                    this.setState({\r\n                        \"newSolutionAnchorEl\": null,\r\n                        \"aliasInputDialogOpen\": false\r\n                    });\r\n                    // Now start the import process using SocketIO. \r\n                    // This involves building images, therefore it can take quiet a long time\r\n                    SocketPubSub.socket.emit('importSolution', {\r\n                        \"uid\": this.props.userSession.userId,\r\n                        \"containerBuildDirs\": response.data.containerBuildDirs,\r\n                        \"solutionJsonFilePath\": response.data.solutionJsonFilePath,\r\n                        \"alias\": this.state.aliasInputDialogValue\r\n                    });\r\n                } catch (err) {\r\n                    this.setState({\r\n                        \"loading\": false,\r\n                        \"loadingMessage\": null,\r\n                        \"newSolutionAnchorEl\": null,\r\n                        \"aliasInputDialogOpen\": false\r\n                    });\r\n                    this.openSnack(\"An error occured, could not import configuration\", \"error\");\r\n                }\r\n            } else {\r\n                this.setState({\r\n                    \"loading\": false,\r\n                    \"loadingMessage\": null,\r\n                    \"newSolutionAnchorEl\": null,\r\n                    \"aliasInputDialogOpen\": false\r\n                });\r\n\r\n                if (response.data.error) {\r\n                    this.openSnack(\"Error occured: \" + response.data.error, \"error\");\r\n                } else {\r\n                    this.openSnack(response.data.message);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * render\r\n     */\r\n    render() {\r\n        // If loged in, redirect to boardingpass page\r\n        if (!this.props.userSession.token) {\r\n            return <Redirect to='/login' />\r\n        }\r\n\r\n        const { newSolutionAnchorEl } = this.state;\r\n        const { classes } = this.props;\r\n\r\n        let emptyState = {};\r\n        if (isProd) {\r\n            emptyState.backgroundImage = 'url(/psh-admin/docker_nginx.png)';\r\n        } else {\r\n            emptyState.backgroundImage = 'url(/docker_nginx.png)';\r\n        }\r\n\r\n        return (\r\n            <SharableView\r\n                ref={(el) => this.sharedView = el}\r\n                history={this.props.history}\r\n                pageIndex={0}\r\n                notify={this.openSnack.bind(this)}\r\n            >\r\n                {/* Display editor */}\r\n                {/* {!this.state.loading &&  */}\r\n                <Grid item xs={12}>\r\n                    <Paper className={classes.configPaper}>\r\n                        <Grid container spacing={16}>\r\n                            {/* Table List */}\r\n                            <Grid item xs={3}>\r\n\r\n                                <Grid container spacing={16}>\r\n                                    <Grid item xs={12}>\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            fullWidth\r\n                                            aria-owns={newSolutionAnchorEl ? 'simple-menu' : undefined}\r\n                                            aria-haspopup=\"true\"\r\n                                            onClick={this.handleNewSolutionClick.bind(this)}>New solution</Button>\r\n                                        <Menu\r\n                                            id=\"simple-menu-new-solution\"\r\n                                            anchorEl={newSolutionAnchorEl}\r\n                                            open={Boolean(newSolutionAnchorEl)}\r\n                                            onClose={this.handleNewSolutionClose.bind(this)}\r\n                                        >\r\n                                            <MenuItem onClick={this.handleNewSolutionClose.bind(this, 'blank')}>\r\n                                                <ListItemIcon className={classes.icon}>\r\n                                                    <NewIcon />\r\n                                                </ListItemIcon>\r\n                                                <ListItemText inset primary=\"From scratch\" />\r\n                                            </MenuItem>\r\n                                            <MenuItem disabled={!this.props.userSession.online} onClick={this.handleNewSolutionClose.bind(this, 'template')}>\r\n                                                <ListItemIcon className={classes.icon}>\r\n                                                    <ImportIcon />\r\n                                                </ListItemIcon>\r\n                                                <ListItemText inset primary=\"Import\" />\r\n                                            </MenuItem>\r\n                                        </Menu>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Divider variant=\"middle\" style={{ marginLeft: 0, marginRight: 0, marginTop: 10 }} />\r\n                                <MenuList>\r\n                                    {this.props.solutions.map(s => <MenuItem\r\n                                        key={\"solution_menu_\" + s.id}\r\n                                        className={[classes.menuItem, this.state.selectedSolutionId == s.id ? classes.menuItemSelected : null].join(' ')}\r\n                                        onClick={this.handleSolutionMenuClick.bind(this, s.id)}>\r\n                                        <ListItemIcon className={classes.icon}>\r\n                                            <ConfigIcon />\r\n                                        </ListItemIcon>\r\n                                        <Typography variant=\"inherit\" noWrap>\r\n                                            {s.name}\r\n                                        </Typography>\r\n                                    </MenuItem>)}\r\n                                </MenuList>\r\n                                {this.props.solutions.length == 0 && <Typography variant=\"body1\" style={{ textAlign: 'center' }}>-none-</Typography>}\r\n                            </Grid>\r\n                            <Grid item xs={9}\r\n                                style={this.state.selectedSolutionId === null ? emptyState : {}}\r\n                                className={[classes.viewContainer, this.state.selectedSolutionId === null ? classes.emptyView : null].join(' ')}>\r\n                                {this.renderSolutionEditor()}\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Paper>\r\n                </Grid>\r\n                {/* } */}\r\n\r\n\r\n\r\n                <AlertSnackbars\r\n                    open={this.state.snackOpen}\r\n                    handleClose={this.handleSnackClose}\r\n                    message={this.state.snackMessage}\r\n                    variant={this.state.snackVariant}\r\n                />\r\n\r\n                {this.getAliasEditorDialog()}\r\n\r\n                <LoadingIndicator show={this.state.loading} message={this.state.loadingMessage} />\r\n\r\n                <input\r\n                    accept=\"application/zip\"\r\n                    style={{ display: 'none' }}\r\n                    type=\"file\"\r\n                    ref=\"import_input\"\r\n                    onChange={this.handleImportSolutionSelect.bind(this)}\r\n                />\r\n\r\n                {this.state.exportSolutionWizard && <ExportWizardDialog solutionId={this.state.selectedSolutionId} notify={this.openSnack.bind(this)} onDialogClose={this.onSolutionExportDialogClose.bind(this)} />}\r\n            </SharableView >\r\n        );\r\n    }\r\n}\r\n\r\n// The function takes data from the app current state,\r\n// and insert/links it into the props of our component.\r\n// This function makes Redux know that this component needs to be passed a piece of the state\r\nconst mapStateToProps = (state, props) => ({\r\n    userSession: state.userSession,\r\n    solutions: state.solutions,\r\n    solutionParameters: state.solutionParameters,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({ \"dispatch\": dispatch });\r\n\r\n//Connect everything\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(SolutionPage));","const styles = theme => ({\r\n    paper: {\r\n        padding: theme.spacing.unit,\r\n        position: 'relative',\r\n        textAlign: 'left',\r\n        paddingLeft: 10,\r\n        paddingRight: 10,\r\n        backgroundColor: 'rgba(255, 255, 255, 0.8)'\r\n    },\r\n    formDiv: {\r\n        padding: 20,\r\n        overflow: 'auto',\r\n        maxHeight: 600\r\n    },\r\n    tableTitleDiv: {\r\n        fontSize: 28,\r\n        marginTop: 5,\r\n        marginBottom: 10,\r\n        paddingRight: 70\r\n    },\r\n    tableHeaderCell: {\r\n        color: '#436dbb'\r\n    },\r\n    tableCell: {\r\n        whiteSpace: 'normal',\r\n        wordWrap: 'break-word'\r\n    },\r\n    tableCellButton: {\r\n        textAlign: 'right'\r\n    },\r\n    appBar: {\r\n        position: 'relative',\r\n        minWidth: 550\r\n    },\r\n    flex: {\r\n        flex: 1,\r\n    },\r\n    card: {\r\n        backgroundColor: '#eeeeee',\r\n        overflow: 'auto',\r\n        // height: '100%'\r\n        maxHeight: 400\r\n    },\r\n    cardInfo: {\r\n        backgroundColor: '#ffffd1'\r\n    },\r\n    emptyDialogLine: {\r\n        paddingLeft: 30,\r\n        marginTop: -15\r\n    }\r\n});\r\n\r\nexport default styles;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Paper, Grid, Button, TextField, Divider } from '@material-ui/core';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport ValidatorForm from \"../ValidationForm/index\";\r\nimport API from \"../../../services/API\";\r\nimport { confirmAlert } from '../Dialogs/AlertDialog';\r\nimport styles from './styles.js';\r\n\r\nfunction Transition(props) {\r\n    return <Slide direction=\"up\" {...props} />;\r\n}\r\n\r\nclass NetworksTable extends React.Component {\r\n    /**\r\n     * constructor\r\n     * @param {*} props \r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = this.populateEditorFormFromObject();\r\n        this.state.selected = null;\r\n        this.state.mode = null;\r\n\r\n        this.tblClickDebouncer = null;\r\n    }\r\n\r\n    // *****************************************************************\r\n    SET_DATA_REDUCER_ACTION = \"SET_NETWORKS\";\r\n    tableRow(cellClasses, isSelected, selectedId, row) {\r\n        return <TableRow hover key={row.id}\r\n            className={isSelected ? \"\" : \"hoverPointer\"}\r\n            onClick={event => this.handleRowClick(event, row.id)}\r\n            selected={selectedId && selectedId === row.id}>\r\n\r\n            <TableCell className={cellClasses}>{row.name}</TableCell>\r\n        </TableRow>;\r\n    }\r\n    populateEditorFormFromObject(selected) {\r\n        return {\r\n            _id: selected && selected.id ? selected.id : null,\r\n            _name: selected && selected.name ? selected.name : \"\"\r\n        }\r\n    }\r\n    populateSelected(state) {\r\n        return {\r\n            name: state._name\r\n        }\r\n    }\r\n    tableHeader() {\r\n        // return <TableRow>\r\n        //     <TableCell>Name</TableCell>\r\n        // </TableRow>;\r\n        return null;\r\n    }\r\n    generateFormContent() {\r\n        return <div className={\"form-group\"}>\r\n            <Grid container spacing={16}>\r\n                <Grid item xs={12} style={{ textAlign: 'left' }}>\r\n                    <div className={\"form-group\"}>\r\n                        <TextField\r\n                            name=\"name\"\r\n                            className={\"form-control\"}\r\n                            value={this.state._name}\r\n                            onChange={(e) => { this.setState({ _name: e.target.value }) }}\r\n                            label=\"Name\"\r\n                            type=\"text\"\r\n                            fullWidth\r\n                            autoFocus\r\n                            required />\r\n                        <div className=\"invalid-feedback\"></div>\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        </div>;\r\n    }\r\n    // *****************************************************************\r\n\r\n    /**\r\n     * handleDialogClose\r\n     */\r\n    handleDialogClose = () => {\r\n        this.setSelected(null, null);\r\n    };\r\n\r\n    /**\r\n    * setSelected\r\n    * @param {*} mode \r\n    */\r\n    setSelected(mode, selected) {\r\n        let stateData = this.populateEditorFormFromObject(selected);\r\n        stateData.selected = selected;\r\n        stateData.mode = mode;\r\n        this.setState(stateData);\r\n    }\r\n\r\n    /**\r\n     * saveDialogData\r\n     */\r\n    saveDialogData = () => {\r\n        (async () => {\r\n            let isValide = this.formEl.validate();\r\n            if (isValide) {\r\n                if (this.state._name.toLowerCase() == 'nginx_network' || this.props.networks.find(o => (!this.state._id || o.id != this.state._id) && o.name.toLowerCase() == this.state._name.toLowerCase())) {\r\n                    return this.props.notify(\"Conflict: network name already in use.\", \"error\");\r\n                }\r\n\r\n                let modelObject = this.populateSelected(this.state);\r\n\r\n                try {\r\n                    if (this.state.mode === \"ADD\") {\r\n                        let dbResult = await API.endpoints.Networks.create(modelObject);\r\n                        this.props.dispatch({\r\n                            type: this.SET_DATA_REDUCER_ACTION,\r\n                            data: [...this.props.networks, dbResult]\r\n                        });\r\n                    } else {\r\n                        modelObject.id = this.state._id;\r\n                        let dbResult = await API.endpoints.Networks.update(modelObject);\r\n                        let updData = this.props.networks.map(o => {\r\n                            if (o.id === this.state._id) {\r\n                                return dbResult;\r\n                            } else {\r\n                                return o;\r\n                            }\r\n                        });\r\n\r\n                        this.props.dispatch({\r\n                            type: this.SET_DATA_REDUCER_ACTION,\r\n                            data: updData\r\n                        });\r\n                    }\r\n                    this.setSelected(null, null);\r\n                    this.props.notify(\"Saved\");\r\n                }\r\n                catch (err) {\r\n                    console.log(\"ERROR =>\", err);\r\n                    this.props.notify(\"An error occured, make sure the server is running.\", \"error\");\r\n                };\r\n            }\r\n        })();\r\n    }\r\n\r\n    /**\r\n     * deleteDialogData\r\n     */\r\n    deleteDialogData = async () => {\r\n        if (this.props.containers.find(c => c.networks.indexOf(this.state._id) != -1)) {\r\n            return this.props.notify(\"Conflict: this network is used by at least one container configuration.\", \"error\");\r\n        } else {\r\n            // Confirm delete\r\n            confirmAlert({\r\n                title: null,\r\n                message: 'Are you sure you want to delete this?',\r\n                buttons: [\r\n                    {\r\n                        label: 'Yes',\r\n                        onClick: async () => {\r\n                            try {\r\n                                await API.endpoints.Networks.deleteById(this.state._id);\r\n\r\n                                this.props.dispatch({\r\n                                    type: this.SET_DATA_REDUCER_ACTION,\r\n                                    data: this.props.networks.filter(o => {\r\n                                        return o.id != this.state._id\r\n                                    })\r\n                                });\r\n                                this.setSelected(null, null);\r\n                                this.props.notify(\"Deleted\");\r\n                            }\r\n                            catch (err) {\r\n                                console.log(\"ERROR =>\", err);\r\n                                this.props.notify(\"An error occured, make sure the server is running.\", \"error\");\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        label: 'No',\r\n                        onClick: () => {\r\n\r\n                        }\r\n                    }\r\n                ]\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * handleRowClick\r\n     */\r\n    handleRowClick(event, id) {\r\n        let selectedItem = this.props.networks.find(o => o.id === id);\r\n        if (this.state.selected && this.state._id === selectedItem.id) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ selected: null });\r\n\r\n        if (this.tblClickDebouncer) {\r\n            clearTimeout(this.tblClickDebouncer);\r\n        }\r\n\r\n        this.tblClickDebouncer = setTimeout(function (si) {\r\n            this.tblClickDebouncer = null;\r\n            this.setSelected(\"EDIT\", JSON.parse(JSON.stringify(si)));\r\n        }.bind(this, selectedItem), 200);\r\n    }\r\n\r\n    /**\r\n     * submitForm\r\n     */\r\n    // submitForm() {\r\n    // this.setState({\r\n    //     saving: true\r\n    // });\r\n\r\n    // API.endpoints.Flights.remote(\"processPendingPointEventData\", null, \"POST\", { ...this.state, flightId: this.props.event.flight ? this.props.event.flight.id : null, eventId: this.props.event.id, uid: this.props.event.userMembership.alpUser.id }).then((result) => {\r\n    //     this.props.doneEditing(result.data);\r\n    // }).catch((err) => {\r\n    //     this.setState({\r\n    //         saving: false\r\n    //     });\r\n    //     this.props.errorEditing();\r\n    // });\r\n    // }\r\n\r\n    /**\r\n     * render\r\n     */\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        let tblHeader = this.tableHeader();\r\n        return (\r\n            <Paper className={classes.paper}>\r\n                <div className={classes.tableTitleDiv}>Networks</div>\r\n                <Divider variant=\"middle\" style={{ marginLeft: 0, marginRight: 0, marginTop: 0, marginBottom: 20 }} />\r\n                <Button variant=\"contained\" color=\"primary\" style={{ textTransform: \"none\", position: 'absolute', right: 10, top: 10 }} onClick={this.setSelected.bind(this, \"ADD\", {})}>New</Button>\r\n                <Table className={classes.table}>\r\n                    {tblHeader && <TableHead>\r\n                        {tblHeader}\r\n                    </TableHead>}\r\n                    <TableBody>\r\n                        {this.props.networks.map(row => {\r\n                            let cellClasses = [classes.tableCell];\r\n                            cellClasses = cellClasses.join(' ');\r\n                            return this.tableRow(cellClasses, (this.state.selected && this.state.selected.id === row.id), this.state._id ? this.state._id : null, row);\r\n                        })}\r\n                        {this.props.networks.length == 0 && <TableRow>\r\n                            <TableCell style={{ textAlign: 'center' }}>\r\n                                <Typography variant=\"caption\">-none-</Typography>\r\n                            </TableCell>\r\n                        </TableRow>}\r\n                    </TableBody>\r\n                </Table>\r\n                {/* Loading indicator */}\r\n                {this.state.loading && <LinearProgress color=\"secondary\" />}\r\n\r\n                {/* ********************************************** EDITOR DIALOG ********************************************** */}\r\n                <Dialog\r\n                    TransitionComponent={Transition}\r\n                    open={this.state.selected ? true : false}\r\n                    onClose={this.handleDialogClose}\r\n                >\r\n                    <AppBar className={classes.appBar}>\r\n                        <Toolbar>\r\n                            <IconButton color=\"inherit\" onClick={this.handleDialogClose} aria-label=\"Close\">\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                            <Typography variant=\"h6\" color=\"inherit\" className={classes.flex}>\r\n                                {this.state.mode === \"EDIT\" ? \"Edit\" : \"Add\"} network\r\n                            </Typography>\r\n                            <Button color=\"inherit\" onClick={this.saveDialogData}>\r\n                                Save\r\n                            </Button>\r\n                            {this.state.mode === \"EDIT\" &&\r\n                                <Button color=\"secondary\" onClick={this.deleteDialogData}>\r\n                                    Delete\r\n                                </Button>\r\n                            }\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                    <div className={classes.formDiv}>\r\n                        {this.state.selected && <ValidatorForm ref={form => (this.formEl = form)}>\r\n                            {this.generateFormContent()}\r\n                        </ValidatorForm>}\r\n                    </div>\r\n                </Dialog>\r\n            </Paper>\r\n        );\r\n    }\r\n}\r\n\r\n// The function takes data from the app current state,\r\n// and insert/links it into the props of our component.\r\n// This function makes Redux know that this component needs to be passed a piece of the state\r\nconst mapStateToProps = (state, props) => ({\r\n    networks: state.networks,\r\n    containers: state.containers,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({ \"dispatch\": dispatch });\r\n\r\n//Connect everything\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(NetworksTable));","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Paper, Grid, Button, TextField, Divider } from '@material-ui/core';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport ValidatorForm from \"../ValidationForm/index\";\r\nimport API from \"../../../services/API\";\r\nimport styles from './styles.js';\r\nimport { confirmAlert } from '../Dialogs/AlertDialog';\r\nimport YAML from 'yaml';\r\n\r\nfunction Transition(props) {\r\n    return <Slide direction=\"up\" {...props} />;\r\n}\r\n\r\nclass DockerImagesTable extends React.Component {\r\n    /**\r\n     * constructor\r\n     * @param {*} props \r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = this.populateEditorFormFromObject();\r\n        this.state.selected = null;\r\n        this.state.mode = null;\r\n\r\n        this.tblClickDebouncer = null;\r\n    }\r\n\r\n    // *****************************************************************\r\n    SET_DATA_REDUCER_ACTION = \"SET_DOCKER_IMAGES\";\r\n    tableRow(cellClasses, isSelected, selectedId, row) {\r\n        return <TableRow hover key={row.id}\r\n            className={isSelected ? \"\" : \"hoverPointer\"}\r\n            onClick={event => this.handleRowClick(event, row.id)}\r\n            selected={selectedId && selectedId === row.id}>\r\n\r\n            <TableCell className={cellClasses}>{row.name}</TableCell>\r\n            <TableCell className={cellClasses}>{row.version}</TableCell>\r\n        </TableRow>;\r\n    }\r\n    populateEditorFormFromObject(selected) {\r\n        return {\r\n            _id: selected && selected.id ? selected.id : null,\r\n            _name: selected && selected.name ? selected.name : \"\",\r\n            _version: selected && selected.version ? selected.version : \"\",\r\n            _template: selected && selected.template ? selected.template : \"\"\r\n        }\r\n    }\r\n    populateSelected(state) {\r\n        return {\r\n            name: state._name,\r\n            version: state._version,\r\n            template: state._template\r\n        }\r\n    }\r\n    tableHeader() {\r\n        return this.props.dockerImages.length > 0 ? <TableRow>\r\n            <TableCell className={this.props.classes.tableHeaderCell}>Image</TableCell>\r\n            <TableCell className={this.props.classes.tableHeaderCell}>Version</TableCell>\r\n        </TableRow> : null;\r\n    }\r\n    generateFormContent() {\r\n        return <div className={\"form-group\"}>\r\n            <Grid container spacing={16}>\r\n                <Grid item xs={6} style={{ textAlign: 'left' }}>\r\n                    <div className={\"form-group\"}>\r\n                        <TextField\r\n                            name=\"name\"\r\n                            className={\"form-control\"}\r\n                            value={this.state._name}\r\n                            onChange={(e) => { this.setState({ _name: e.target.value }) }}\r\n                            label=\"Name\"\r\n                            type=\"text\"\r\n                            fullWidth\r\n                            autoFocus\r\n                            required />\r\n                        <div className=\"invalid-feedback\"></div>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={6} style={{ textAlign: 'left' }}>\r\n                    <div className={\"form-group\"}>\r\n                        <TextField\r\n                            name=\"version\"\r\n                            className={\"form-control\"}\r\n                            value={this.state._version}\r\n                            onChange={(e) => { this.setState({ _version: e.target.value }) }}\r\n                            label=\"Version\"\r\n                            type=\"text\"\r\n                            fullWidth />\r\n                        <div className=\"invalid-feedback\"></div>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12} style={{ textAlign: 'left' }}>\r\n                    <Paper style={{padding: 10, backgroundColor: \"#dddddd\", marginTop: 20}}>\r\n                        <Typography component=\"p\">\r\n                            Use the template YAML section to set default docker-compose configuration parameters for containers based on this image. <br/>\r\n                            Any configuration element specified on the container itself will overwrite the configuration element specified in this template. \r\n                        </Typography>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item xs={12} style={{ textAlign: 'left' }}>\r\n                    <div className={\"form-group\"}>\r\n                        <TextField\r\n                            multiline\r\n                            name=\"template\"\r\n                            className={\"form-control\"}\r\n                            value={this.state._template}\r\n                            onChange={(e) => { this.setState({ _template: e.target.value }) }}\r\n                            label=\"Template YAML\"\r\n                            type=\"text\"\r\n                            fullWidth />\r\n                        <div className=\"invalid-feedback\"></div>\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        </div>;\r\n    }\r\n    // *****************************************************************\r\n\r\n    /**\r\n     * handleDialogClose\r\n     */\r\n    handleDialogClose = () => {\r\n        this.setSelected(null, null);\r\n    };\r\n\r\n    /**\r\n    * setSelected\r\n    * @param {*} mode \r\n    */\r\n    setSelected(mode, selected) {\r\n        let stateData = this.populateEditorFormFromObject(selected);\r\n        stateData.selected = selected;\r\n        stateData.mode = mode;\r\n        this.setState(stateData);\r\n    }\r\n\r\n    /**\r\n     * saveDialogData\r\n     */\r\n    saveDialogData = () => {\r\n        (async () => {\r\n            let isValide = this.formEl.validate();\r\n\r\n            if (isValide) {\r\n                let modelObject = this.populateSelected(this.state);\r\n\r\n                // First, validate YAML\r\n                if (modelObject.template && modelObject.template.length > 0) {\r\n                    try {\r\n                        let yamlDoc = YAML.parse(modelObject.template);\r\n                        // console.log(JSON.stringify(yamlDoc, null, 4));\r\n                        // console.log(Object.keys(yamlDoc));\r\n                        // console.log(YAML.stringify(yamlDoc));\r\n                    }\r\n                    catch (err) {\r\n                        return this.props.notify(\"YAML template contains errors\", \"error\");\r\n                    };\r\n                }\r\n\r\n                try {\r\n                    if (this.state.mode === \"ADD\") {\r\n                        let dbResult = await API.endpoints.DockerImages.create(modelObject);\r\n                        this.props.dispatch({\r\n                            type: this.SET_DATA_REDUCER_ACTION,\r\n                            data: [...this.props.dockerImages, dbResult]\r\n                        });\r\n                    } else {\r\n                        modelObject.id = this.state._id;\r\n                        let dbResult = await API.endpoints.DockerImages.update(modelObject);\r\n                        let updData = this.props.dockerImages.map(o => {\r\n                            if (o.id === this.state._id) {\r\n                                return dbResult;\r\n                            } else {\r\n                                return o;\r\n                            }\r\n                        });\r\n\r\n                        this.props.dispatch({\r\n                            type: this.SET_DATA_REDUCER_ACTION,\r\n                            data: updData\r\n                        });\r\n                    }\r\n                    this.setSelected(null, null);\r\n                    this.props.notify(\"Saved\");\r\n                }\r\n                catch (err) {\r\n                    console.log(\"ERROR =>\", err);\r\n                    this.props.notify(\"An error occured, make sure the server is running.\", \"error\");\r\n                };\r\n            }\r\n        })();\r\n    }\r\n\r\n    /**\r\n     * deleteDialogData\r\n     */\r\n    deleteDialogData = async () => {\r\n        if (this.props.containers.find(c => c.dockerImageId == this.state._id)) {\r\n            return this.props.notify(\"Conflict: this docker image is used by at least one container configuration.\", \"error\");\r\n        } else {\r\n            // Confirm delete\r\n            confirmAlert({\r\n                title: null,\r\n                message: 'Are you sure you want to delete this?',\r\n                buttons: [\r\n                    {\r\n                        label: 'Yes',\r\n                        onClick: async () => {\r\n                            try {\r\n                                await API.endpoints.DockerImages.deleteById(this.state._id);\r\n\r\n                                this.props.dispatch({\r\n                                    type: this.SET_DATA_REDUCER_ACTION,\r\n                                    data: this.props.dockerImages.filter(o => {\r\n                                        return o.id != this.state._id\r\n                                    })\r\n                                });\r\n                                this.setSelected(null, null);\r\n                                this.props.notify(\"Deleted\");\r\n                            }\r\n                            catch (err) {\r\n                                console.log(\"ERROR =>\", err);\r\n                                this.props.notify(\"An error occured, make sure the server is running.\", \"error\");\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        label: 'No',\r\n                        onClick: () => {\r\n\r\n                        }\r\n                    }\r\n                ]\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * handleRowClick\r\n     */\r\n    handleRowClick(event, id) {\r\n        let selectedItem = this.props.dockerImages.find(o => o.id === id);\r\n        if (this.state.selected && this.state._id === selectedItem.id) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ selected: null });\r\n\r\n        if (this.tblClickDebouncer) {\r\n            clearTimeout(this.tblClickDebouncer);\r\n        }\r\n\r\n        this.tblClickDebouncer = setTimeout(function (si) {\r\n            this.tblClickDebouncer = null;\r\n            this.setSelected(\"EDIT\", JSON.parse(JSON.stringify(si)));\r\n        }.bind(this, selectedItem), 200);\r\n    }\r\n\r\n    /**\r\n     * render\r\n     */\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        let tblHeader = this.tableHeader();\r\n        return (\r\n            <Paper className={classes.paper}>\r\n                <div className={classes.tableTitleDiv}>Docker Images</div>\r\n                <Divider variant=\"middle\" style={{ marginLeft: 0, marginRight: 0, marginTop: 0, marginBottom: 20 }} />\r\n                <Button variant=\"contained\" color=\"primary\" style={{ textTransform: \"none\", position: 'absolute', right: 10, top: 10 }} onClick={this.setSelected.bind(this, \"ADD\", {})}>New</Button>\r\n                <Table className={classes.table}>\r\n                    {tblHeader && <TableHead>\r\n                        {tblHeader}\r\n                    </TableHead>}\r\n                    <TableBody>\r\n                        {this.props.dockerImages.map(row => {\r\n                            let cellClasses = [classes.tableCell];\r\n                            cellClasses = cellClasses.join(' ');\r\n                            return this.tableRow(cellClasses, (this.state.selected && this.state.selected.id === row.id), this.state._id ? this.state._id : null, row);\r\n                        })}\r\n                        {this.props.dockerImages.length == 0 && <TableRow>\r\n                            <TableCell style={{ textAlign: 'center' }} colSpan={2}>\r\n                                <Typography variant=\"caption\">-none-</Typography>\r\n                            </TableCell>\r\n                        </TableRow>}\r\n                    </TableBody>\r\n                </Table>\r\n                {/* Loading indicator */}\r\n                {this.state.loading && <LinearProgress color=\"secondary\" />}\r\n\r\n                {/* ********************************************** EDITOR DIALOG ********************************************** */}\r\n                <Dialog\r\n                    TransitionComponent={Transition}\r\n                    open={this.state.selected ? true : false}\r\n                    onClose={this.handleDialogClose}\r\n                >\r\n                    <AppBar className={classes.appBar}>\r\n                        <Toolbar>\r\n                            <IconButton color=\"inherit\" onClick={this.handleDialogClose} aria-label=\"Close\">\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                            <Typography variant=\"h6\" color=\"inherit\" className={classes.flex}>\r\n                                {this.state.mode === \"EDIT\" ? \"Edit\" : \"Add\"} Docker image\r\n                            </Typography>\r\n                            <Button color=\"inherit\" onClick={this.saveDialogData}>\r\n                                Save\r\n                            </Button>\r\n                            {this.state.mode === \"EDIT\" &&\r\n                                <Button color=\"secondary\" onClick={this.deleteDialogData}>\r\n                                    Delete\r\n                                </Button>\r\n                            }\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                    <div className={classes.formDiv}>\r\n                        {this.state.selected && <ValidatorForm ref={form => (this.formEl = form)}>\r\n                            {this.generateFormContent()}\r\n                        </ValidatorForm>}\r\n                    </div>\r\n                </Dialog>\r\n            </Paper>\r\n        );\r\n    }\r\n}\r\n\r\n// The function takes data from the app current state,\r\n// and insert/links it into the props of our component.\r\n// This function makes Redux know that this component needs to be passed a piece of the state\r\nconst mapStateToProps = (state, props) => ({\r\n    dockerImages: state.dockerImages,\r\n    containers: state.containers\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({ \"dispatch\": dispatch });\r\n\r\n//Connect everything\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(DockerImagesTable));","import React from 'react';\nimport PropTypes from 'prop-types'\nimport { render, unmountComponentAtNode } from 'react-dom'\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport ValidatorForm from \"../ValidationForm/index\";\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport Switch from '@material-ui/core/Switch';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nexport default class ReactContainerVolumeDialog extends React.Component {\n    static propTypes = {\n        buttons: PropTypes.array.isRequired,\n        willUnmount: PropTypes.func\n    }\n\n    static defaultProps = {\n        buttons: [\n            {\n                label: 'Cancel',\n                onClick: () => null\n            },\n            {\n                label: 'Confirm',\n                onClick: () => null\n            }\n        ],\n        willUnmount: () => null\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            hostPath: \"\",\n            volumeDescription: \"\",\n            containerPath: \"\",\n            execOnEveryDeploy: false,\n            git: \"\",\n            cmd: \"\"\n        };\n    }\n\n    handleClickButton = doit => {\n        if (doit) {\n            let isValide = this.formEl.validate();\n            if (isValide) {\n                let duplicate = null;\n                // If update volume\n                if (this.props.containerPath.length > 0) {\n                    duplicate = this.props.currentVolumes.find(o => o.containerPath != this.props.containerPath && this.state.containerPath == o.containerPath);\n                }\n                // If add volume\n                else {\n                    duplicate = this.props.currentVolumes.find(o => this.state.containerPath == o.containerPath);\n                }\n                if (!duplicate) {\n                    this.props.onSubmit({\n                        hostPath: this.state.hostPath,\n                        volumeDescription: this.state.volumeDescription,\n                        containerPath: this.state.containerPath,\n                        git: this.state.git,\n                        cmd: this.state.cmd,\n                        execOnEveryDeploy: this.state.execOnEveryDeploy\n                    });\n                    this.close();\n                } else {\n                    this.props.onDuplicate();\n                }\n            }\n        } else {\n            this.close();\n        }\n    }\n\n    close = () => {\n        removeElementReconfirm();\n    }\n\n    keyboardClose = event => {\n        if (event.keyCode === 27) {\n            this.close()\n        }\n    }\n\n    componentDidMount = () => {\n        document.addEventListener('keydown', this.keyboardClose, false);\n        this.setState({\n            hostPath: this.props.hostPath,\n            volumeDescription: this.props.volumeDescription,\n            containerPath: this.props.containerPath,\n            git: this.props.git,\n            cmd: this.props.cmd,\n            execOnEveryDeploy: this.props.execOnEveryDeploy\n        });\n    }\n\n    componentWillUnmount = () => {\n        document.removeEventListener('keydown', this.keyboardClose, false);\n        this.props.willUnmount()\n    }\n\n    render() {\n        return (\n            <Dialog\n                open={true}\n                onClose={this.close}\n                aria-labelledby=\"volume-dialog-title\"\n                aria-describedby=\"volume-dialog-description\"\n            >\n                <DialogTitle id=\"volume-dialog-title\">Volume configuration</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"volume-dialog-description\">\n                        You can optionally specify a GIT repository for this volume, in which case the repo will be cloned inside this volume if it does not exist on deploy.\n                    </DialogContentText>\n                    <ValidatorForm ref={form => (this.formEl = form)}>\n\n                        <Grid container alignItems=\"center\" style={{ marginTop: 20 }}>\n                            <Grid item xs={12}>\n                                <div className={\"form-group\"} style={{ marginRight: 10 }}>\n                                    <TextField\n                                        autoFocus\n                                        margin=\"dense\"\n                                        label=\"Container volume description\"\n                                        type=\"text\"\n                                        value={this.state.volumeDescription}\n                                        onChange={(e) => {\n                                            this.setState({ \"volumeDescription\": e.target.value })\n                                        }}\n                                        fullWidth />\n                                    <div className=\"invalid-feedback\"></div>\n                                </div>\n                            </Grid>\n                            <Grid item xs>\n                                <div className={\"form-group\"} style={{ marginRight: 10 }}>\n                                    <TextField\n                                        required\n                                        // inputProps={{ pattern: \"^\\/([ A-z0-9\\-_+]+\\/)*([ A-z0-9\\-_+]+)$\" }}\n                                        margin=\"dense\"\n                                        label=\"Host volume path\"\n                                        type=\"text\"\n                                        value={this.state.hostPath}\n                                        onChange={(e) => {\n                                            this.setState({ \"hostPath\": e.target.value })\n                                        }}\n                                        fullWidth />\n                                    <div className=\"invalid-feedback\"></div>\n                                </div>\n                            </Grid>\n                            <Grid item xs>\n                                <div className={\"form-group\"} style={{ marginLeft: 10 }}>\n                                    <TextField\n                                        required\n                                        // inputProps={{ pattern: \"^\\/([ A-z0-9\\-_+]+\\/)*([ A-z0-9\\-_+]+)$\" }}\n                                        margin=\"dense\"\n                                        label=\"Container path\"\n                                        type=\"text\"\n                                        value={this.state.containerPath}\n                                        onChange={(e) => {\n                                            this.setState({ \"containerPath\": e.target.value })\n                                        }}\n                                        fullWidth />\n                                    <div className=\"invalid-feedback\"></div>\n                                </div>\n                            </Grid>\n                        </Grid>\n\n                        <Divider style={{ marginTop: 40, marginBottom: 10 }}></Divider>\n\n                        <Grid container alignItems=\"center\">\n                            <Grid item xs>\n                                <div className={\"form-group\"}>\n                                    <TextField\n                                        margin=\"dense\"\n                                        label=\"Git repo (optional)\"\n                                        type=\"text\"\n                                        value={this.state.git}\n                                        onChange={(e) => {\n                                            this.setState({ \"git\": e.target.value })\n                                        }}\n                                        fullWidth />\n                                    <div className=\"invalid-feedback\"></div>\n                                </div>\n                            </Grid>\n                        </Grid>\n\n                        {this.state.git.length > 0 && <Grid container alignItems=\"center\">\n                            <Grid item xs>\n                                <div className={\"form-group\"} style={{ marginRight: 10 }}>\n                                    <TextField\n                                        margin=\"dense\"\n                                        label=\"Execute command after clone\"\n                                        type=\"text\"\n                                        value={this.state.cmd}\n                                        onChange={(e) => {\n                                            this.setState({ \"cmd\": e.target.value })\n                                        }}\n                                        fullWidth />\n                                    <div className=\"invalid-feedback\"></div>\n                                </div>\n                            </Grid>\n\n                            <Grid item xs>\n                                <FormGroup row style={{ marginLeft: 10 }}>\n                                    <FormControlLabel\n                                        control={\n                                            <Switch\n                                                checked={this.state.execOnEveryDeploy}\n                                                onChange={(event) => {\n                                                    this.setState({ execOnEveryDeploy: event.target.checked });\n                                                }}\n                                            />\n                                        }\n                                        label=\"Pull and execute command on every deploy\"\n                                    />\n                                </FormGroup>\n                            </Grid>\n\n                        </Grid>}\n                    </ValidatorForm>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => this.handleClickButton(true)}>\n                        {this.props.submitLabel}\n                    </Button>\n                    <Button onClick={() => this.handleClickButton()}>\n                        Cancel\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        )\n    }\n}\n\nfunction createElementReconfirm(properties) {\n    let divTarget = document.getElementById('react-volume-dialog')\n    if (divTarget) {\n        // Rerender - the mounted ReactContainerVolumeDialog\n        render(<ReactContainerVolumeDialog {...properties} />, divTarget)\n    } else {\n        // Mount the ReactContainerVolumeDialog component\n        document.body.children[0].classList.add('react-volume-dialog-blur')\n        divTarget = document.createElement('div')\n        divTarget.id = 'react-volume-dialog'\n        document.body.appendChild(divTarget)\n        render(<ReactContainerVolumeDialog {...properties} />, divTarget)\n    }\n}\n\nfunction removeElementReconfirm() {\n    const target = document.getElementById('react-volume-dialog')\n    unmountComponentAtNode(target)\n    target.parentNode.removeChild(target)\n}\n\nexport function volumeDialog(properties) {\n    createElementReconfirm(properties)\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Paper,\r\n    Grid,\r\n    FormControl,\r\n    Button,\r\n    TextField,\r\n    Select,\r\n    Menu,\r\n    MenuItem,\r\n    InputLabel,\r\n    Checkbox,\r\n    ListItemText,\r\n    List,\r\n    ListItem,\r\n    ListSubheader,\r\n    ListItemSecondaryAction,\r\n    Divider,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogActions,\r\n    IconButton,\r\n    Tooltip\r\n} from '@material-ui/core';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport ValidatorForm from \"../ValidationForm/index\";\r\nimport API from \"../../../services/API\";\r\nimport styles from './styles.js';\r\nimport CheckIcon from '@material-ui/icons/CheckCircleOutline';\r\nimport FolderOpen from '@material-ui/icons/FolderOpen';\r\nimport DnsIcon from '@material-ui/icons/Dns';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nimport EnabledIcon from '@material-ui/icons/CheckBoxOutlined';\r\nimport DisabledIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\n\r\nimport StoppedIcon from '@material-ui/icons/PlayCircleOutline';\r\nimport StartedIcon from '@material-ui/icons/Stop';\r\n\r\nimport ReplayIcon from '@material-ui/icons/Replay';\r\nimport MoreIcon from '@material-ui/icons/More';\r\nimport { confirmAlert } from '../Dialogs/AlertDialog';\r\nimport { volumeDialog } from '../Dialogs/ContainerVolumeDialog';\r\nimport SocketPubSub from '../../../services/sockerPubSub';\r\nimport LoadingIndicator from \"../LoadingIndicator/index\";\r\n\r\nimport YAML from 'yaml';\r\n\r\nlet SAFE_STRING_REGEX = /([^A-Za-z0-9_]+)/;\r\nlet PORT_MAPPING_REGEX = /(\\d{1,5}:{1,5})/;\r\n// let VOLUME_MAPPING_REGEX = /(.+\\:.+)/;\r\nlet DNS_MAPPING_REGEX = /(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}/;\r\nlet ENV_REGEX = /(^([^=]+=[^;]+;)*([^=]+=[^;]+;?))/;\r\n\r\nfunction Transition(props) {\r\n    return <Slide direction=\"up\" {...props} />;\r\n}\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n    PaperProps: {\r\n        style: {\r\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n            width: 250,\r\n        },\r\n    },\r\n};\r\n\r\nclass ConfigsTable extends React.Component {\r\n    /**\r\n     * constructor\r\n     * @param {*} props \r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = this.populateEditorFormFromObject();\r\n        this.state.selected = null;\r\n        this.state.mode = null;\r\n\r\n        this.state.loading = false;\r\n        this.state.loadingMessage = null;\r\n\r\n        this.state.inputDialogOpen = false;\r\n        this.state.inputDialogLabel = \"\";\r\n        this.state.inputDialogTarget = \"\";\r\n        this.state.inputDialogValue = \"\";\r\n        this.state.inputDialogKey = \"\";\r\n        this.state.inputDialogValueErrors = null;\r\n        this.state.containerStatuses = null;\r\n\r\n        this.state.actionDialogOpen = false;\r\n        this.state.actionDialogAnchor = null;\r\n\r\n        this.tblClickDebouncer = null;\r\n\r\n        this.tblButtonEventSource = null;\r\n\r\n        this.containerStatusUpdateInterval = null;\r\n    }\r\n\r\n    /**\r\n     * componentDidMount\r\n     */\r\n    componentDidMount() {\r\n        SocketPubSub.on(\"containerStatus\", (data) => {\r\n            if (data.status == \"done\") {\r\n                this.setState({\r\n                    containerStatuses: data.containerStatus\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    containerStatuses: null\r\n                });\r\n            }\r\n            if(this.state.loading == true)\r\n                this.setState({loading: false, loadingMessage: null});\r\n        });\r\n        SocketPubSub.socket.emit('getContainerStatus', {\r\n            \"uid\": this.props.userSession.userId\r\n        });\r\n        this.containerStatusUpdateInterval = setInterval(() => {\r\n            SocketPubSub.socket.emit('getContainerStatus', {\r\n                \"uid\": this.props.userSession.userId\r\n            });\r\n        }, 60000);\r\n    }\r\n\r\n    /**\r\n\t *componentWillUnmount\r\n\t */\r\n    componentWillUnmount() {\r\n        SocketPubSub.off(\"containerStatus\");\r\n        clearInterval(this.containerStatusUpdateInterval);\r\n        this.containerStatusUpdateInterval = null;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} rowId \r\n     */\r\n    handleStop(rowId) {\r\n        this.setState({ actionDialogOpen: false });\r\n        (async() => {\r\n            this.setState({loading: true, loadingMessage: \"Stopping service...\"});\r\n            let dbResult = await API.endpoints.Containers.remote(\"stop\", null, \"POST\", {\r\n                \"id\": rowId,\r\n                \"uid\": this.props.userSession.userId\r\n            });\r\n            if(dbResult.data.success){\r\n                return this.props.notify(\"Container stopped\", \"info\");\r\n            } else{\r\n                return this.props.notify(dbResult.data.error, \"error\");\r\n            }\r\n        })();\r\n        setTimeout(() => { this.tblButtonEventSource = null;}, 100);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} rowId \r\n     */\r\n    handleStart(rowId) {\r\n        this.setState({ actionDialogOpen: false });\r\n        (async() => {\r\n            this.setState({loading: true, loadingMessage: \"Starting service...\"});\r\n            let dbResult = await API.endpoints.Containers.remote(\"start\", null, \"POST\", {\r\n                \"id\": rowId,\r\n                \"uid\": this.props.userSession.userId\r\n            });\r\n            if(dbResult.data.success){\r\n                return this.props.notify(\"Container started\", \"info\");\r\n            } else{\r\n                return this.props.notify(dbResult.data.error, \"error\");\r\n            }\r\n        })();\r\n        setTimeout(() => { this.tblButtonEventSource = null;}, 100);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} rowId \r\n     */\r\n    handleRestart(rowId) {\r\n        this.setState({ actionDialogOpen: false });\r\n        (async() => {\r\n            this.setState({loading: true, loadingMessage: \"Restarting service...\"});\r\n            let dbResult = await API.endpoints.Containers.remote(\"restart\", null, \"POST\", {\r\n                \"id\": rowId,\r\n                \"uid\": this.props.userSession.userId\r\n            });\r\n            if(dbResult.data.success){\r\n                return this.props.notify(\"Container restarted\", \"info\");\r\n            } else{\r\n                return this.props.notify(dbResult.data.error, \"error\");\r\n            }\r\n        })();\r\n        setTimeout(() => { this.tblButtonEventSource = null;}, 100);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} enabledState \r\n     * @param {*} rowId \r\n     */\r\n    handleEnable(enabledState, rowId) {\r\n        console.log(\"rowId\", rowId);\r\n        console.log(\"enabledState\", enabledState);\r\n        this.setState({ actionDialogOpen: false });\r\n        (async() => {\r\n            let dbResult = await API.endpoints.Containers.remote(\"toggleEnabled\", null, \"POST\", {\r\n                enabled: !enabledState,\r\n                id: rowId\r\n            });\r\n            if(dbResult.data.success){\r\n                // Now dispatch updates\r\n                this.props.dispatch({\r\n                    type: this.SET_DATA_REDUCER_ACTION,\r\n                    data: this.props.containers.map(c => {\r\n                        if(c.id == rowId){\r\n                            c.enabled = !enabledState\r\n                        }\r\n                        return c;\r\n                    })\r\n                });\r\n            } else{\r\n                return this.props.notify(dbResult.data.error, \"error\");\r\n            }\r\n        })();\r\n        setTimeout(() => { this.tblButtonEventSource = null;}, 100);\r\n    };\r\n\r\n    // *****************************************************************\r\n    SET_DATA_REDUCER_ACTION = \"SET_CONTAINERS\";\r\n    tableRow(cellClasses, isSelected, selectedId, row) {\r\n        let dImage = this.props.dockerImages.find(di => di.id == row.dockerImageId);\r\n\r\n        const handleClose = () => {\r\n            this.setState({ actionDialogOpen: false });\r\n            setTimeout(() => { this.tblButtonEventSource = null;}, 100);\r\n        };\r\n\r\n        // console.log(this.state.containerStatuses);\r\n        // console.log(\"row.name =>\", row.name);\r\n        // console.log(\"---------------------------------------------------------------\");\r\n        \r\n        let containerStatus = this.state.containerStatuses ? this.state.containerStatuses.find(o => o.name == \"psh_\" + row.name) : null;\r\n        let isUp = containerStatus ? containerStatus.state == \"UP\" : false;\r\n\r\n        return <TableRow hover key={row.id}\r\n            className={isSelected ? \"\" : \"hoverPointer\"}\r\n            onClick={event => {this.handleRowClick(event, row.id)}}\r\n            selected={selectedId && selectedId === row.id}>\r\n\r\n            <TableCell className={cellClasses}>{row.name}</TableCell>\r\n            <TableCell className={cellClasses}>\r\n                {`${this.props.dockerImages.find(di => di.id == row.dockerImageId).name}${dImage.version.length > 0 ? \":\" + dImage.version : \"\"}`}\r\n            </TableCell>\r\n            <TableCell className={cellClasses} style={{\r\n                width: 100\r\n            }}>\r\n                {row.enabled ? \"Yes\" : \"No\"}\r\n                {!row.enabled && \r\n                    <Tooltip title=\"Click to enable container\" aria-label=\"add\">\r\n                        <IconButton onClick={function (_row, event) {\r\n                            this.tblButtonEventSource = \"BTN\";\r\n                            this.handleEnable(_row.enabled, _row.id)\r\n                        }.bind(this, row)}>\r\n                            <DisabledIcon />\r\n                        </IconButton>\r\n                    </Tooltip>}\r\n\r\n                {row.enabled && \r\n                    <Tooltip title=\"Click to disable container\" aria-label=\"add\">\r\n                        <IconButton onClick={function (_row, event) {\r\n                            this.tblButtonEventSource = \"BTN\";\r\n                            this.handleEnable(_row.enabled, _row.id)\r\n                        }.bind(this, row)}>\r\n                            <EnabledIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                }\r\n            </TableCell>\r\n\r\n            <TableCell className={cellClasses} style={{\r\n                width: 130\r\n            }}>\r\n                { containerStatus ? (isUp ? \"Started\" : \"stopped\") : \"n/a\"}\r\n                {containerStatus && isUp && \r\n                    <Tooltip title=\"Click to stop container\" aria-label=\"add\">\r\n                        <IconButton onClick={function (_row, event) {\r\n                            this.tblButtonEventSource = \"BTN\";\r\n                            this.handleStop(_row.id)\r\n                        }.bind(this, row)}>\r\n                            <StartedIcon />\r\n                        </IconButton>\r\n                    </Tooltip>}\r\n\r\n                {containerStatus && !isUp && \r\n                    <Tooltip title=\"Click to start container\" aria-label=\"add\">\r\n                        <IconButton onClick={function (_row, event) {\r\n                            this.tblButtonEventSource = \"BTN\";\r\n                            this.handleStart(_row.id)\r\n                        }.bind(this, row)}>\r\n                            <StoppedIcon />\r\n                            \r\n                        </IconButton>\r\n                    </Tooltip>\r\n                }\r\n\r\n                {containerStatus && isUp && \r\n                    <Tooltip title=\"Restart container\" aria-label=\"add\">\r\n                        <IconButton onClick={function (_row, event) {\r\n                            this.tblButtonEventSource = \"BTN\";\r\n                            this.handleRestart(_row.id)\r\n                        }.bind(this, row)}>\r\n                            <ReplayIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                }\r\n            </TableCell>\r\n            {/* <TableCell className={cellClasses} style={{\r\n                textAlign: 'right'\r\n            }} component=\"th\" scope=\"row\">\r\n                <Menu\r\n                    id={\"simple-menu-\" + row.id}\r\n                    anchorEl={this.state.actionDialogAnchor}\r\n                    open={this.state.actionDialogOpen}\r\n                    onClose={handleClose}\r\n                    >\r\n                    <MenuItem onClick={this.handleEnable.bind(this, row.enabled, row.id)}>{row.enabled ? \"Disable container\" : \"Enable container\"}</MenuItem>\r\n                    {this.state.containerStatuses && isUp && <MenuItem onClick={this.handleStop.bind(this, row.id)}>Stop</MenuItem>}\r\n                    {this.state.containerStatuses && isUp && <MenuItem onClick={this.handleRestart.bind(this, row.id)}>Restart</MenuItem>}\r\n                    {this.state.containerStatuses && !isUp && <MenuItem onClick={this.handleStart.bind(this, row.id)}>Start</MenuItem>}\r\n                </Menu>\r\n            </TableCell> */}\r\n        </TableRow>;\r\n    }\r\n\r\n    populateEditorFormFromObject(selected) {\r\n        return {\r\n            _id: selected && selected.id ? selected.id : null,\r\n            _name: selected && selected.name ? selected.name : \"\",\r\n            _networks: selected && selected.networks ? selected.networks : [],\r\n            _dependsOn: selected && selected.dependsOn ? selected.dependsOn : [],\r\n            _dockerImageId: selected && selected.dockerImageId ? selected.dockerImageId : \"\",\r\n            _env: selected && selected.env ? selected.env : [],\r\n            _ports: selected && selected.ports ? selected.ports : [],\r\n            _command: selected && selected.command ? selected.command : \"\",\r\n            _user: selected && selected.user ? selected.user : \"\",\r\n            _workingDir: selected && selected.workingDir ? selected.workingDir : \"\",\r\n            _volumes: selected && selected.volumes ? selected.volumes : [],\r\n            _dns: selected && selected.dns ? selected.dns : [],\r\n        }\r\n    }\r\n    populateSelected(state) {\r\n        return {\r\n            name: state._name,\r\n            dockerImageId: state._dockerImageId,\r\n            env: state._env,\r\n            dependsOn: state._dependsOn,\r\n            ports: state._ports,\r\n            command: state._command,\r\n            user: state._user,\r\n            workingDir: state._workingDir,\r\n            volumes: state._volumes,\r\n            dns: state._dns\r\n        }\r\n    }\r\n    tableHeader() {\r\n        return this.props.containers.length > 0 ? <TableRow>\r\n            <TableCell className={this.props.classes.tableHeaderCell}>Name</TableCell>\r\n            <TableCell className={this.props.classes.tableHeaderCell}>Image</TableCell>\r\n            <TableCell className={this.props.classes.tableHeaderCell}>Schedule deploy</TableCell>\r\n            <TableCell className={this.props.classes.tableHeaderCell}>State</TableCell>\r\n        </TableRow> : null;\r\n    }\r\n    // *****************************************************************\r\n\r\n    /**\r\n     * handleDialogClose\r\n     */\r\n    handleDialogClose = () => {\r\n        this.setSelected(null, null);\r\n    };\r\n\r\n    /**\r\n    * setSelected\r\n    * @param {*} mode \r\n    */\r\n    setSelected(mode, selected) {\r\n        if (selected && !selected.id && this.props.dockerImages.length == 0) {\r\n            return this.props.notify(\"No docker images available\", \"error\");\r\n        }\r\n\r\n        let stateData = this.populateEditorFormFromObject(selected);\r\n        stateData.selected = selected;\r\n        stateData.mode = mode;\r\n        this.setState(stateData);\r\n    }\r\n\r\n    /**\r\n     * saveDialogData\r\n     */\r\n    saveDialogData = () => {\r\n        (async () => {\r\n            let isValide = this.formEl.validate();\r\n            if (isValide) {\r\n                // Extra validation checks\r\n                if (SAFE_STRING_REGEX.exec(this.state._name)) {\r\n                    return this.props.notify(\"Error: Container name must contain only letters, numbers or underscore.\", \"error\");\r\n                }\r\n                if (this.props.containers.find(c => (!this.state._id || c.id != this.state._id) && c.name.toLowerCase() == this.state._name.toLowerCase())) {\r\n                    return this.props.notify(\"Conflict: container name already in use.\", \"error\");\r\n                }\r\n                else if (this.state._id) {\r\n                    let dependsOnOverlap = false;\r\n                    this.state._dependsOn.find(depCont => {\r\n                        let overlapingDependsOn = this.props.containers.filter(c => c.id != this.state._id).find(o => o.dependsOn && o.dependsOn.find(u => u == this.state._id));\r\n                        if (overlapingDependsOn) {\r\n                            dependsOnOverlap = true;\r\n                        }\r\n                    });\r\n                    if (dependsOnOverlap) {\r\n                        return this.props.notify(\"Conflict: this container is dependent on a container that is itself dependant on this container.\", \"error\");\r\n                    }\r\n                }\r\n\r\n                // Now move on\r\n                let modelObject = this.populateSelected(this.state);\r\n                try {\r\n                    // On add container\r\n                    if (this.state.mode === \"ADD\") {\r\n                        let dbResult = await API.endpoints.Containers.create(modelObject);\r\n\r\n                        // Networks\r\n                        for (let i = 0; i < this.state._networks.length; i++) {\r\n                            await API.endpoints.Containers.linkRelation(dbResult.id, \"networks\", this.state._networks[i], {\r\n                                \"containerId\": dbResult.id,\r\n                                \"networkId\": this.state._networks[i]\r\n                            });\r\n                        }\r\n                        dbResult.networks = this.state._networks;\r\n\r\n                        // Now dispatch updates\r\n                        this.props.dispatch({\r\n                            type: this.SET_DATA_REDUCER_ACTION,\r\n                            data: [...this.props.containers, dbResult]\r\n                        });\r\n                    }\r\n                    // On update container\r\n                    else {\r\n                        modelObject.id = this.state._id;\r\n\r\n                        // if (this.state.selected.nginxConfigId) {\r\n                        //     modelObject.nginxConfigId = this.state.selected.nginxConfigId;\r\n                        // }\r\n\r\n                        let dbResult = await API.endpoints.Containers.update(modelObject);\r\n\r\n                        for (let i = 0; i < this.state.selected.networks.length; i++) {\r\n                            if (this.state._networks.indexOf(this.state.selected.networks[i]) == -1) {\r\n                                await API.endpoints.Containers.unlinkRelation(this.state._id, \"networks\", this.state.selected.networks[i]);\r\n                            }\r\n                        }\r\n\r\n                        for (let i = 0; i < this.state._networks.length; i++) {\r\n                            if (this.state.selected.networks.indexOf(this.state._networks[i]) == -1) {\r\n                                await API.endpoints.Containers.linkRelation(this.state._id, \"networks\", this.state._networks[i], {\r\n                                    \"containerId\": this.state._id,\r\n                                    \"networkId\": this.state._networks[i]\r\n                                });\r\n                            }\r\n                        }\r\n\r\n                        dbResult.networks = this.state._networks;\r\n\r\n                        let updData = this.props.containers.map(o => {\r\n                            if (o.id === this.state._id) {\r\n                                return dbResult;\r\n                            } else {\r\n                                return o;\r\n                            }\r\n                        });\r\n\r\n                        this.props.dispatch({\r\n                            type: this.SET_DATA_REDUCER_ACTION,\r\n                            data: updData\r\n                        });\r\n                    }\r\n                    this.setSelected(null, null);\r\n                    this.props.notify(\"Saved\");\r\n                }\r\n                catch (err) {\r\n                    console.log(\"ERROR =>\", err);\r\n                    this.props.notify(\"An error occured, make sure the server is running.\", \"error\");\r\n                };\r\n            }\r\n        })();\r\n    }\r\n\r\n    /**\r\n     * deleteDialogData\r\n     */\r\n    deleteDialogData = async () => {\r\n        if (this.state.selected.id) {\r\n            let nginxConfigIds = this.props.nginxDockerLinks.filter(ndl => ndl.containerId == this.state.selected.id).map(ndl => ndl.nginxConfigId);\r\n            if (nginxConfigIds.length > 0) {\r\n                return this.props.notify(`Conflict: this container configuration is in use by NGinx configs '${this.props.nginxConfigs.filter(nxc => nginxConfigIds.indexOf(nxc.id) != -1).map(nxc => nxc.name).join(', ')}'`, \"error\");\r\n            }\r\n        }\r\n\r\n        if (this.props.containers.filter(c => c.id != this.state._id).find(o => o.dependsOn && o.dependsOn.find(u => u == this.state._id))) {\r\n            this.props.notify(`Conflict: Cannot delete because there is a container that flagged this container as a dependency.`, \"error\");\r\n        } else {\r\n            // Confirm delete\r\n            confirmAlert({\r\n                title: null,\r\n                message: 'Are you sure you want to delete this?',\r\n                buttons: [\r\n                    {\r\n                        label: 'Yes',\r\n                        onClick: async () => {\r\n                            try {\r\n                                // Remove potential solution parameters\r\n                                let toDelSolutionParams = this.props.solutionParameters.filter(sp => sp.containerId == this.state._id);\r\n                                for (let i = 0; i < toDelSolutionParams.length; i++) {\r\n                                    await API.endpoints.SolutionParameters.deleteById(toDelSolutionParams[i].id);\r\n                                    this.props.dispatch({\r\n                                        type: \"DELETE_SOLUTION_PARAMETER\",\r\n                                        data: toDelSolutionParams[i].id\r\n                                    });\r\n                                }\r\n\r\n                                // Now remove container\r\n                                await API.endpoints.Containers.deleteById(this.state._id);\r\n                                this.props.dispatch({\r\n                                    type: this.SET_DATA_REDUCER_ACTION,\r\n                                    data: this.props.containers.filter(o => {\r\n                                        return o.id != this.state._id\r\n                                    })\r\n                                });\r\n                                this.setSelected(null, null);\r\n                                this.props.notify(\"Deleted\");\r\n                            }\r\n                            catch (err) {\r\n                                console.log(\"ERROR =>\", err);\r\n                                this.props.notify(\"An error occured, make sure the server is running.\", \"error\");\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        label: 'No',\r\n                        onClick: () => {\r\n\r\n                        }\r\n                    }\r\n                ]\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * handleRowClick\r\n     */\r\n    handleRowClick(event, id) {\r\n        if(this.tblButtonEventSource == \"BTN\") {\r\n            return;\r\n        }\r\n        let selectedItem = this.props.containers.find(o => o.id === id);\r\n        if (this.state.selected && this.state._id === selectedItem.id) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ selected: null });\r\n\r\n        if (this.tblClickDebouncer) {\r\n            clearTimeout(this.tblClickDebouncer);\r\n        }\r\n\r\n        this.tblClickDebouncer = setTimeout(function (si) {\r\n            this.tblClickDebouncer = null;\r\n            this.setSelected(\"EDIT\", JSON.parse(JSON.stringify(si)));\r\n        }.bind(this, selectedItem), 200);\r\n    }\r\n\r\n    /**\r\n     * stringEditorDialog\r\n     */\r\n    stringEditorDialog(text, handleClose, validator) {\r\n        return <Dialog\r\n            open={this.state.inputDialogOpen}\r\n            onClose={handleClose.bind(this, \"CANCEL\")}\r\n            aria-labelledby=\"form-dialog-title\"\r\n        >\r\n            <DialogContent>\r\n                {text && <DialogContentText>{text}</DialogContentText>}\r\n                <TextField\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    label={this.state.inputDialogLabel}\r\n                    type=\"text\"\r\n                    value={this.state.inputDialogValue}\r\n                    onChange={(e) => {\r\n                        this.setState({ \"inputDialogValue\": e.target.value })\r\n                    }}\r\n                    style={{ width: 500 }}\r\n                />\r\n                {this.state.inputDialogValueErrors && this.state.inputDialogValueErrors.map((error, i) => <div key={\"err_\" + i} style={{\r\n                    color: \"red\",\r\n                    fontSize: 12\r\n                }}>{error}</div>)}\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={handleClose.bind(this, \"CANCEL\")} color=\"primary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button onClick={() => {\r\n                    if (validator) {\r\n                        let validationErrors = validator(this.state.inputDialogValue);\r\n                        if (validationErrors) {\r\n                            this.setState({ \"inputDialogValueErrors\": validationErrors })\r\n                        } else {\r\n                            handleClose(\"SAVE\");\r\n                        }\r\n                    }\r\n                    else {\r\n                        handleClose(\"SAVE\");\r\n                    }\r\n                }} color=\"primary\">\r\n                    Save\r\n            </Button>\r\n            </DialogActions>\r\n        </Dialog>;\r\n    }\r\n\r\n    /**\r\n     * getDialogFormBlockName\r\n     */\r\n    getDialogFormBlockName() {\r\n        return <Grid item xs={6} style={{ textAlign: 'left' }}>\r\n            <div className={\"form-group\"}>\r\n                <TextField\r\n                    name=\"name\"\r\n                    className={\"form-control\"}\r\n                    value={this.state._name}\r\n                    onChange={(e) => { this.setState({ _name: e.target.value }) }}\r\n                    label=\"Container name\"\r\n                    type=\"text\"\r\n                    fullWidth\r\n                    autoFocus\r\n                    required\r\n                />\r\n                <div className=\"invalid-feedback\"></div>\r\n            </div>\r\n        </Grid>;\r\n    }\r\n\r\n    /**\r\n     * getDialogFormBlockCommand\r\n     */\r\n    getDialogFormBlockCommand() {\r\n        return <Grid item xs={6} style={{ textAlign: 'left' }}>\r\n            <div className={\"form-group\"}>\r\n                <TextField\r\n                    name=\"command\"\r\n                    className={\"form-control\"}\r\n                    value={this.state._command}\r\n                    onChange={(e) => { this.setState({ _command: e.target.value }) }}\r\n                    label=\"Command\"\r\n                    type=\"text\"\r\n                    fullWidth\r\n                />\r\n                <div className=\"invalid-feedback\"></div>\r\n            </div>\r\n        </Grid>;\r\n    }\r\n\r\n    /**\r\n     * getDialogFormBlockUser\r\n     */\r\n    getDialogFormBlockUser() {\r\n        return <Grid item xs={6} style={{ textAlign: 'left' }}>\r\n            <div className={\"form-group\"}>\r\n                <TextField\r\n                    name=\"user\"\r\n                    className={\"form-control\"}\r\n                    value={this.state._user}\r\n                    onChange={(e) => { this.setState({ _user: e.target.value }) }}\r\n                    label=\"User\"\r\n                    type=\"text\"\r\n                    fullWidth\r\n                />\r\n                <div className=\"invalid-feedback\"></div>\r\n            </div>\r\n        </Grid>;\r\n    }\r\n\r\n    /**\r\n     * getDialogFormBlockUser\r\n     */\r\n    getDialogFormBlockWorkingDir() {\r\n        return <Grid item xs={6} style={{ textAlign: 'left' }}>\r\n            <div className={\"form-group\"}>\r\n                <TextField\r\n                    name=\"workingDir\"\r\n                    className={\"form-control\"}\r\n                    value={this.state._workingDir}\r\n                    onChange={(e) => { this.setState({ _workingDir: e.target.value }) }}\r\n                    label=\"Working directory\"\r\n                    type=\"text\"\r\n                    fullWidth\r\n                />\r\n                <div className=\"invalid-feedback\"></div>\r\n            </div>\r\n        </Grid>;\r\n    }\r\n\r\n    /**\r\n     * getDialogFormBlockNetworks\r\n     */\r\n    getDialogFormBlockNetworks() {\r\n        const networkNames = this.props.networks.map(n => n.name);\r\n\r\n        return <Grid item xs={6} style={{ textAlign: 'left' }}>\r\n            {networkNames.length > 0 && <div className={\"form-group\"} style={{ textAlign: 'left' }}>\r\n                <FormControl fullWidth>\r\n                    <InputLabel htmlFor=\"networks\">Networks</InputLabel>\r\n                    <Select\r\n                        multiple\r\n                        value={this.state._networks}\r\n                        onChange={(event) => {\r\n                            this.setState({ [event.target.name]: event.target.value });\r\n                        }}\r\n                        renderValue={selected => this.props.networks.filter(n => selected.indexOf(n.id) > -1).map(n => n.name).join(', ')}\r\n                        inputProps={{\r\n                            name: '_networks',\r\n                            id: 'networks',\r\n                        }}\r\n                        MenuProps={MenuProps}\r\n                        fullWidth\r\n                    >\r\n                        {networkNames.map(name => (\r\n                            <MenuItem key={name} value={this.props.networks.find(n => n.name == name).id}>\r\n                                <Checkbox checked={this.props.networks.filter(n => this.state._networks.indexOf(n.id) > -1).map(n => n.name).indexOf(name) > -1} />\r\n                                <ListItemText primary={name} />\r\n                            </MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n            </div>}\r\n        </Grid>;\r\n    }\r\n\r\n    /**\r\n     * getDialogFormBlockNetworks\r\n     */\r\n    getDialogFormBlockDependsOn() {\r\n        const containerNames = this.props.containers.filter(n => n.id != this.state.selected.id);\r\n\r\n        return <Grid item xs={6} style={{ textAlign: 'left' }}>\r\n            {containerNames.length > 0 && <div className={\"form-group\"} style={{ textAlign: 'left' }}>\r\n                <FormControl fullWidth>\r\n                    <InputLabel htmlFor=\"_dependsOn\">Depends on</InputLabel>\r\n                    <Select\r\n                        multiple\r\n                        value={this.state._dependsOn}\r\n                        onChange={(event) => {\r\n                            this.setState({ [event.target.name]: event.target.value });\r\n                        }}\r\n                        renderValue={selected => {\r\n                            if (this.state._dependsOn) {\r\n                                return this.state._dependsOn.map(oid => this.props.containers.find(cl => cl.id == oid).name).join(', ');\r\n                            } else {\r\n                                return \"\";\r\n                            }\r\n                        }}\r\n                        inputProps={{\r\n                            name: '_dependsOn',\r\n                            id: '_dependsOn',\r\n                        }}\r\n                        MenuProps={MenuProps}\r\n                        fullWidth\r\n                    >\r\n                        {containerNames.map(c => (\r\n                            <MenuItem key={c.name} value={c.id}>\r\n                                <Checkbox checked={this.state._dependsOn.find(o => o == c.id) ? true : false} />\r\n                                <ListItemText primary={c.name} />\r\n                            </MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n            </div>}\r\n        </Grid>;\r\n    }\r\n\r\n    /**\r\n     * getDialogFormBlockDockerImages\r\n     */\r\n    getDialogFormBlockDockerImages() {\r\n        return <Grid item xs={6} style={{ textAlign: 'left' }}>\r\n            <div className={\"form-group\"} style={{ textAlign: 'left' }}>\r\n                <FormControl fullWidth>\r\n                    <InputLabel htmlFor=\"dockerImage\">Docker Image</InputLabel>\r\n                    <Select\r\n                        required\r\n                        value={this.state._dockerImageId}\r\n                        onChange={(event) => {\r\n                            let imageObject = this.props.dockerImages.find(o => o.id == event.target.value);\r\n\r\n                            let stateUpd = { [event.target.name]: event.target.value };\r\n                            if (imageObject.template && imageObject.template.length > 0) {\r\n                                let yamlDoc = YAML.parse(imageObject.template);\r\n\r\n                                if (yamlDoc.ports) {\r\n                                    stateUpd._ports = yamlDoc.ports\r\n                                }\r\n                                if (yamlDoc.environment) {\r\n                                    stateUpd._env = yamlDoc.environment\r\n                                }\r\n                                if (yamlDoc.dns) {\r\n                                    stateUpd._dns = yamlDoc.dns\r\n                                }\r\n                                if (yamlDoc.volumes) {\r\n                                    stateUpd._volumes = yamlDoc.volumes.map(v => {\r\n                                        return {\r\n                                            hostPath: v.substring(0, v.indexOf(\":\")),\r\n                                            containerPath: v.substring(v.indexOf(\":\") + 1),\r\n                                            git: \"\",\r\n                                            cmd: \"\"\r\n                                        }\r\n                                    });\r\n                                }\r\n\r\n                                if (yamlDoc.networks) {\r\n                                    let networkIds = yamlDoc.networks.map(name => this.props.networks.find(n => n.name == name) ? this.props.networks.find(n => n.name == name).id : null);\r\n                                    stateUpd._networks = networkIds.filter(o => o != null);\r\n                                }\r\n\r\n                                if (yamlDoc.depends_on) {\r\n                                    let configIds = yamlDoc.depends_on.map(name => this.props.containers.find(n => n.name == name) ? name : null);\r\n                                    stateUpd._dependsOn = configIds.filter(o => o != null);\r\n                                }\r\n\r\n                                if (yamlDoc.working_dir) {\r\n                                    stateUpd._workingDir = yamlDoc.working_dir\r\n                                }\r\n\r\n                                if (yamlDoc.command) {\r\n                                    stateUpd._command = yamlDoc.command\r\n                                }\r\n\r\n                                if (yamlDoc.user) {\r\n                                    stateUpd._user = yamlDoc.user\r\n                                }\r\n                            }\r\n                            this.setState(stateUpd);\r\n                        }}\r\n                        inputProps={{\r\n                            name: '_dockerImageId',\r\n                            id: '_dockerImageId',\r\n                        }}\r\n                    >\r\n                        {this.props.dockerImages.map(di => (\r\n                            <MenuItem key={di.id} value={di.id}>{di.name + (di.version.length > 0 ? \":\" + di.version : \"\")}</MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                    <div className=\"invalid-feedback\"></div>\r\n                </FormControl>\r\n            </div>\r\n        </Grid>;\r\n    }\r\n\r\n    /**\r\n     * getDialogFormBlockEnvironementVariables\r\n     */\r\n    getDialogFormBlockEnvironementVariables() {\r\n        return <Grid item xs={12} style={{ textAlign: 'left' }}>\r\n            <div className={\"form-group\"} style={{ textAlign: 'left' }}>\r\n                <Grid container>\r\n                    <Grid item xs={6} style={{ textAlign: 'left' }}>\r\n                        <ListSubheader component=\"div\">Environement Variables</ListSubheader>\r\n                    </Grid>\r\n                    <Grid item xs={6} style={{ textAlign: 'right' }}>\r\n                        <Button color=\"primary\" style={{ marginTop: 8 }} onClick={(e) => {\r\n                            this.setState({\r\n                                inputDialogOpen: true,\r\n                                inputDialogValue: \"\",\r\n                                inputDialogValueErrors: null,\r\n                                inputDialogTarget: \"env\",\r\n                                inputDialogLabel: \"Environement Variable (<NAME>=<VALUE>)\",\r\n                                inputDialogKey: null\r\n                            });\r\n                        }}>Add Env</Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <List dense={false} >\r\n                    {this.state._env.map((en, i) =>\r\n                        <ListItem key={\"env_\" + i} button onClick={function (value, index) {\r\n                            this.setState({\r\n                                inputDialogOpen: true,\r\n                                inputDialogValue: value,\r\n                                inputDialogValueErrors: null,\r\n                                inputDialogTarget: \"env\",\r\n                                inputDialogLabel: \"Environement Variable (<NAME>=<VALUE>)\",\r\n                                inputDialogKey: index\r\n                            });\r\n                        }.bind(this, en, i)}>\r\n                            <CheckIcon />\r\n                            <ListItemText\r\n                                primary={en}\r\n                                secondary={null}\r\n                            />\r\n                            <ListItemSecondaryAction onClick={function (index) {\r\n                                this.state._env.splice(index, 1);\r\n                                this.setState({\r\n                                    _env: this.state._env\r\n                                });\r\n                            }.bind(this, i)}>\r\n                                <IconButton aria-label=\"Delete\">\r\n                                    <DeleteIcon />\r\n                                </IconButton>\r\n                            </ListItemSecondaryAction>\r\n                        </ListItem>\r\n                    )}\r\n                    {this.state._env.length == 0 && <Typography variant=\"caption\" className={this.props.classes.emptyDialogLine}>-none-</Typography>}\r\n                </List>\r\n            </div>\r\n        </Grid>;\r\n    }\r\n\r\n    /**\r\n     * getDialogFormBlockVolumes\r\n     */\r\n    getDialogFormBlockVolumes() {\r\n        return <Grid item xs={12} style={{ textAlign: 'left' }}>\r\n            <div className={\"form-group\"} style={{ textAlign: 'left' }}>\r\n                <Grid container>\r\n                    <Grid item xs={6} style={{ textAlign: 'left' }}>\r\n                        <ListSubheader component=\"div\">Volumes</ListSubheader>\r\n                    </Grid>\r\n                    <Grid item xs={6} style={{ textAlign: 'right' }}>\r\n                        <Button color=\"primary\" style={{ marginTop: 8 }} onClick={(e) => {\r\n\r\n                            volumeDialog({\r\n                                submitLabel: \"Add\",\r\n                                volumeDescription: \"\",\r\n                                hostPath: \"\",\r\n                                containerPath: \"\",\r\n                                git: \"\",\r\n                                cmd: \"\",\r\n                                execOnEveryDeploy: false,\r\n                                currentVolumes: this.state._volumes,\r\n                                onDuplicate: () => {\r\n                                    this.props.notify(\"This container volume already exists\", \"error\");\r\n                                },\r\n                                onSubmit: async (volumeObj) => {\r\n                                    this.state._volumes.push(volumeObj);\r\n                                    this.setState({\r\n                                        _volumes: this.state._volumes\r\n                                    });\r\n                                }\r\n                            });\r\n\r\n                        }}>Add Volume</Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <List dense={false} >\r\n                    {this.state._volumes.map((en, i) =>\r\n                        <ListItem\r\n                            key={\"volume_\" + i}\r\n                            button\r\n                            onClick={function (vObj, index) {\r\n\r\n                                volumeDialog({\r\n                                    submitLabel: \"Set\",\r\n                                    hostPath: vObj.hostPath,\r\n                                    volumeDescription: vObj.volumeDescription ? vObj.volumeDescription : \"\",\r\n                                    containerPath: vObj.containerPath,\r\n                                    git: vObj.git,\r\n                                    cmd: vObj.cmd,\r\n                                    execOnEveryDeploy: vObj.execOnEveryDeploy ? true : false,\r\n                                    currentVolumes: this.state._volumes,\r\n                                    onDuplicate: () => {\r\n                                        this.props.notify(\"This container volume already exists\", \"error\");\r\n                                    },\r\n                                    onSubmit: async function (oldContainerPath, volumeObj) {\r\n                                        this.state._volumes = this.state._volumes.map(o => {\r\n                                            if (o.containerPath == oldContainerPath) {\r\n                                                return volumeObj;\r\n                                            } else {\r\n                                                return o;\r\n                                            }\r\n                                        });\r\n                                        this.setState({\r\n                                            _volumes: this.state._volumes\r\n                                        });\r\n                                    }.bind(this, vObj.containerPath)\r\n                                });\r\n\r\n                            }.bind(this, en, i)}>\r\n\r\n                            {/* <ListItemAvatar>\r\n                                <Avatar alt=\"Folder\" src=\"/folder_round.png\" />\r\n                            </ListItemAvatar> */}\r\n\r\n                            <FolderOpen />\r\n\r\n                            <ListItemText\r\n                                primary={en.hostPath}\r\n                                secondary={en.containerPath}\r\n                            />\r\n                            <ListItemSecondaryAction onClick={function (index) {\r\n                                this.state._volumes.splice(index, 1);\r\n                                this.setState({\r\n                                    _volumes: this.state._volumes\r\n                                });\r\n                            }.bind(this, i)}>\r\n                                <IconButton aria-label=\"Delete\">\r\n                                    <DeleteIcon />\r\n                                </IconButton>\r\n                            </ListItemSecondaryAction>\r\n                        </ListItem>\r\n                    )}\r\n                    {this.state._volumes.length == 0 && <Typography variant=\"caption\" className={this.props.classes.emptyDialogLine}>-none-</Typography>}\r\n                </List>\r\n            </div>\r\n        </Grid>;\r\n    }\r\n\r\n    /**\r\n     * getDialogFormBlockDns\r\n     */\r\n    getDialogFormBlockDns() {\r\n        return <Grid item xs={12} style={{ textAlign: 'left' }}>\r\n            <div className={\"form-group\"} style={{ textAlign: 'left' }}>\r\n                <Grid container>\r\n                    <Grid item xs={6} style={{ textAlign: 'left' }}>\r\n                        <ListSubheader component=\"div\">DNS's</ListSubheader>\r\n                    </Grid>\r\n                    <Grid item xs={6} style={{ textAlign: 'right' }}>\r\n                        <Button color=\"primary\" style={{ marginTop: 8 }} onClick={(e) => {\r\n                            this.setState({\r\n                                inputDialogOpen: true,\r\n                                inputDialogValue: \"\",\r\n                                inputDialogValueErrors: null,\r\n                                inputDialogTarget: \"dns\",\r\n                                inputDialogLabel: \"DNS\",\r\n                                inputDialogKey: null\r\n                            });\r\n                        }}>Add DNS</Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <List dense={false} >\r\n                    {this.state._dns.map((en, i) =>\r\n                        <ListItem key={\"dns_\" + i} button onClick={function (value, index) {\r\n                            this.setState({\r\n                                inputDialogOpen: true,\r\n                                inputDialogValue: value,\r\n                                inputDialogValueErrors: null,\r\n                                inputDialogTarget: \"dns\",\r\n                                inputDialogLabel: \"DNS\",\r\n                                inputDialogKey: index\r\n                            });\r\n                        }.bind(this, en, i)}>\r\n                            <DnsIcon />\r\n                            <ListItemText\r\n                                primary={en}\r\n                                secondary={null}\r\n                            />\r\n                            <ListItemSecondaryAction onClick={function (index) {\r\n                                this.state._dns.splice(index, 1);\r\n                                this.setState({\r\n                                    _dns: this.state._dns\r\n                                });\r\n                            }.bind(this, i)}>\r\n                                <IconButton aria-label=\"Delete\">\r\n                                    <DeleteIcon />\r\n                                </IconButton>\r\n                            </ListItemSecondaryAction>\r\n                        </ListItem>\r\n                    )}\r\n                    {this.state._dns.length == 0 && <Typography variant=\"caption\" className={this.props.classes.emptyDialogLine}>-none-</Typography>}\r\n                </List>\r\n            </div>\r\n        </Grid>;\r\n    }\r\n\r\n    /**\r\n     * getDialogFormBlockPorts\r\n     */\r\n    getDialogFormBlockPorts() {\r\n        return <Grid item xs={12} style={{ textAlign: 'left' }}>\r\n            <div className={\"form-group\"} style={{ textAlign: 'left' }}>\r\n                <Grid container>\r\n                    <Grid item xs={6} style={{ textAlign: 'left' }}>\r\n                        <ListSubheader component=\"div\">Ports</ListSubheader>\r\n                    </Grid>\r\n                    <Grid item xs={6} style={{ textAlign: 'right' }}>\r\n                        <Button color=\"primary\" style={{ marginTop: 8 }} onClick={(e) => {\r\n                            this.setState({\r\n                                inputDialogOpen: true,\r\n                                inputDialogValue: \"\",\r\n                                inputDialogValueErrors: null,\r\n                                inputDialogTarget: \"port\",\r\n                                inputDialogLabel: \"Port mapping (<HOST>:<CONTAINER>)\",\r\n                                inputDialogKey: null\r\n                            });\r\n                        }}>Add Port</Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <List dense={false} >\r\n                    {this.state._ports.map((en, i) =>\r\n                        <ListItem key={\"port_\" + i} button onClick={function (value, index) {\r\n                            this.setState({\r\n                                inputDialogOpen: true,\r\n                                inputDialogValue: value,\r\n                                inputDialogValueErrors: null,\r\n                                inputDialogTarget: \"port\",\r\n                                inputDialogLabel: \"Port mapping (<HOST>:<CONTAINER>)\",\r\n                                inputDialogKey: index\r\n                            });\r\n                        }.bind(this, en, i)}>\r\n                            <CheckIcon />\r\n                            <ListItemText\r\n                                primary={en}\r\n                                secondary={null}\r\n                            />\r\n                            <ListItemSecondaryAction onClick={function (index) {\r\n                                this.state._ports.splice(index, 1);\r\n                                this.setState({\r\n                                    _ports: this.state._ports\r\n                                });\r\n                            }.bind(this, i)}>\r\n                                <IconButton aria-label=\"Delete\">\r\n                                    <DeleteIcon />\r\n                                </IconButton>\r\n                            </ListItemSecondaryAction>\r\n                        </ListItem>\r\n                    )}\r\n                    {this.state._ports.length == 0 && <Typography variant=\"caption\" className={this.props.classes.emptyDialogLine}>-none-</Typography>}\r\n                </List>\r\n            </div>\r\n        </Grid>;\r\n    }\r\n\r\n    /**\r\n     * render\r\n     */\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        let tblHeader = this.tableHeader();\r\n        return (\r\n            <Paper className={classes.paper}>\r\n                <div className={classes.tableTitleDiv}>Containers</div>\r\n                <Divider variant=\"middle\" style={{ marginLeft: 0, marginRight: 0, marginTop: 0, marginBottom: 20 }} />\r\n                <Button variant=\"contained\" color=\"primary\" style={{ textTransform: \"none\", position: 'absolute', right: 10, top: 10 }} onClick={this.setSelected.bind(this, \"ADD\", {})}>New</Button>\r\n                <Table className={classes.table}>\r\n                    {tblHeader && <TableHead>\r\n                        {tblHeader}\r\n                    </TableHead>}\r\n                    <TableBody>\r\n                        {this.props.containers.map(row => {\r\n                            let cellClasses = [classes.tableCell];\r\n                            cellClasses = cellClasses.join(' ');\r\n                            return this.tableRow(cellClasses, (this.state.selected && this.state.selected.id === row.id), this.state._id ? this.state._id : null, row);\r\n                        })}\r\n\r\n                        {this.props.containers.length == 0 && <TableRow>\r\n                            <TableCell style={{ textAlign: 'center' }} colSpan={2}>\r\n                                <Typography variant=\"caption\">-none-</Typography>\r\n                            </TableCell>\r\n                        </TableRow>}\r\n                    </TableBody>\r\n                </Table>\r\n                {/* Loading indicator */}\r\n                {this.state.loading && <LinearProgress color=\"secondary\" />}\r\n\r\n                {/* ********************************************** EDITOR DIALOG ********************************************** */}\r\n                <Dialog\r\n                    TransitionComponent={Transition}\r\n                    open={this.state.selected ? true : false}\r\n                    onClose={this.handleDialogClose}\r\n                >\r\n                    <AppBar className={classes.appBar}>\r\n                        <Toolbar>\r\n                            <IconButton color=\"inherit\" onClick={this.handleDialogClose} aria-label=\"Close\">\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                            <Typography variant=\"h6\" color=\"inherit\" className={classes.flex}>\r\n                                {this.state.mode === \"EDIT\" ? \"Edit\" : \"Add\"} container\r\n                            </Typography>\r\n                            <Button color=\"inherit\" onClick={this.saveDialogData}>\r\n                                Save\r\n                            </Button>\r\n                            {this.state.mode === \"EDIT\" &&\r\n                                <Button color=\"secondary\" onClick={this.deleteDialogData}>\r\n                                    Delete\r\n                                </Button>\r\n                            }\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                    <div className={classes.formDiv}>\r\n                        {this.state.selected && <ValidatorForm ref={form => (this.formEl = form)}>\r\n                            <div className={\"form-group\"}>\r\n                                <Grid container spacing={16}>\r\n                                    {this.getDialogFormBlockName()}\r\n                                    {/* {this.getDialogFormBlockNetworks()} */}\r\n                                    {this.getDialogFormBlockDockerImages()}\r\n\r\n                                    {this.getDialogFormBlockCommand()}\r\n                                    {this.getDialogFormBlockUser()}\r\n                                    {this.getDialogFormBlockWorkingDir()}\r\n                                    {this.props.containers.length > 0 && this.getDialogFormBlockDependsOn()}\r\n\r\n                                    {this.getDialogFormBlockVolumes()}\r\n                                    {this.getDialogFormBlockDns()}\r\n\r\n                                    {this.getDialogFormBlockEnvironementVariables()}\r\n                                    {this.getDialogFormBlockPorts()}\r\n                                </Grid>\r\n                            </div>\r\n                        </ValidatorForm>}\r\n                    </div>\r\n                </Dialog>\r\n\r\n                {this.stringEditorDialog(null, (action) => {\r\n                    switch (action + \"_\" + this.state.inputDialogTarget) {\r\n                        case \"SAVE_env\":\r\n                            if (this.state.inputDialogKey != null) {\r\n                                this.state._env[this.state.inputDialogKey] = this.state.inputDialogValue;\r\n                                this.setState({\r\n                                    _env: this.state._env\r\n                                });\r\n                            } else {\r\n                                this.state._env.push(this.state.inputDialogValue);\r\n                                this.setState({\r\n                                    _env: this.state._env\r\n                                });\r\n                            }\r\n                            break;\r\n                        case \"SAVE_port\":\r\n                            if (this.state.inputDialogKey != null) {\r\n                                this.state._ports[this.state.inputDialogKey] = this.state.inputDialogValue;\r\n                                this.setState({\r\n                                    _ports: this.state._ports\r\n                                });\r\n                            } else {\r\n                                this.state._ports.push(this.state.inputDialogValue);\r\n                                this.setState({\r\n                                    _ports: this.state._ports\r\n                                });\r\n                            }\r\n                            break;\r\n                        case \"SAVE_dns\":\r\n                            if (this.state.inputDialogKey != null) {\r\n                                this.state._dns[this.state.inputDialogKey] = this.state.inputDialogValue;\r\n                                this.setState({\r\n                                    _dns: this.state._dns\r\n                                });\r\n                            } else {\r\n                                this.state._dns.push(this.state.inputDialogValue);\r\n                                this.setState({\r\n                                    _dns: this.state._dns\r\n                                });\r\n                            }\r\n                            break;\r\n                    }\r\n\r\n                    this.setState({\r\n                        inputDialogOpen: false\r\n                    });\r\n                }, (value) => {\r\n                    let isValide;\r\n                    switch (this.state.inputDialogTarget) {\r\n                        case \"env\":\r\n                            isValide = ENV_REGEX.exec(value);\r\n                            if (isValide) {\r\n                                if (this.state.inputDialogKey != null) {\r\n                                    return null;\r\n                                } else {\r\n                                    return null;\r\n                                }\r\n                            } else {\r\n                                return [\"Invalide Environement variable mapping\"];\r\n                            }\r\n                        case \"port\":\r\n                            isValide = PORT_MAPPING_REGEX.exec(value);\r\n                            if (isValide) {\r\n                                if (this.state.inputDialogKey != null) {\r\n                                    return null;\r\n                                } else {\r\n                                    return null;\r\n                                }\r\n                            } else {\r\n                                return [\"Invalide port mapping\"];\r\n                            }\r\n                        case \"dns\":\r\n                            isValide = DNS_MAPPING_REGEX.exec(value);\r\n                            if (isValide) {\r\n                                if (this.state.inputDialogKey != null) {\r\n                                    return null;\r\n                                } else {\r\n                                    return null;\r\n                                }\r\n                            } else {\r\n                                return [\"Invalide DNS\"];\r\n                            }\r\n                    }\r\n                })}\r\n                <LoadingIndicator show={this.state.loading} message={this.state.loadingMessage} />\r\n            </Paper>\r\n        );\r\n    }\r\n}\r\n\r\n// The function takes data from the app current state,\r\n// and insert/links it into the props of our component.\r\n// This function makes Redux know that this component needs to be passed a piece of the state\r\nconst mapStateToProps = (state, props) => ({\r\n    userSession: state.userSession,\r\n    containers: state.containers,\r\n    networks: state.networks,\r\n    dockerImages: state.dockerImages,\r\n    nginxConfigs: state.nginxConfigs,\r\n    nginxDockerLinks: state.nginxDockerLinks,\r\n    solutionParameters: state.solutionParameters,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({ \"dispatch\": dispatch });\r\n\r\n//Connect everything\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(ConfigsTable));","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Grid } from '@material-ui/core';\r\nimport styles from '../styles.js';\r\nimport SharableView from '../../elements/SharableView/index';\r\n\r\nimport NetworksTable from '../../elements/TableEditors/networks';\r\nimport DockerImagesTable from '../../elements/TableEditors/dockerImages';\r\nimport ContainersTable from '../../elements/TableEditors/containers';\r\n\r\nimport { Button } from '@material-ui/core';\r\nimport AlertSnackbars from '../../elements/AlertBar/index';\r\n\r\nclass DockerPage extends React.Component {\r\n    sharedView = null\r\n\r\n    /**\r\n     * constructor\r\n     * @param {*} props \r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            // loading: false\r\n            snackOpen: false,\r\n            snackMessage: \"\",\r\n            snackVariant: null\r\n        };\r\n    }\r\n\r\n    /**\r\n     * openSnack\r\n     * @param {*} message \r\n     * @param {*} variant \r\n     */\r\n    openSnack(message, variant) {\r\n        this.setState({ snackOpen: true, snackMessage: message, snackVariant: variant ? variant : \"success\" });\r\n    }\r\n\r\n    /**\r\n     * handleSnackClose\r\n     */\r\n    handleSnackClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        this.setState({ snackOpen: false });\r\n    };\r\n\r\n    /**\r\n     * render\r\n     */\r\n    render() {\r\n        // If loged in, redirect to boardingpass page\r\n        if (!this.props.userSession.token) {\r\n            return <Redirect to='/login' />\r\n        }\r\n\r\n        return (\r\n            <SharableView\r\n                ref={(el) => this.sharedView = el}\r\n                history={this.props.history}\r\n                pageIndex={1}\r\n                notify={this.openSnack.bind(this)}\r\n            >\r\n                {/* Display editor */}\r\n                {/* {!this.state.loading &&  */}\r\n                <Grid item xs={12}>\r\n                    <Grid container spacing={16}>\r\n                        <Grid item xs={4}>\r\n                            <Grid container spacing={16}>\r\n                                <Grid item xs={12}>\r\n                                    <DockerImagesTable notify={this.openSnack.bind(this)}></DockerImagesTable>\r\n                                </Grid>\r\n                                {/* <Grid item xs={12}>\r\n                                    <NetworksTable notify={this.openSnack.bind(this)}></NetworksTable>\r\n                                </Grid> */}\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={8}>\r\n                            <ContainersTable notify={this.openSnack.bind(this)}></ContainersTable>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                {/* } */}\r\n\r\n                <AlertSnackbars\r\n                    open={this.state.snackOpen}\r\n                    handleClose={this.handleSnackClose}\r\n                    message={this.state.snackMessage}\r\n                    variant={this.state.snackVariant}\r\n                />\r\n\r\n            </SharableView>\r\n        );\r\n    }\r\n}\r\n\r\n// The function takes data from the app current state,\r\n// and insert/links it into the props of our component.\r\n// This function makes Redux know that this component needs to be passed a piece of the state\r\nconst mapStateToProps = (state, props) => ({\r\n    userSession: state.userSession\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({ \"dispatch\": dispatch });\r\n\r\n//Connect everything\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(DockerPage));","import React from 'react';\nimport PropTypes from 'prop-types'\nimport { render, unmountComponentAtNode } from 'react-dom'\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport Divider from '@material-ui/core/Divider';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport ValidatorForm from \"../ValidationForm/index\";\nimport Grid from '@material-ui/core/Grid';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport ReactDOM from 'react-dom'\nimport API from \"../../../services/API\";\n\nexport default class CertificateUploadDialog extends React.Component {\n    static propTypes = {\n        buttons: PropTypes.array.isRequired,\n        willUnmount: PropTypes.func\n    }\n\n    static defaultProps = {\n        buttons: [\n            {\n                label: 'Cancel',\n                onClick: () => null\n            },\n            {\n                label: 'Upload',\n                onClick: () => null\n            }\n        ],\n        willUnmount: () => null\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            privkey: null,\n            cert: null\n        };\n    }\n\n    handleClickButton = async (doit) => {\n        if (doit) {\n            // Prepare form data\n            const data = new FormData();\n            data.append(\"privkey\", this.state.privkey);\n            data.append(\"cert\", this.state.cert);\n\n            try {\n                let response = await API.endpoints.Domains.uploadCertificate(this.props.domainId, data);\n                if (response.data.success) {\n                    this.props.notify(\"Certificate uploaded!\");\n                    this.props.onDone();\n                    this.close();\n                } else {\n                    this.props.notify(response.data.error, 'error');\n                }\n            } catch (err) {\n                this.props.notify(err.message, 'error');\n            }\n        } else {\n            this.close();\n        }\n    }\n\n    close = () => {\n        removeElementReconfirm();\n    }\n\n    keyboardClose = event => {\n        if (event.keyCode === 27) {\n            this.close()\n        }\n    }\n\n    componentDidMount = () => {\n        document.addEventListener('keydown', this.keyboardClose, false);\n    }\n\n    componentWillUnmount = () => {\n        document.removeEventListener('keydown', this.keyboardClose, false);\n        this.props.willUnmount()\n    }\n\n    handleFileSelected(name, event) {\n        if (event.target.files && event.target.files.length == 1) {\n            let fName = event.target.files[0].name;\n            if (fName.toLowerCase().endsWith(\".pem\") || fName.toLowerCase().endsWith(\".crt\")) {\n                this.setState({ [name]: event.target.files[0] });\n            } else {\n                this.props.notify(\"Invalide file format\", 'error');\n            }\n        }\n    }\n\n    openFileDialog(refName) {\n        var fileInputDom = ReactDOM.findDOMNode(this.refs[refName]);\n        fileInputDom.click()\n    }\n\n    render() {\n        return (\n            <Dialog\n                open={true}\n                onClose={this.close}\n                aria-labelledby=\"ssl-cert-upload-dialog-title\"\n                aria-describedby=\"ssl-cert-upload-dialog-description\"\n            >\n                <DialogTitle id=\"ssl-cert-upload-dialog-title\">Upload SSL certificate files</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"ssl-cert-upload-dialog-description\">\n                        Please upload the required certificate files for this domain. If you are using subdomains, make sure your certificate is a wild card certificate.\n                    </DialogContentText>\n                    <Divider style={{ marginTop: 10, marginBottom: 10 }} />\n                    <DialogContentText id=\"ssl-cert-upload-dialog-description\">\n                        Some of the browsers may consider the connection as unsafe, if there is no valid intermediate certificate. So, proper installation of intermediate certificate is a critical step.\n                       <br /><br />\n                        Most of the times, the primary certificate and intermediate certificate will be given as 2 different files.\n                        <br />\n                        For example, we combine the primary certificate and the intermediate certificate using the below command.\n                    </DialogContentText>\n                    <div style={{ backgroundColor: \"#eeeeee\", padding: 10, marginTop: 20, marginBottom: 20 }}>\n                        cat domain.crt domain_intermediate.ca-bundle >> ssl_bundle.crt\n                    </div>\n                    <ValidatorForm ref={form => (this.formEl = form)}>\n                        <Grid container alignItems=\"center\" style={{ marginTop: 20 }}>\n                            <Grid item xs={3} style={{ textAlign: 'right' }}>\n                                Private Key\n                            </Grid>\n                            <Grid item xs={3} style={{ textAlign: 'center' }}>\n                                <input\n                                    style={{ display: 'none' }}\n                                    type=\"file\"\n                                    ref={'ssl_privkey'}\n                                    onChange={this.handleFileSelected.bind(this, \"privkey\")}\n                                />\n                                <label htmlFor=\"raised-button-file\">\n                                    <Button variant=\"contained\" color={this.state['privkey'] ? 'primary' : 'default'} onClick={this.openFileDialog.bind(this, 'ssl_privkey')}>\n                                        {this.state['privkey'] ? 'SELECTED' : 'SELECT'}\n                                        <CloudUploadIcon style={{ marginLeft: 10 }} />\n                                    </Button>\n                                </label>\n                            </Grid>\n\n                            <Grid item xs={3} style={{ textAlign: 'right' }}>\n                                Certificate\n                            </Grid>\n                            <Grid item xs={3} style={{ textAlign: 'center' }}>\n                                <input\n                                    style={{ display: 'none' }}\n                                    type=\"file\"\n                                    ref={'ssl_cert'}\n                                    onChange={this.handleFileSelected.bind(this, \"cert\")}\n                                />\n                                <label htmlFor=\"raised-button-file\">\n                                    <Button variant=\"contained\" color={this.state['cert'] ? 'primary' : 'default'} onClick={this.openFileDialog.bind(this, 'ssl_cert')}>\n                                        {this.state['cert'] ? 'SELECTED' : 'SELECT'}\n                                        <CloudUploadIcon style={{ marginLeft: 10 }} />\n                                    </Button>\n                                </label>\n                            </Grid>\n                        </Grid>\n                    </ValidatorForm>\n                </DialogContent>\n                <DialogActions>\n                    {this.state.privkey && this.state.cert && <Button onClick={() => this.handleClickButton(true)}>\n                        Upload\n                    </Button>}\n                    <Button onClick={() => this.handleClickButton()}>\n                        Cancel\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        )\n    }\n}\n\nfunction createElementReconfirm(properties) {\n    let divTarget = document.getElementById('react-ssl-cert-upload-dialog')\n    if (divTarget) {\n        // Rerender - the mounted CertificateUploadDialog\n        render(<CertificateUploadDialog {...properties} />, divTarget)\n    } else {\n        // Mount the CertificateUploadDialog component\n        document.body.children[0].classList.add('react-ssl-cert-upload-dialog-blur')\n        divTarget = document.createElement('div')\n        divTarget.id = 'react-ssl-cert-upload-dialog'\n        document.body.appendChild(divTarget)\n        render(<CertificateUploadDialog {...properties} />, divTarget)\n    }\n}\n\nfunction removeElementReconfirm() {\n    const target = document.getElementById('react-ssl-cert-upload-dialog')\n    unmountComponentAtNode(target)\n    target.parentNode.removeChild(target)\n}\n\nexport function certificateUploadDialog(properties) {\n    createElementReconfirm(properties)\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Paper, Grid, Button, TextField, Divider } from '@material-ui/core';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport SSLIcon from '@material-ui/icons/Security';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport ValidatorForm from \"../ValidationForm/index\";\r\nimport API from \"../../../services/API\";\r\nimport { confirmAlert } from '../Dialogs/AlertDialog';\r\nimport styles from './styles.js';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\n\r\nimport { certificateUploadDialog } from '../Dialogs/CertificateUploadDialog';\r\n\r\nlet DOMAIN_AS_IP_REGEX = /\\b(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\b/;\r\n\r\nfunction Transition(props) {\r\n    return <Slide direction=\"up\" {...props} />;\r\n}\r\n\r\nclass DomainsTable extends React.Component {\r\n    /**\r\n     * constructor\r\n     * @param {*} props \r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = this.populateEditorFormFromObject();\r\n        this.state.selected = null;\r\n        this.state.mode = null;\r\n        this.state.sslMissing = false;\r\n\r\n        this.state.defaultDomain = null;\r\n\r\n        this.tblClickDebouncer = null;\r\n    }\r\n\r\n    /**\r\n     * componentDidMount\r\n     */\r\n    componentDidMount() {\r\n        // Wait for settings to be loaded by store to get the default domain\r\n        let settingsInterval = setInterval(() => {\r\n            if (this.props.settings.length > 0) {\r\n                this.setState({\r\n                    \"defaultDomain\": this.props.settings.find(s => s.name == 'defaultNginxDomain').value\r\n                });\r\n                clearInterval(settingsInterval);\r\n            }\r\n        }, 100);\r\n    }\r\n\r\n    // *****************************************************************\r\n    SET_DATA_REDUCER_ACTION = \"SET_DOMAINS\";\r\n\r\n    tableRow(cellClasses, tableCellButton, isSelected, selectedId, row) {\r\n        return <TableRow hover key={row.id}\r\n            className={isSelected ? \"\" : \"hoverPointer\"}\r\n            onClick={event => {\r\n                this.handleRowClick(event, row.id);\r\n            }}\r\n            selected={selectedId && selectedId === row.id}>\r\n\r\n            <TableCell className={cellClasses}>{row.value}</TableCell>\r\n            <TableCell className={cellClasses} padding=\"none\">\r\n                {row.httpsEnabled && <SSLIcon />}\r\n            </TableCell>\r\n            <TableCell className={tableCellButton}>\r\n                <Switch\r\n                    checked={(this.state.defaultDomain == row.value)}\r\n                    value={row.value}\r\n                    onChange={this.defaultDomainToggleEvent.bind(this)}\r\n                />\r\n            </TableCell>\r\n        </TableRow>;\r\n    }\r\n    /**\r\n     * defaultDomainToggleEvent\r\n     */\r\n    defaultDomainToggleEvent(event) {\r\n        if (this.tblClickDebouncer) {\r\n            clearTimeout(this.tblClickDebouncer);\r\n        }\r\n\r\n        let previousDefaultDomain = this.state.defaultDomain;\r\n        let checked = event.target && event.target.checked;\r\n        let value = event.target && event.target.value ? event.target.value : \"\";\r\n        (async () => {\r\n            this.setState({\r\n                \"defaultDomain\": checked ? value : null\r\n            });\r\n            let settingsUpdate = this.props.settings.find(s => s.name == 'defaultNginxDomain');\r\n            try {\r\n                settingsUpdate.value = checked ? value : \"\";\r\n                await API.endpoints.Settings.update(settingsUpdate);\r\n\r\n                let settingsClone = JSON.parse(JSON.stringify(this.props.settings));\r\n                settingsClone = settingsClone.map(sc => {\r\n                    if (sc.name == \"defaultNginxDomain\") {\r\n                        sc.value = checked ? value : \"\";\r\n                    }\r\n                    return sc;\r\n                });\r\n                this.props.dispatch({\r\n                    type: \"SET_SETTINGS\",\r\n                    data: settingsClone\r\n                });\r\n            } catch (err) {\r\n                settingsUpdate.value = previousDefaultDomain;\r\n                this.setState({\r\n                    \"defaultDomain\": previousDefaultDomain\r\n                });\r\n                this.props.notify(\"Could not save default domain, make sure the server is running.\", \"error\");\r\n            }\r\n        })();\r\n    }\r\n    populateEditorFormFromObject(selected) {\r\n        return {\r\n            _id: selected && selected.id ? selected.id : null,\r\n            _value: selected && selected.value ? selected.value : \"\",\r\n            _httpsEnabled: selected && selected.httpsEnabled ? selected.httpsEnabled : false,\r\n            sslMissing: false\r\n        }\r\n    }\r\n    populateSelected(state) {\r\n        return {\r\n            value: state._value,\r\n            httpsEnabled: state._httpsEnabled\r\n        }\r\n    }\r\n    tableHeader() {\r\n        return <TableRow>\r\n            <TableCell className={this.props.classes.tableHeaderCell}>Domain</TableCell>\r\n            <TableCell className={this.props.classes.tableHeaderCell} padding=\"none\">SSL</TableCell>\r\n            <TableCell className={[this.props.classes.tableCellButton, this.props.classes.tableHeaderCell].join(\" \")}>Is default</TableCell>\r\n        </TableRow>;\r\n    }\r\n\r\n    /**\r\n     * getDialogFormBlockName\r\n     */\r\n    getDialogFormBlockName() {\r\n        return <Grid item xs={7} style={{ textAlign: 'left' }}>\r\n            <div className={\"form-group\"}>\r\n                <TextField\r\n                    name=\"value\"\r\n                    className={\"form-control\"}\r\n                    value={this.state._value}\r\n                    onChange={(e) => { this.setState({ _value: e.target.value }) }}\r\n                    label=\"Value (acme.com)\"\r\n                    type=\"text\"\r\n                    fullWidth\r\n                    autoFocus\r\n                    required />\r\n                <div className=\"invalid-feedback\"></div>\r\n            </div>\r\n        </Grid>;\r\n    }\r\n\r\n    /**\r\n     * getDialogFormBlockHttpsOnly\r\n     */\r\n    getDialogFormBlockHttpsEnabled() {\r\n        return <Grid item xs={5} style={{ textAlign: 'right' }}>\r\n            {this.state._id &&\r\n                <FormControlLabel\r\n                    style={{ marginRight: 0 }}\r\n                    control={\r\n                        <Switch\r\n                            checked={this.state._httpsEnabled}\r\n                            onChange={(event) => {\r\n                                this.setState({ _httpsEnabled: event.target.checked });\r\n\r\n                                if (event.target.checked) {\r\n                                    this.props.setLoading(true);\r\n                                    API.endpoints.Domains.remote(\"checkDomainSslCert?domainId=\" + this.state._id, null, \"get\").then((checkDomain) => {\r\n                                        this.props.setLoading(false);\r\n                                        this.setState({ sslMissing: !checkDomain.data.configured });\r\n                                    }).catch((err) => {\r\n                                        this.props.setLoading(false);\r\n                                        this.props.notify(\"A server problem occured.\", \"error\");\r\n                                    });\r\n                                } else {\r\n                                    this.setState({ sslMissing: false });\r\n                                }\r\n                            }}\r\n                        />\r\n                    }\r\n                    label=\"HTTPS Enabled\"\r\n                />\r\n            }\r\n        </Grid>;\r\n    }\r\n\r\n    /**\r\n     * getDialogFormBlockUploadCertificates\r\n     */\r\n    getDialogFormBlockUploadCertificates() {\r\n        return this.state._httpsEnabled ? <Grid item xs={12} style={{ textAlign: 'right' }}>\r\n            <Typography gutterBottom variant=\"caption\">\r\n                If you already have a certificate, upload it now\r\n            </Typography>\r\n            <Button color=\"primary\" variant=\"outlined\" onClick={(e) => {\r\n                certificateUploadDialog({\r\n                    notify: this.props.notify,\r\n                    domainId: this.state._id,\r\n                    onDone: async () => {\r\n                        this.setState({ sslMissing: false });\r\n                    }\r\n                });\r\n            }}>\r\n                Upload certificates\r\n            </Button>\r\n        </Grid> : null;\r\n    }\r\n    // *****************************************************************\r\n\r\n    /**\r\n     * handleDialogClose\r\n     */\r\n    handleDialogClose = () => {\r\n        this.setSelected(null, null);\r\n    };\r\n\r\n    /**\r\n    * setSelected\r\n    * @param {*} mode \r\n    */\r\n    setSelected(mode, selected) {\r\n        let stateData = this.populateEditorFormFromObject(selected);\r\n        stateData.selected = selected;\r\n        stateData.mode = mode;\r\n        this.setState(stateData);\r\n    }\r\n\r\n    /**\r\n     * saveDialogData\r\n     */\r\n    saveDialogData = () => {\r\n        (async () => {\r\n            let isValide = this.formEl.validate();\r\n            if (isValide) {\r\n                if (this.props.domains.find(o => (!this.state._id || o.id != this.state._id) && o.value.toLowerCase() == this.state._value.toLowerCase())) {\r\n                    return this.props.notify(\"Conflict: domain name already in use.\", \"error\");\r\n                }\r\n                if (DOMAIN_AS_IP_REGEX.exec(this.state._value) && this.props.nginxConfigs.find(o => o.domainId && o.domainId == this.state._id)) {\r\n                    return this.props.notify(\"Conflict: At least one nginx config uses subdomains associated with this domain.\", \"error\");\r\n                }\r\n\r\n                let modelObject = this.populateSelected(this.state);\r\n                try {\r\n                    let allOk = true;\r\n                    if (modelObject.httpsEnabled) {\r\n                        let checkDomain = await API.endpoints.Domains.remote(\"checkDomainSslCert?domainId=\" + this.state._id, null, \"get\");\r\n                        allOk = checkDomain.data.configured;\r\n                    }\r\n                    // If domain ssl ok or ssl not configured\r\n                    if (allOk) {\r\n                        if (this.state.mode === \"ADD\") {\r\n                            let dbResult = await API.endpoints.Domains.create(modelObject);\r\n                            this.props.dispatch({\r\n                                type: this.SET_DATA_REDUCER_ACTION,\r\n                                data: [...this.props.domains, dbResult]\r\n                            });\r\n                        } else {\r\n                            modelObject.id = this.state._id;\r\n                            let dbResult = await API.endpoints.Domains.update(modelObject);\r\n                            let updData = this.props.domains.map(o => {\r\n                                if (o.id === this.state._id) {\r\n                                    return dbResult;\r\n                                } else {\r\n                                    return o;\r\n                                }\r\n                            });\r\n\r\n                            this.props.dispatch({\r\n                                type: this.SET_DATA_REDUCER_ACTION,\r\n                                data: updData\r\n                            });\r\n                        }\r\n                        this.setState({ sslMissing: false });\r\n                        this.setSelected(null, null);\r\n                        this.props.notify(\"Saved\");\r\n                    }\r\n                    // Ssl not configured, show instructions\r\n                    else {\r\n                        this.setState({ sslMissing: true });\r\n                    }\r\n                }\r\n                catch (err) {\r\n                    console.log(\"ERROR =>\", err);\r\n                    this.props.notify(\"An error occured, make sure the server is running.\", \"error\");\r\n                };\r\n            }\r\n        })();\r\n    }\r\n\r\n    /**\r\n     * deleteDialogData\r\n     */\r\n    deleteDialogData = async () => {\r\n        if (this.props.nginxConfigs.find(o => o.domainId && o.domainId == this.state._id)) {\r\n            this.props.notify(`Conflict: Cannot delete because there is at least one nginx config that uses this domain.`, \"error\");\r\n        } else {\r\n            // Confirm delete\r\n            confirmAlert({\r\n                title: null,\r\n                message: 'Are you sure you want to delete this?',\r\n                buttons: [\r\n                    {\r\n                        label: 'Yes',\r\n                        onClick: async () => {\r\n                            try {\r\n                                await API.endpoints.Domains.deleteById(this.state._id);\r\n\r\n                                this.props.dispatch({\r\n                                    type: this.SET_DATA_REDUCER_ACTION,\r\n                                    data: this.props.domains.filter(o => {\r\n                                        return o.id != this.state._id\r\n                                    })\r\n                                });\r\n                                this.setSelected(null, null);\r\n                                this.props.notify(\"Deleted\");\r\n                            }\r\n                            catch (err) {\r\n                                console.log(\"ERROR =>\", err);\r\n                                this.props.notify(\"An error occured, make sure the server is running.\", \"error\");\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        label: 'No',\r\n                        onClick: () => {\r\n\r\n                        }\r\n                    }\r\n                ]\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * handleRowClick\r\n     */\r\n    handleRowClick(event, id) {\r\n        let selectedItem = this.props.domains.find(o => o.id === id);\r\n        if (this.state.selected && this.state._id === selectedItem.id) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ selected: null });\r\n\r\n        if (this.tblClickDebouncer) {\r\n            clearTimeout(this.tblClickDebouncer);\r\n        }\r\n\r\n        this.tblClickDebouncer = setTimeout(function (si) {\r\n            this.tblClickDebouncer = null;\r\n            this.setSelected(\"EDIT\", JSON.parse(JSON.stringify(si)));\r\n        }.bind(this, selectedItem), 200);\r\n    }\r\n\r\n    /**\r\n     * render\r\n     */\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        let tblHeader = this.tableHeader();\r\n        return (\r\n            <Paper className={classes.paper}>\r\n                <div className={classes.tableTitleDiv}>Domains</div>\r\n                <Divider variant=\"middle\" style={{ marginLeft: 0, marginRight: 0, marginTop: 0, marginBottom: 20 }} />\r\n                <Button variant=\"contained\" color=\"primary\" style={{ textTransform: \"none\", position: 'absolute', right: 10, top: 10 }} onClick={this.setSelected.bind(this, \"ADD\", {})}>New</Button>\r\n                <Card className={classes.cardInfo}>\r\n                    <CardContent>\r\n                        <Typography>\r\n                            The default domain is used to expose the \"private server hub\" admin console through the NGinx reverse proxy, therefore making it accessible from outside your home.\r\n                        </Typography>\r\n                    </CardContent>\r\n                </Card>\r\n                <Table className={classes.table}>\r\n                    {tblHeader && <TableHead>\r\n                        {tblHeader}\r\n                    </TableHead>}\r\n                    <TableBody>\r\n                        {this.props.domains.map(row => {\r\n                            let cellClasses = [classes.tableCell];\r\n                            cellClasses = cellClasses.join(' ');\r\n                            return this.tableRow(cellClasses, classes.tableCellButton, (this.state.selected && this.state.selected.id === row.id), this.state._id ? this.state._id : null, row);\r\n                        })}\r\n                        {this.props.domains.length == 0 && <TableRow>\r\n                            <TableCell style={{ textAlign: 'center' }} colSpan={3}>\r\n                                <Typography variant=\"caption\">-none-</Typography>\r\n                            </TableCell>\r\n                        </TableRow>}\r\n                    </TableBody>\r\n                </Table>\r\n                {/* Loading indicator */}\r\n                {this.state.loading && <LinearProgress color=\"secondary\" />}\r\n\r\n                {/* ********************************************** EDITOR DIALOG ********************************************** */}\r\n                <Dialog\r\n                    TransitionComponent={Transition}\r\n                    open={this.state.selected ? true : false}\r\n                    onClose={this.handleDialogClose}\r\n                    scroll=\"paper\"\r\n                >\r\n                    <AppBar className={classes.appBar}>\r\n                        <Toolbar>\r\n                            <IconButton color=\"inherit\" onClick={this.handleDialogClose} aria-label=\"Close\">\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                            <Typography variant=\"h6\" color=\"inherit\" className={classes.flex}>\r\n                                {this.state.mode === \"EDIT\" ? \"Edit\" : \"Add\"} domain\r\n                            </Typography>\r\n                            <Button color=\"inherit\" onClick={this.saveDialogData}>\r\n                                Save\r\n                            </Button>\r\n                            {this.state.mode === \"EDIT\" &&\r\n                                <Button color=\"secondary\" onClick={this.deleteDialogData}>\r\n                                    Delete\r\n                                </Button>\r\n                            }\r\n                        </Toolbar>\r\n                    </AppBar>\r\n\r\n                    <div className={classes.formDiv}>\r\n                        {this.state.selected && <ValidatorForm ref={form => (this.formEl = form)}>\r\n                            <div className={\"form-group\"}>\r\n                                <Grid container spacing={16}>\r\n                                    {this.getDialogFormBlockName()}\r\n                                    {this.getDialogFormBlockHttpsEnabled()}\r\n                                    {this.getDialogFormBlockUploadCertificates()}\r\n                                </Grid>\r\n                            </div>\r\n                        </ValidatorForm>}\r\n                    </div>\r\n\r\n                    <DialogContent>\r\n                        {this.state.sslMissing && <div>\r\n                            <br />\r\n                            <Typography gutterBottom variant=\"h6\">\r\n                                No certificate found for this domain!\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle2\" gutterBottom>\r\n                                Instructions to generate the missing certificates:\r\n                            </Typography>\r\n                            \r\n                            <Card className={classes.card}>\r\n                                <CardContent>\r\n\r\n                                    <Typography variant=\"subtitle2\" gutterBottom>\r\n                                        Get the certbot docker image for your domain registrar:\r\n                                    </Typography>\r\n                                    <br/>\r\n                                    <Typography component=\"p\" style={{color: \"#3d499c\"}}>\r\n                                        docker pull certbot/certbot<br/>\r\n                                        <br/><span style={{color: \"#555555\"}}>or</span><br/><br/>\r\n                                        docker pull certbot/dns-dnsmadeeasy<br/>\r\n                                        docker pull certbot/dns-dnsimple<br/>\r\n                                        docker pull certbot/dns-ovh<br/>\r\n                                        docker pull certbot/dns-cloudflare<br/>\r\n                                        docker pull certbot/dns-cloudxns<br/>\r\n                                        docker pull certbot/dns-digitalocean<br/>\r\n                                        docker pull certbot/dns-google<br/>\r\n                                        docker pull certbot/dns-luadns<br/>\r\n                                        docker pull certbot/dns-nsone<br/>\r\n                                        docker pull certbot/dns-rfc2136<br/>\r\n                                        docker pull certbot/dns-route53<br/>\r\n                                        docker pull certbot/dns-gehirn<br/>\r\n                                        docker pull certbot/dns-linode<br/>\r\n                                        docker pull certbot/dns-sakuracloud\r\n                                    </Typography>\r\n                                    <br/>\r\n                                    <Typography variant=\"subtitle2\" gutterBottom>\r\n                                        Generate your SSL certificate:\r\n                                    </Typography>\r\n                                    <br/>\r\n                                    <Typography component=\"p\">\r\n                                        The following command will create your certificate using the certbot docker image. This command assumes that you are creating the certificate manually without the use of a plugin (using the docker image \"certbot/certbot\"). If you are using a specific dns plugin, modify the bold section accordingly. \r\n                                    </Typography>\r\n                                    <br/>\r\n                                    <Typography component=\"p\" style={{color: \"#3d499c\"}}>\r\n                                        docker run -it --rm --name certbot -v \"/usr/local/private-server-hub/.letsencrypt:/etc/letsencrypt\" <span style={{fontWeight: \"bold\"}}>certbot/certbot</span> \\<br/>\r\n                                        <span style={{fontWeight: \"bold\"}}>certonly --manual --preferred-challenges dns-01 --agree-tos -d \"{this.state._value}\" -d \"*.{this.state._value}\" --server https://acme-v02.api.letsencrypt.org/directory</span>\r\n                                    </Typography>\r\n                                    <br/>\r\n                                    <Typography component=\"p\">\r\n                                        Follow the instructions provided when executed the above command. \r\n                                    </Typography>\r\n                                    <br/>\r\n                                    <Typography variant=\"subtitle2\" gutterBottom>\r\n                                        Set up auto-renew of your certificate:\r\n                                    </Typography>\r\n                                    <br/>\r\n                                    <Typography component=\"p\">\r\n                                        Open your crontab:\r\n                                    </Typography>\r\n                                    <Typography component=\"p\" style={{color: \"#3d499c\"}}>\r\n                                        crontab -e\r\n                                    </Typography>\r\n                                    <br/>\r\n                                    <Typography component=\"p\">\r\n                                        Add the following line to it:\r\n                                    </Typography>\r\n                                    <Typography component=\"p\" style={{color: \"#3d499c\"}}>\r\n                                        0 5 * * * docker run -it --rm --name certbot -v \"/usr/local/private-server-hub/.letsencrypt:/etc/letsencrypt\" <span style={{fontWeight: \"bold\"}}>certbot/certbot</span> renew --quiet && docker container exec psh_nginx nginx -s reload > /dev/null 2>&1<br/> \r\n                                    </Typography>\r\n                                    {/* <div className=\"MuiTypography-body1-212\">\r\n                                        <br /><br />\r\n                                        <b>CloudFlare</b>\r\n                                        <ol>\r\n                                            <li>Configure your domain registrar Nameservers to match CloudFlares Nameservers (instructions provided when creating website on CloudFlare)</li>\r\n                                            <li>Add following DNS records to the domain <span style={{ color: \"blue\" }}>{this.state._value}</span>:<br />\r\n                                                <div style={{ color: \"#888888\", paddingLeft: 10 }}>\r\n                                                    <i>A: * => YOUR SERVER PUBLIC IP ADDRESS</i> => TTL 2 Minutes<br />\r\n                                                    <i>A: {this.state._value} => YOUR SERVER PUBLIC IP ADDRESS => TTL 2 Minutes</i> (set DNS only mode)<br />\r\n                                                    <i>A: www => YOUR SERVER PUBLIC IP ADDRESS => TTL 2 Minutes</i> (set DNS only mode)\r\n                                            </div>\r\n                                            </li>\r\n                                            <li>\r\n                                                Get your CloudFlare Global API Key, save it in a file on your server <span style={{ color: \"orange\" }}>(ex. /root/.secrets/cloudflare.ini)</span> with the following content: <br />\r\n                                                <div style={{ color: \"#888888\", paddingLeft: 10 }}>\r\n                                                    <i>dns_cloudflare_email = \"youremail@example.com\"</i><br />\r\n                                                    <i>dns_cloudflare_api_key = \"your cloudflare api key here\"</i>\r\n                                                </div>\r\n                                            </li>\r\n                                            <li>Set the SSL mode to <b>Full</b> under the <i>Crypto</i> section for the domain</li>\r\n                                            <li><i>Disable Universal SSL</i> option under the <i>Crypto</i> section for the domain</li>\r\n                                        </ol>\r\n                                    </div> */}\r\n                                    {/* <div className=\"MuiTypography-body1-212\">\r\n                                        <b>SSL setup</b>\r\n                                        <ol>\r\n                                            <li>SSH into your server</li>\r\n                                            <li>Execute the command:<br />\r\n                                                <div style={{ color: \"#888888\", paddingLeft: 10 }}>\r\n                                                    <i>certbot certonly --dns-cloudflare --dns-cloudflare-credentials <span style={{ color: \"orange\" }}>/root/.secrets/cloudflare.ini</span> -d {this.state._value},*.{this.state._value} --preferred-challenges dns-01</i>\r\n                                                </div>\r\n                                            </li>\r\n                                            <li>To auto-renew certificate, open crontab editor: crontab -e</li>\r\n                                            <li>Add the following line at the end:<br />\r\n                                                <div style={{ color: \"#888888\", paddingLeft: 10 }}>\r\n                                                    <i>14 5 * * * /usr/local/bin/certbot renew --quiet --post-hook \"docker container exec psh_nginx nginx -s reload\" > /dev/null 2>&1</i>\r\n                                                </div>\r\n                                            </li>\r\n                                            <li>Once done try to save your domain again with the SSL flag enabled</li>\r\n                                        </ol>\r\n                                    </div> */}\r\n                                </CardContent>\r\n                            </Card>\r\n                        </div>}\r\n                        {this.state._httpsEnabled && !this.state.sslMissing && <Typography gutterBottom variant=\"body1\" component=\"h2\">\r\n                            Certificate configured!\r\n                        </Typography>}\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </Paper>\r\n        );\r\n    }\r\n}\r\n\r\n// The function takes data from the app current state,\r\n// and insert/links it into the props of our component.\r\n// This function makes Redux know that this component needs to be passed a piece of the state\r\nconst mapStateToProps = (state, props) => ({\r\n    domains: state.domains,\r\n    settings: state.settings,\r\n    nginxConfigs: state.nginxConfigs,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({ \"dispatch\": dispatch });\r\n\r\n//Connect everything\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(DomainsTable));","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Paper, Grid, Button, TextField, Divider } from '@material-ui/core';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport ValidatorForm from \"../ValidationForm/index\";\r\nimport API from \"../../../services/API\";\r\nimport styles from './styles.js';\r\n\r\nimport { confirmAlert } from '../Dialogs/AlertDialog';\r\n\r\nfunction Transition(props) {\r\n    return <Slide direction=\"up\" {...props} />;\r\n}\r\n\r\nclass BasicAuthTable extends React.Component {\r\n    /**\r\n     * constructor\r\n     * @param {*} props \r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = this.populateEditorFormFromObject();\r\n        this.state.selected = null;\r\n        this.state.mode = null;\r\n\r\n        this.tblClickDebouncer = null;\r\n    }\r\n\r\n    // *****************************************************************\r\n    SET_DATA_REDUCER_ACTION = \"SET_BASICAUTH\";\r\n    tableRow(cellClasses, isSelected, selectedId, row) {\r\n        return <TableRow hover key={row.id}\r\n            className={isSelected ? \"\" : \"hoverPointer\"}\r\n            onClick={event => this.handleRowClick(event, row.id)}\r\n            selected={selectedId && selectedId === row.id}>\r\n\r\n            <TableCell className={cellClasses}>{row.username}</TableCell>\r\n        </TableRow>;\r\n    }\r\n    populateEditorFormFromObject(selected) {\r\n        return {\r\n            _id: selected && selected.id ? selected.id : null,\r\n            _username: selected && selected.username ? selected.username : \"\",\r\n            _password: selected && selected.password ? selected.password : \"\"\r\n        }\r\n    }\r\n    populateSelected(state) {\r\n        return {\r\n            username: state._username,\r\n            password: state._password\r\n        }\r\n    }\r\n    tableHeader() {\r\n        return <TableRow>\r\n            <TableCell className={this.props.classes.tableHeaderCell}>Username</TableCell>\r\n        </TableRow>;\r\n    }\r\n    generateFormContent() {\r\n        return <div className={\"form-group\"}>\r\n            <Grid container spacing={16}>\r\n                <Grid item xs={12} style={{ textAlign: 'left' }}>\r\n                    <div className={\"form-group\"}>\r\n                        <TextField\r\n                            name=\"username\"\r\n                            className={\"form-control\"}\r\n                            value={this.state._username}\r\n                            onChange={(e) => { this.setState({ _username: e.target.value }) }}\r\n                            label=\"User name\"\r\n                            type=\"text\"\r\n                            fullWidth\r\n                            autoFocus\r\n                            required />\r\n                        <div className=\"invalid-feedback\"></div>\r\n                    </div>\r\n                </Grid>\r\n                <Grid item xs={12} style={{ textAlign: 'left' }}>\r\n                    <div className={\"form-group\"}>\r\n                        <TextField\r\n                            name=\"password\"\r\n                            className={\"form-control\"}\r\n                            value={this.state._password}\r\n                            onChange={(e) => { this.setState({ _password: e.target.value }) }}\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            fullWidth\r\n                            required />\r\n                        <div className=\"invalid-feedback\"></div>\r\n                    </div>\r\n                </Grid>\r\n            </Grid>\r\n        </div>;\r\n    }\r\n    // *****************************************************************\r\n\r\n    /**\r\n     * handleDialogClose\r\n     */\r\n    handleDialogClose = () => {\r\n        this.setSelected(null, null);\r\n    };\r\n\r\n    /**\r\n    * setSelected\r\n    * @param {*} mode \r\n    */\r\n    setSelected(mode, selected) {\r\n        let stateData = this.populateEditorFormFromObject(selected);\r\n        stateData.selected = selected;\r\n        stateData.mode = mode;\r\n        this.setState(stateData);\r\n    }\r\n\r\n    /**\r\n     * saveDialogData\r\n     */\r\n    saveDialogData = () => {\r\n        (async () => {\r\n            let isValide = this.formEl.validate();\r\n            if (isValide) {\r\n                if (this.props.basicAuth.find(o => (!this.state._id || o.id != this.state._id) && o.username.toLowerCase() == this.state._username.toLowerCase())) {\r\n                    return this.props.notify(\"Conflict: Basic Auth username already in use.\", \"error\");\r\n                }\r\n\r\n                let modelObject = this.populateSelected(this.state);\r\n\r\n                try {\r\n                    if (this.state.mode === \"ADD\") {\r\n                        let dbResult = await API.endpoints.BasicAuths.create(modelObject);\r\n                        this.props.dispatch({\r\n                            type: this.SET_DATA_REDUCER_ACTION,\r\n                            data: [...this.props.basicAuth, dbResult]\r\n                        });\r\n                    } else {\r\n                        modelObject.id = this.state._id;\r\n                        let dbResult = await API.endpoints.BasicAuths.update(modelObject);\r\n                        let updData = this.props.basicAuth.map(o => {\r\n                            if (o.id === this.state._id) {\r\n                                return dbResult;\r\n                            } else {\r\n                                return o;\r\n                            }\r\n                        });\r\n\r\n                        this.props.dispatch({\r\n                            type: this.SET_DATA_REDUCER_ACTION,\r\n                            data: updData\r\n                        });\r\n                    }\r\n                    this.setSelected(null, null);\r\n                    this.props.notify(\"Saved\");\r\n                }\r\n                catch (err) {\r\n                    console.log(\"ERROR =>\", err);\r\n                    this.props.notify(\"An error occured, make sure the server is running.\", \"error\");\r\n                };\r\n            }\r\n        })();\r\n    }\r\n\r\n    /**\r\n     * deleteDialogData\r\n     */\r\n    deleteDialogData = async () => {\r\n        if (this.props.nginxConfigs.find(c => c.basicAuthId == this.state._id)) {\r\n            return this.props.notify(\"Conflict: this auth user is used by at least one nginx configuration.\", \"error\");\r\n        } else {\r\n            // Confirm delete\r\n            confirmAlert({\r\n                title: null,\r\n                message: 'Are you sure you want to delete this?',\r\n                buttons: [\r\n                    {\r\n                        label: 'Yes',\r\n                        onClick: async () => {\r\n                            try {\r\n                                await API.endpoints.BasicAuths.deleteById(this.state._id);\r\n\r\n                                this.props.dispatch({\r\n                                    type: this.SET_DATA_REDUCER_ACTION,\r\n                                    data: this.props.basicAuth.filter(o => {\r\n                                        return o.id != this.state._id\r\n                                    })\r\n                                });\r\n                                this.setSelected(null, null);\r\n                                this.props.notify(\"Deleted\");\r\n                            }\r\n                            catch (err) {\r\n                                console.log(\"ERROR =>\", err);\r\n                                this.props.notify(\"An error occured, make sure the server is running.\", \"error\");\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        label: 'No',\r\n                        onClick: () => {\r\n\r\n                        }\r\n                    }\r\n                ]\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * handleRowClick\r\n     */\r\n    handleRowClick(event, id) {\r\n        let selectedItem = this.props.basicAuth.find(o => o.id === id);\r\n        if (this.state.selected && this.state._id === selectedItem.id) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ selected: null });\r\n\r\n        if (this.tblClickDebouncer) {\r\n            clearTimeout(this.tblClickDebouncer);\r\n        }\r\n\r\n        this.tblClickDebouncer = setTimeout(function (si) {\r\n            this.tblClickDebouncer = null;\r\n            this.setSelected(\"EDIT\", JSON.parse(JSON.stringify(si)));\r\n        }.bind(this, selectedItem), 200);\r\n    }\r\n\r\n    /**\r\n     * submitForm\r\n     */\r\n    // submitForm() {\r\n    // this.setState({\r\n    //     saving: true\r\n    // });\r\n\r\n    // API.endpoints.Flights.remote(\"processPendingPointEventData\", null, \"POST\", { ...this.state, flightId: this.props.event.flight ? this.props.event.flight.id : null, eventId: this.props.event.id, uid: this.props.event.userMembership.alpUser.id }).then((result) => {\r\n    //     this.props.doneEditing(result.data);\r\n    // }).catch((err) => {\r\n    //     this.setState({\r\n    //         saving: false\r\n    //     });\r\n    //     this.props.errorEditing();\r\n    // });\r\n    // }\r\n\r\n    /**\r\n     * render\r\n     */\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        let tblHeader = this.tableHeader();\r\n        return (\r\n            <Paper className={classes.paper}>\r\n                <div className={classes.tableTitleDiv}>Basic Auth Users</div>\r\n                <Divider variant=\"middle\" style={{ marginLeft: 0, marginRight: 0, marginTop: 0, marginBottom: 20 }} />\r\n                <Button variant=\"contained\" color=\"primary\" style={{ textTransform: \"none\", position: 'absolute', right: 10, top: 10 }} onClick={this.setSelected.bind(this, \"ADD\", {})}>New</Button>\r\n                <Table className={classes.table}>\r\n                    {tblHeader && <TableHead>\r\n                        {tblHeader}\r\n                    </TableHead>}\r\n                    <TableBody>\r\n                        {this.props.basicAuth.map(row => {\r\n                            let cellClasses = [classes.tableCell];\r\n                            cellClasses = cellClasses.join(' ');\r\n                            return this.tableRow(cellClasses, (this.state.selected && this.state.selected.id === row.id), this.state._id ? this.state._id : null, row);\r\n                        })}\r\n\r\n                        {this.props.basicAuth.length == 0 && <TableRow>\r\n                            <TableCell style={{ textAlign: 'center' }}>\r\n                                <Typography variant=\"caption\">-none-</Typography>\r\n                            </TableCell>\r\n                        </TableRow>}\r\n\r\n                    </TableBody>\r\n                </Table>\r\n                {/* Loading indicator */}\r\n                {this.state.loading && <LinearProgress color=\"secondary\" />}\r\n\r\n                {/* ********************************************** EDITOR DIALOG ********************************************** */}\r\n                <Dialog\r\n                    TransitionComponent={Transition}\r\n                    open={this.state.selected ? true : false}\r\n                    onClose={this.handleDialogClose}\r\n                >\r\n                    <AppBar className={classes.appBar}>\r\n                        <Toolbar>\r\n                            <IconButton color=\"inherit\" onClick={this.handleDialogClose} aria-label=\"Close\">\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                            <Typography variant=\"h6\" color=\"inherit\" className={classes.flex}>\r\n                                {this.state.mode === \"EDIT\" ? \"Edit\" : \"Add\"} basic auth user\r\n                            </Typography>\r\n                            <Button color=\"inherit\" onClick={this.saveDialogData}>\r\n                                Save\r\n                            </Button>\r\n                            {this.state.mode === \"EDIT\" &&\r\n                                <Button color=\"secondary\" onClick={this.deleteDialogData}>\r\n                                    Delete\r\n                                </Button>\r\n                            }\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                    <div className={classes.formDiv}>\r\n                        {this.state.selected && <ValidatorForm ref={form => (this.formEl = form)}>\r\n                            {this.generateFormContent()}\r\n                        </ValidatorForm>}\r\n                    </div>\r\n                </Dialog>\r\n            </Paper>\r\n        );\r\n    }\r\n}\r\n\r\n// The function takes data from the app current state,\r\n// and insert/links it into the props of our component.\r\n// This function makes Redux know that this component needs to be passed a piece of the state\r\nconst mapStateToProps = (state, props) => ({\r\n    basicAuth: state.basicAuth,\r\n    nginxConfigs: state.nginxConfigs,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({ \"dispatch\": dispatch });\r\n\r\n//Connect everything\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(BasicAuthTable));","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Paper,\r\n    Grid,\r\n    Button,\r\n    TextField,\r\n    Divider,\r\n    ListItemText,\r\n    List,\r\n    ListItem,\r\n    ListSubheader,\r\n    ListItemSecondaryAction,\r\n    Dialog,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogActions,\r\n    IconButton\r\n} from '@material-ui/core';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport ValidatorForm from \"../ValidationForm/index\";\r\nimport API from \"../../../services/API\";\r\nimport styles from './styles.js';\r\nimport { confirmAlert } from '../Dialogs/AlertDialog';\r\nimport CheckIcon from '@material-ui/icons/CheckCircleOutline';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n    PaperProps: {\r\n        style: {\r\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n            width: 250,\r\n        },\r\n    },\r\n};\r\n\r\nfunction Transition(props) {\r\n    return <Slide direction=\"up\" {...props} />;\r\n}\r\n\r\nclass NginxPresetsTable extends React.Component {\r\n    /**\r\n     * constructor\r\n     * @param {*} props \r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = this.populateEditorFormFromObject();\r\n        this.state.selected = null;\r\n        this.state.mode = null;\r\n\r\n        this.state.inputDialogOpen = false;\r\n        this.state.inputDialogLabel = \"\";\r\n        this.state.inputDialogTarget = \"\";\r\n        this.state.inputDialogValue = \"\";\r\n        this.state.inputDialogKey = \"\";\r\n        this.state.inputDialogValueErrors = null;\r\n\r\n        this.tblClickDebouncer = null;\r\n    }\r\n\r\n    // *****************************************************************\r\n    SET_DATA_REDUCER_ACTION = \"SET_NGINX_PRESET_PARAMS\";\r\n    tableRow(cellClasses, isSelected, selectedId, row) {\r\n        return <TableRow hover key={row.id}\r\n            className={isSelected ? \"\" : \"hoverPointer\"}\r\n            onClick={event => this.handleRowClick(event, row.id)}\r\n            selected={selectedId && selectedId === row.id}>\r\n\r\n            <TableCell className={cellClasses}>{row.name}</TableCell>\r\n        </TableRow>;\r\n    }\r\n    populateEditorFormFromObject(selected) {\r\n        return {\r\n            _id: selected && selected.id ? selected.id : null,\r\n            _name: selected && selected.name ? selected.name : \"\",\r\n            _list: selected && selected.list ? selected.list : [],\r\n        }\r\n    }\r\n    populateSelected(state) {\r\n        return {\r\n            name: state._name,\r\n            list: state._list\r\n        }\r\n    }\r\n    tableHeader() {\r\n        // return <TableRow>\r\n        //     <TableCell>Name</TableCell>\r\n        // </TableRow>;\r\n        return null;\r\n    }\r\n    // *****************************************************************\r\n\r\n    /**\r\n     * handleDialogClose\r\n     */\r\n    handleDialogClose = () => {\r\n        this.setSelected(null, null);\r\n    };\r\n\r\n    /**\r\n    * setSelected\r\n    * @param {*} mode \r\n    */\r\n    setSelected(mode, selected) {\r\n        let stateData = this.populateEditorFormFromObject(selected);\r\n        stateData.selected = selected;\r\n        stateData.mode = mode;\r\n        this.setState(stateData);\r\n    }\r\n\r\n    /**\r\n     * saveDialogData\r\n     */\r\n    saveDialogData = () => {\r\n        (async () => {\r\n            let isValide = this.formEl.validate();\r\n            if (isValide) {\r\n                if (this.props.nginxPresetParams.find(o => (!this.state._id || o.id != this.state._id) && o.name.toLowerCase() == this.state._name.toLowerCase())) {\r\n                    return this.props.notify(\"Conflict: nginx preset params name already in use.\", \"error\");\r\n                }\r\n\r\n                let modelObject = this.populateSelected(this.state);\r\n\r\n                try {\r\n                    if (this.state.mode === \"ADD\") {\r\n                        let dbResult = await API.endpoints.NginxPresetParams.create(modelObject);\r\n                        this.props.dispatch({\r\n                            type: this.SET_DATA_REDUCER_ACTION,\r\n                            data: [...this.props.nginxPresetParams, dbResult]\r\n                        });\r\n                    } else {\r\n                        modelObject.id = this.state._id;\r\n                        let dbResult = await API.endpoints.NginxPresetParams.update(modelObject);\r\n                        let updData = this.props.nginxPresetParams.map(o => {\r\n                            if (o.id === this.state._id) {\r\n                                return dbResult;\r\n                            } else {\r\n                                return o;\r\n                            }\r\n                        });\r\n\r\n                        this.props.dispatch({\r\n                            type: this.SET_DATA_REDUCER_ACTION,\r\n                            data: updData\r\n                        });\r\n                    }\r\n                    this.setSelected(null, null);\r\n                    this.props.notify(\"Saved\");\r\n                }\r\n                catch (err) {\r\n                    console.log(\"ERROR =>\", err);\r\n                    this.props.notify(\"An error occured, make sure the server is running.\", \"error\");\r\n                };\r\n            }\r\n        })();\r\n    }\r\n\r\n    /**\r\n     * deleteDialogData\r\n     */\r\n    deleteDialogData = async () => {\r\n        if (this.props.nginxConfigs.find(o => o.nginxPresetParamsId && o.nginxPresetParamsId == this.state._id)) {\r\n            this.props.notify(`Conflict: Cannot delete because there is at least one nginx config that uses this preset params.`, \"error\");\r\n        } else {\r\n            // Confirm delete\r\n            confirmAlert({\r\n                title: null,\r\n                message: 'Are you sure you want to delete this?',\r\n                buttons: [\r\n                    {\r\n                        label: 'Yes',\r\n                        onClick: async () => {\r\n                            try {\r\n                                await API.endpoints.NginxPresetParams.deleteById(this.state._id);\r\n\r\n                                this.props.dispatch({\r\n                                    type: this.SET_DATA_REDUCER_ACTION,\r\n                                    data: this.props.nginxPresetParams.filter(o => {\r\n                                        return o.id != this.state._id\r\n                                    })\r\n                                });\r\n                                this.setSelected(null, null);\r\n                                this.props.notify(\"Deleted\");\r\n                            }\r\n                            catch (err) {\r\n                                console.log(\"ERROR =>\", err);\r\n                                this.props.notify(\"An error occured, make sure the server is running.\", \"error\");\r\n                            }\r\n                        }\r\n                    },\r\n                    {\r\n                        label: 'No',\r\n                        onClick: () => {\r\n\r\n                        }\r\n                    }\r\n                ]\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * handleRowClick\r\n     */\r\n    handleRowClick(event, id) {\r\n        let selectedItem = this.props.nginxPresetParams.find(o => o.id === id);\r\n        if (this.state.selected && this.state._id === selectedItem.id) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ selected: null });\r\n\r\n        if (this.tblClickDebouncer) {\r\n            clearTimeout(this.tblClickDebouncer);\r\n        }\r\n\r\n        this.tblClickDebouncer = setTimeout(function (si) {\r\n            this.tblClickDebouncer = null;\r\n            this.setSelected(\"EDIT\", JSON.parse(JSON.stringify(si)));\r\n        }.bind(this, selectedItem), 200);\r\n    }\r\n\r\n    /**\r\n     * stringEditorDialog\r\n     */\r\n    stringEditorDialog(text, handleClose, validator) {\r\n        return <Dialog\r\n            open={this.state.inputDialogOpen}\r\n            onClose={handleClose.bind(this, \"CANCEL\")}\r\n            aria-labelledby=\"form-dialog-title\"\r\n        >\r\n            <DialogContent>\r\n                {text && <DialogContentText>{text}</DialogContentText>}\r\n                <TextField\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    label={this.state.inputDialogLabel}\r\n                    type=\"text\"\r\n                    value={this.state.inputDialogValue}\r\n                    onChange={(e) => {\r\n                        this.setState({ inputDialogValue: e.target.value })\r\n                    }}\r\n                    style={{ width: 500 }}\r\n                />\r\n                {this.state.inputDialogValueErrors && this.state.inputDialogValueErrors.map((error, i) => <div key={\"err_\" + i} style={{\r\n                    color: \"red\",\r\n                    fontSize: 12\r\n                }}>{error}</div>)}\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={handleClose.bind(this, \"CANCEL\")} color=\"primary\">\r\n                    Cancel\r\n            </Button>\r\n                <Button onClick={() => {\r\n                    if (validator) {\r\n                        let validationErrors = validator(this.state.inputDialogValue);\r\n                        if (validationErrors) {\r\n                            this.setState({ inputDialogValueErrors: validationErrors })\r\n                        } else {\r\n                            handleClose(\"SAVE\");\r\n                        }\r\n                    }\r\n                    else {\r\n                        handleClose(\"SAVE\");\r\n                    }\r\n                }} color=\"primary\">\r\n                    Save\r\n            </Button>\r\n            </DialogActions>\r\n        </Dialog>;\r\n    }\r\n\r\n    /**\r\n     * getDialogFormBlockName\r\n     */\r\n    getDialogFormBlockName() {\r\n        return <Grid item xs={12} style={{ textAlign: 'left' }}>\r\n            <div className={\"form-group\"}>\r\n                <TextField\r\n                    name=\"name\"\r\n                    className={\"form-control\"}\r\n                    value={this.state._name}\r\n                    onChange={(e) => { this.setState({ _name: e.target.value }) }}\r\n                    label=\"Identifier name\"\r\n                    type=\"text\"\r\n                    fullWidth\r\n                    autoFocus\r\n                    required />\r\n                <div className=\"invalid-feedback\"></div>\r\n            </div>\r\n        </Grid>;\r\n    }\r\n\r\n    /**\r\n     * getDialogFormBlockEnvironementVariables\r\n     */\r\n    getDialogFormBlockParamssList() {\r\n        return <Grid item xs={12} style={{ textAlign: 'left' }}>\r\n            <div className={\"form-group\"} style={{ textAlign: 'left' }}>\r\n                <Grid container>\r\n                    <Grid item xs={6} style={{ textAlign: 'left' }}>\r\n                        <ListSubheader component=\"div\">Nginx block params</ListSubheader>\r\n                    </Grid>\r\n                    <Grid item xs={6} style={{ textAlign: 'right' }}>\r\n                        <Button color=\"primary\" style={{ marginTop: 8 }} onClick={(e) => {\r\n                            this.setState({\r\n                                inputDialogOpen: true,\r\n                                inputDialogValue: \"\",\r\n                                inputDialogValueErrors: null,\r\n                                inputDialogTarget: \"list\",\r\n                                inputDialogLabel: \"Nginx block params\",\r\n                                inputDialogKey: null\r\n                            });\r\n                        }}>Add param line</Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <List dense={false} >\r\n                    {this.state._list.map((en, i) =>\r\n                        <ListItem key={\"blockparam_\" + i} button onClick={function (value, index) {\r\n                            this.setState({\r\n                                inputDialogOpen: true,\r\n                                inputDialogValue: value,\r\n                                inputDialogValueErrors: null,\r\n                                inputDialogTarget: \"list\",\r\n                                inputDialogLabel: \"Nginx block params\",\r\n                                inputDialogKey: index\r\n                            });\r\n                        }.bind(this, en, i)}>\r\n                            <CheckIcon />\r\n                            <ListItemText\r\n                                primary={en}\r\n                                secondary={null}\r\n                            />\r\n                            <ListItemSecondaryAction onClick={function (index) {\r\n                                this.state._list.splice(index, 1);\r\n                                this.setState({\r\n                                    _list: this.state._list\r\n                                });\r\n                            }.bind(this, i)}>\r\n                                <IconButton aria-label=\"Delete\">\r\n                                    <DeleteIcon />\r\n                                </IconButton>\r\n                            </ListItemSecondaryAction>\r\n                        </ListItem>\r\n                    )}\r\n                    {this.state._list.length == 0 && <Typography variant=\"caption\" className={this.props.classes.emptyDialogLine}>-none-</Typography>}\r\n                </List>\r\n            </div>\r\n        </Grid>;\r\n    }\r\n\r\n    /**\r\n     * render\r\n     */\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        let tblHeader = this.tableHeader();\r\n        return (\r\n            <Paper className={classes.paper}>\r\n                <div className={classes.tableTitleDiv}>Config preset parameters</div>\r\n                <Divider variant=\"middle\" style={{ marginLeft: 0, marginRight: 0, marginTop: 0, marginBottom: 20 }} />\r\n                <Button variant=\"contained\" color=\"primary\" style={{ textTransform: \"none\", position: 'absolute', right: 10, top: 10 }} onClick={this.setSelected.bind(this, \"ADD\", {})}>New</Button>\r\n                <Table className={classes.table}>\r\n                    {tblHeader && <TableHead>\r\n                        {tblHeader}\r\n                    </TableHead>}\r\n                    <TableBody>\r\n                        {this.props.nginxPresetParams.map(row => {\r\n                            let cellClasses = [classes.tableCell];\r\n                            cellClasses = cellClasses.join(' ');\r\n                            return this.tableRow(cellClasses, (this.state.selected && this.state.selected.id === row.id), this.state._id ? this.state._id : null, row);\r\n                        })}\r\n                        {this.props.nginxPresetParams.length == 0 && <TableRow>\r\n                            <TableCell style={{ textAlign: 'center' }}>\r\n                                <Typography variant=\"caption\">-none-</Typography>\r\n                            </TableCell>\r\n                        </TableRow>}\r\n                    </TableBody>\r\n                </Table>\r\n                {/* Loading indicator */}\r\n                {this.state.loading && <LinearProgress color=\"secondary\" />}\r\n\r\n                {/* ********************************************** EDITOR DIALOG ********************************************** */}\r\n                <Dialog\r\n                    TransitionComponent={Transition}\r\n                    open={this.state.selected ? true : false}\r\n                    onClose={this.handleDialogClose}\r\n                >\r\n                    <AppBar className={classes.appBar}>\r\n                        <Toolbar>\r\n                            <IconButton color=\"inherit\" onClick={this.handleDialogClose} aria-label=\"Close\">\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                            <Typography variant=\"h6\" color=\"inherit\" className={classes.flex}>\r\n                                {this.state.mode === \"EDIT\" ? \"Edit\" : \"Add\"} params\r\n                            </Typography>\r\n                            <Button color=\"inherit\" onClick={this.saveDialogData}>\r\n                                Save\r\n                            </Button>\r\n                            {this.state.mode === \"EDIT\" &&\r\n                                <Button color=\"secondary\" onClick={this.deleteDialogData}>\r\n                                    Delete\r\n                                </Button>\r\n                            }\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                    <div className={classes.formDiv}>\r\n                        {this.state.selected && <ValidatorForm ref={form => (this.formEl = form)}>\r\n                            <div className={\"form-group\"}>\r\n                                <Grid container spacing={16}>\r\n                                    {this.getDialogFormBlockName()}\r\n                                    {this.getDialogFormBlockParamssList()}\r\n                                </Grid>\r\n                            </div>\r\n                        </ValidatorForm>}\r\n                    </div>\r\n                </Dialog>\r\n                {this.stringEditorDialog(null, (action) => {\r\n                    switch (action + \"_\" + this.state.inputDialogTarget) {\r\n                        case \"SAVE_list\":\r\n                            if (this.state.inputDialogKey != null) {\r\n                                this.state._list[this.state.inputDialogKey] = this.state.inputDialogValue;\r\n                                this.setState({\r\n                                    _list: this.state._list\r\n                                });\r\n                            } else {\r\n                                this.state._list.push(this.state.inputDialogValue);\r\n                                this.setState({\r\n                                    _list: this.state._list\r\n                                });\r\n                            }\r\n                            break;\r\n                    }\r\n\r\n                    this.setState({\r\n                        inputDialogOpen: false\r\n                    });\r\n                }, (value) => {\r\n                    let isValide;\r\n                    switch (this.state.inputDialogTarget) {\r\n                        case \"list\":\r\n                            if (value.length == 0) {\r\n                                return [\"Required\"];\r\n                            }\r\n                            return null;\r\n                    }\r\n                })}\r\n            </Paper>\r\n        );\r\n    }\r\n}\r\n\r\n// The function takes data from the app current state,\r\n// and insert/links it into the props of our component.\r\n// This function makes Redux know that this component needs to be passed a piece of the state\r\nconst mapStateToProps = (state, props) => ({\r\n    nginxPresetParams: state.nginxPresetParams,\r\n    nginxConfigs: state.nginxConfigs,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({ \"dispatch\": dispatch });\r\n\r\n//Connect everything\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(NginxPresetsTable));","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Paper,\r\n    Grid,\r\n    FormControl,\r\n    Button,\r\n    TextField,\r\n    Select,\r\n    MenuItem,\r\n    InputLabel,\r\n    Checkbox,\r\n    ListItemText,\r\n    Divider,\r\n    Dialog,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogActions,\r\n    IconButton\r\n} from '@material-ui/core';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport ValidatorForm from \"../ValidationForm/index\";\r\nimport API from \"../../../services/API\";\r\nimport { confirmAlert } from '../Dialogs/AlertDialog';\r\nimport styles from './styles.js';\r\n\r\nimport CheckIcon from '@material-ui/icons/CheckCircleOutline';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nlet SAFE_STRING_REGEX = /([^A-Za-z0-9_]+)/;\r\nlet DOMAIN_AS_IP_REGEX = /\\b(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\b/;\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n    PaperProps: {\r\n        style: {\r\n            maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n            width: 250,\r\n        },\r\n    },\r\n};\r\n\r\nfunction Transition(props) {\r\n    return <Slide direction=\"up\" {...props} />;\r\n}\r\n\r\nclass NginxPresetsTable extends React.Component {\r\n    /**\r\n     * constructor\r\n     * @param {*} props \r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = this.populateEditorFormObject();\r\n        this.state.selected = null;\r\n        this.state.mode = null;\r\n\r\n        this.state.inputDialogOpen = false;\r\n        this.state.inputDialogLabel = \"\";\r\n        this.state.inputDialogTarget = \"\";\r\n        this.state.inputDialogValue = \"\";\r\n        this.state.inputDialogKey = \"\";\r\n        this.state.inputDialogValueErrors = null;\r\n\r\n        this.tblClickDebouncer = null;\r\n    }\r\n\r\n    // *****************************************************************\r\n    SET_DATA_REDUCER_ACTION = \"SET_NGINX_CONFIGS\";\r\n    tableRow(cellClasses, isSelected, selectedId, row) {\r\n        let domain = this.props.domains.find(o => o.id == row.domainId);\r\n        return <TableRow hover key={row.id}\r\n            className={isSelected ? \"\" : \"hoverPointer\"}\r\n            onClick={event => this.handleRowClick(event, row.id)}\r\n            selected={selectedId && selectedId === row.id}>\r\n            <TableCell className={cellClasses}>{row.name}</TableCell>\r\n            <TableCell className={[cellClasses, this.props.classes.tableCellButton].join(\" \")}>{\r\n                domain ? `${domain.httpsEnabled ? \"https\" : \"http\"}://${row.asSubdomain ? row.subdomain + \".\" : \"\"}${domain.value}${row.uriPath.length > 0 ? ((row.uriPath.indexOf('/') == -1 ? \"/\" : \"\") + row.uriPath) : \"\"}` : ''\r\n            }</TableCell>\r\n        </TableRow>;\r\n    }\r\n    populateEditorFormObject(selected) {\r\n        return {\r\n            _id: selected && selected.id ? selected.id : null,\r\n            _name: selected && selected.name ? selected.name : \"\",\r\n            _uriPath: selected && selected.uriPath ? selected.uriPath : \"\",\r\n            _port: selected && selected.port ? selected.port : \"\",\r\n            _asSubdomain: selected && selected.asSubdomain ? true : false,\r\n            _subdomain: selected && selected.subdomain ? selected.subdomain : \"\",\r\n            _proxyPath: selected && selected.proxyPath ? selected.proxyPath : \"\",\r\n            _nginxPresetParamsId: selected && selected.nginxPresetParamsId ? selected.nginxPresetParamsId : \"\",\r\n            _domainId: selected && selected.domainId ? selected.domainId : \"\",\r\n            _basicAuthId: selected && selected.basicAuthId ? selected.basicAuthId : \"\",\r\n            _serverTarget: selected && selected.serverTarget ? selected.serverTarget : \"c\",\r\n            _selectedContainers: selected && selected.id ? this.props.nginxDockerLinks.filter(ndl => ndl.nginxConfigId == selected.id).map(ndl => ndl.containerId) : []\r\n        }\r\n    }\r\n    populateSelected(state) {\r\n        return {\r\n            name: state._name,\r\n            uriPath: state._uriPath,\r\n            port: state._port,\r\n            asSubdomain: state._asSubdomain,\r\n            subdomain: state._subdomain,\r\n            proxyPath: state._proxyPath,\r\n            serverTarget: state._serverTarget,\r\n            nginxPresetParamsId: state._nginxPresetParamsId ? state._nginxPresetParamsId : null,\r\n            domainId: state._domainId ? state._domainId : null,\r\n            basicAuthId: state._basicAuthId ? state._basicAuthId : null\r\n        }\r\n    }\r\n    tableHeader() {\r\n        return <TableRow>\r\n            <TableCell className={this.props.classes.tableHeaderCell}>Name</TableCell>\r\n            <TableCell className={[this.props.classes.tableCellButton, this.props.classes.tableHeaderCell].join(\" \")}>URL</TableCell>\r\n        </TableRow>;\r\n    }\r\n    // *****************************************************************\r\n\r\n    /**\r\n     * handleDialogClose\r\n     */\r\n    handleDialogClose = () => {\r\n        this.setSelected(null, null);\r\n    };\r\n\r\n    /**\r\n    * setSelected\r\n    * @param {*} mode \r\n    */\r\n    setSelected(mode, selected) {\r\n        let stateData = this.populateEditorFormObject(selected);\r\n        stateData.selected = selected;\r\n        stateData.mode = mode;\r\n        this.setState(stateData);\r\n    }\r\n\r\n    /**\r\n     * saveDialogData\r\n     */\r\n    saveDialogData = () => {\r\n        (async () => {\r\n            let isValide = this.formEl.validate();\r\n            if (isValide) {\r\n                // Extra validation first\r\n                if (SAFE_STRING_REGEX.exec(this.state._name)) {\r\n                    return this.props.notify(\"Error: nginx name must contain only letters, numbers or underscore.\", \"error\");\r\n                }\r\n                if (this.props.nginxConfigs.find(o => (!this.state._id || o.id != this.state._id) && o.name.toLowerCase() == this.state._name.toLowerCase())) {\r\n                    return this.props.notify(\"Conflict: nginx config name already in use.\", \"error\");\r\n                }\r\n                if (this.state._serverTarget == \"h\" && (this.state._port == \"16199\" || this.state._port == \"80\" || this.state._port == \"443\" || this.state._port == \"9443\")) {\r\n                    return this.props.notify(\"Conflict: Host ports 16199, 80 & 443 are reserved ports.\", \"error\");\r\n                }\r\n                if (this.state._asSubdomain && (!this.state._domainId || this.state._domainId.length == 0)) {\r\n                    return this.props.notify(\"Error: You need to specify a domain since you configured a subdomain.\", \"error\");\r\n                }\r\n                if (this.state._asSubdomain && DOMAIN_AS_IP_REGEX.exec(this.props.domains.find(o => o.id == this.state._domainId).value)) {\r\n                    return this.props.notify(\"Error: subdomains are only allowed with real domain names.\", \"error\");\r\n                }\r\n\r\n                let modelObject = this.populateSelected(this.state);\r\n                try {\r\n                    // On ADD config\r\n                    if (this.state.mode === \"ADD\") {\r\n                        let dbResult = await API.endpoints.NginxConfigs.create(modelObject);\r\n\r\n                        // Create NginxDocker links\r\n                        if (this.state._selectedContainers.length > 0) {\r\n                            for (let i = 0; i < this.state._selectedContainers.length; i++) {\r\n                                let nginxDockerLink = await API.endpoints.NginxDockerLinks.create({\r\n                                    containerId: this.state._selectedContainers[i],\r\n                                    nginxConfigId: dbResult.id\r\n                                });\r\n\r\n                                this.props.dispatch({\r\n                                    type: \"ADD_NGINX_DOCKER_LINKS\",\r\n                                    data: [nginxDockerLink]\r\n                                });\r\n                            }\r\n                        }\r\n\r\n                        // Update local store for nginx configs\r\n                        this.props.dispatch({\r\n                            type: this.SET_DATA_REDUCER_ACTION,\r\n                            data: [...this.props.nginxConfigs, dbResult]\r\n                        });\r\n                    }\r\n                    // On UPDATE config\r\n                    else {\r\n                        // Update NGinx config object\r\n                        modelObject.id = this.state._id;\r\n                        let dbResult = await API.endpoints.NginxConfigs.update(modelObject);\r\n                        let updData = this.props.nginxConfigs.map(o => {\r\n                            if (o.id === this.state._id) {\r\n                                return dbResult;\r\n                            } else {\r\n                                return o;\r\n                            }\r\n                        });\r\n\r\n                        // Look for existing links to manipulate\r\n                        let nginxDockerLinks = await API.endpoints.NginxDockerLinks.getAll({\r\n                            \"where\": {\r\n                                \"nginxConfigId\": this.state._id\r\n                            }\r\n                        });\r\n\r\n                        // Now update links\r\n                        for (let i = 0; i < nginxDockerLinks.length; i++) {\r\n                            // link exists, but is not required anymore\r\n                            if (this.state._selectedContainers.indexOf(nginxDockerLinks[i].containerId) == -1) {\r\n                                await API.endpoints.NginxDockerLinks.deleteById(nginxDockerLinks[i].id);\r\n\r\n                                this.props.dispatch({\r\n                                    type: \"DELETE_NGINX_DOCKER_LINK\",\r\n                                    data: nginxDockerLinks[i].id\r\n                                });\r\n                            }\r\n                        }\r\n                        for (let i = 0; i < this.state._selectedContainers.length; i++) {\r\n                            // If a selected container link does not exist yet, we create it now\r\n                            if (nginxDockerLinks.find(ndl => ndl.containerId == this.state._selectedContainers[i]) == null) {\r\n                                let nginxDockerLink = await API.endpoints.NginxDockerLinks.create({\r\n                                    containerId: this.state._selectedContainers[i],\r\n                                    nginxConfigId: this.state._id\r\n                                });\r\n\r\n                                this.props.dispatch({\r\n                                    type: \"ADD_NGINX_DOCKER_LINKS\",\r\n                                    data: [nginxDockerLink]\r\n                                });\r\n                            }\r\n                        }\r\n\r\n                        // Update local store for containers\r\n                        let containers = await API.endpoints.Containers.getAll();\r\n                        this.props.dispatch({\r\n                            type: \"SET_CONTAINERS\",\r\n                            data: containers\r\n                        });\r\n\r\n                        // Update local store for nginx configs\r\n                        this.props.dispatch({\r\n                            type: this.SET_DATA_REDUCER_ACTION,\r\n                            data: updData\r\n                        });\r\n                    }\r\n                    this.setSelected(null, null);\r\n                    this.props.notify(\"Saved\");\r\n                }\r\n                catch (err) {\r\n                    console.log(\"ERROR =>\", err);\r\n                    this.props.notify(\"An error occured, make sure the server is running.\", \"error\");\r\n                };\r\n            }\r\n        })();\r\n    }\r\n\r\n    /**\r\n     * deleteDialogData\r\n     */\r\n    deleteDialogData = async () => {\r\n        // Confirm delete\r\n        confirmAlert({\r\n            title: null,\r\n            message: 'Are you sure you want to delete this?',\r\n            buttons: [\r\n                {\r\n                    label: 'Yes',\r\n                    onClick: async () => {\r\n                        try {\r\n                            // Update containers links first\r\n                            let cUpdated = false;\r\n                            for (let i = 0; i < this.props.nginxDockerLinks.length; i++) {\r\n                                if (this.props.nginxDockerLinks[i].nginxConfigId == this.state._id) {\r\n                                    await API.endpoints.NginxDockerLinks.deleteById(this.props.nginxDockerLinks[i].id);\r\n                                    cUpdated = true;\r\n                                }\r\n                            }\r\n\r\n                            if (cUpdated) {\r\n                                let nginxDockerLinks = await API.endpoints.NginxDockerLinks.getAll();\r\n                                this.props.dispatch({\r\n                                    type: \"SET_NGINX_DOCKER_LINKS\",\r\n                                    data: nginxDockerLinks\r\n                                });\r\n                            }\r\n\r\n                            // Now delete config\r\n                            await API.endpoints.NginxConfigs.deleteById(this.state._id);\r\n                            this.props.dispatch({\r\n                                type: this.SET_DATA_REDUCER_ACTION,\r\n                                data: this.props.nginxConfigs.filter(o => {\r\n                                    return o.id != this.state._id\r\n                                })\r\n                            });\r\n                            this.setSelected(null, null);\r\n                            this.props.notify(\"Deleted\");\r\n                        }\r\n                        catch (err) {\r\n                            console.log(\"ERROR =>\", err);\r\n                            this.props.notify(\"An error occured, make sure the server is running.\", \"error\");\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    label: 'No',\r\n                    onClick: () => {\r\n\r\n                    }\r\n                }\r\n            ]\r\n        });\r\n    }\r\n\r\n    /**\r\n     * handleRowClick\r\n     */\r\n    handleRowClick(event, id) {\r\n        let selectedItem = this.props.nginxConfigs.find(o => o.id === id);\r\n        if (this.state.selected && this.state._id === selectedItem.id) {\r\n            return;\r\n        }\r\n\r\n        this.setState({ selected: null });\r\n\r\n        if (this.tblClickDebouncer) {\r\n            clearTimeout(this.tblClickDebouncer);\r\n        }\r\n\r\n        this.tblClickDebouncer = setTimeout(function (si) {\r\n            this.tblClickDebouncer = null;\r\n            this.setSelected(\"EDIT\", JSON.parse(JSON.stringify(si)));\r\n        }.bind(this, selectedItem), 200);\r\n    }\r\n\r\n    /**\r\n     * stringEditorDialog\r\n     */\r\n    stringEditorDialog(text, handleClose, validator) {\r\n        return <Dialog\r\n            open={this.state.inputDialogOpen}\r\n            onClose={handleClose.bind(this, \"CANCEL\")}\r\n            aria-labelledby=\"form-dialog-title\"\r\n        >\r\n            <DialogContent>\r\n                {text && <DialogContentText>{text}</DialogContentText>}\r\n                <TextField\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    label={this.state.inputDialogLabel}\r\n                    type=\"text\"\r\n                    value={this.state.inputDialogValue}\r\n                    onChange={(e) => {\r\n                        this.setState({ inputDialogValue: e.target.value })\r\n                    }}\r\n                    style={{ width: 500 }}\r\n                />\r\n                {this.state.inputDialogValueErrors && this.state.inputDialogValueErrors.map((error, i) => <div key={\"err_\" + i} style={{\r\n                    color: \"red\",\r\n                    fontSize: 12\r\n                }}>{error}</div>)}\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={handleClose.bind(this, \"CANCEL\")} color=\"primary\">\r\n                    Cancel\r\n            </Button>\r\n                <Button onClick={() => {\r\n                    if (validator) {\r\n                        let validationErrors = validator(this.state.inputDialogValue);\r\n                        if (validationErrors) {\r\n                            this.setState({ inputDialogValueErrors: validationErrors })\r\n                        } else {\r\n                            handleClose(\"SAVE\");\r\n                        }\r\n                    }\r\n                    else {\r\n                        handleClose(\"SAVE\");\r\n                    }\r\n                }} color=\"primary\">\r\n                    Save\r\n            </Button>\r\n            </DialogActions>\r\n        </Dialog>;\r\n    }\r\n\r\n    /**\r\n     * getDialogFormBlockUriPath\r\n     */\r\n    getDialogFormBlockUriPath() {\r\n        return <Grid item xs={8} style={{ textAlign: 'left' }}>\r\n            <div className={\"form-group\"}>\r\n                <TextField\r\n                    name=\"_uriPath\"\r\n                    className={\"form-control\"}\r\n                    value={this.state._uriPath}\r\n                    onChange={(e) => { this.setState({ _uriPath: e.target.value }) }}\r\n                    label=\"URI path\"\r\n                    type=\"text\" />\r\n                <div className=\"invalid-feedback\"></div>\r\n            </div>\r\n        </Grid>;\r\n    }\r\n\r\n    /**\r\n     * getDialogFormBlockName\r\n     */\r\n    getDialogFormBlockName() {\r\n        return <Grid item xs={4} style={{ textAlign: 'left' }}>\r\n            <div className={\"form-group\"}>\r\n                <TextField\r\n                    name=\"_name\"\r\n                    className={\"form-control\"}\r\n                    value={this.state._name}\r\n                    onChange={(e) => { this.setState({ _name: e.target.value }) }}\r\n                    label=\"Config name\"\r\n                    type=\"text\"\r\n                    fullWidth\r\n                    required />\r\n                <div className=\"invalid-feedback\"></div>\r\n            </div>\r\n        </Grid>;\r\n    }\r\n\r\n    /**\r\n     * getDialogFormBlockPort\r\n     */\r\n    getDialogFormBlockPort() {\r\n        return <Grid item xs={4} style={{ textAlign: 'left' }}>\r\n            <div className={\"form-group\"}>\r\n\r\n                <TextField\r\n                    name=\"_port\"\r\n                    className={\"form-control\"}\r\n                    value={this.state._port}\r\n                    onChange={(e) => { this.setState({ _port: e.target.value }) }}\r\n                    label={this.state._serverTarget == 'c' ? \"Container port\" : \"Host port\"}\r\n                    type=\"text\"\r\n                    fullWidth\r\n                    autoFocus\r\n                    required />\r\n                <div className=\"invalid-feedback\"></div>\r\n            </div>\r\n        </Grid>;\r\n    }\r\n\r\n    /**\r\n     * getDialogFormBlockIsSubdomain\r\n     */\r\n    getDialogFormBlockIsSubdomain() {\r\n        return <Grid item xs={4} style={{ textAlign: 'left' }}>\r\n            <FormGroup row>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            checked={this.state._asSubdomain}\r\n                            onChange={(event) => {\r\n                                this.setState({ _asSubdomain: event.target.checked, _subdomain: \"\" });\r\n                            }}\r\n                        />\r\n                    }\r\n                    label=\"Subdomain\"\r\n                />\r\n            </FormGroup>\r\n        </Grid>;\r\n    }\r\n\r\n    /**\r\n     * getDialogFormBlockSubdomain\r\n     */\r\n    getDialogFormBlockSubdomain() {\r\n        return <Grid item xs={4} style={{ textAlign: 'left' }}>\r\n            {this.state._asSubdomain && <div className={\"form-group\"}>\r\n                <TextField\r\n                    required\r\n                    name=\"_subdomain\"\r\n                    className={\"form-control\"}\r\n                    value={this.state._subdomain}\r\n                    onChange={(e) => {\r\n                        this.setState({ _subdomain: e.target.value });\r\n                    }}\r\n                    label=\"Subdomain\"\r\n                    type=\"text\"\r\n                    fullWidth />\r\n                <div className=\"invalid-feedback\"></div>\r\n            </div>}\r\n        </Grid>;\r\n    }\r\n\r\n    /**\r\n     * getDialogFormBlockEnvironementVariables\r\n     */\r\n    getDialogFormBlockPresetParams() {\r\n        return <Grid item xs={8} style={{ textAlign: 'left' }}>\r\n            <div className={\"form-group\"} style={{ textAlign: 'left' }}>\r\n                <FormControl fullWidth>\r\n                    <InputLabel htmlFor=\"_nginxPresetParamsId\">NGinx preset configuration</InputLabel>\r\n                    <Select\r\n                        value={this.state._nginxPresetParamsId}\r\n                        onChange={(event) => {\r\n                            this.setState({ [event.target.name]: event.target.value });\r\n                        }}\r\n                        inputProps={{\r\n                            name: '_nginxPresetParamsId',\r\n                            id: '_nginxPresetParamsId',\r\n                        }}\r\n                        fullWidth\r\n                    >\r\n                        <MenuItem value=\"\">\r\n                            <em>None</em>\r\n                        </MenuItem>\r\n\r\n                        {this.props.nginxPresetParams.map(psItem => (\r\n                            <MenuItem key={\"ngparam_\" + psItem.id} value={psItem.id}>{psItem.name}</MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n        </Grid>;\r\n    }\r\n\r\n    /**\r\n     * getDialogFormBlockDomain\r\n     */\r\n    getDialogFormBlockDomain() {\r\n        return <Grid item xs={4} style={{ textAlign: 'left' }}>\r\n            <div className={\"form-group\"} style={{ textAlign: 'left' }}>\r\n                <FormControl fullWidth>\r\n                    <InputLabel htmlFor=\"_domainId\">Domain</InputLabel>\r\n                    <Select\r\n                        value={this.state._domainId}\r\n                        onChange={(event) => {\r\n                            this.setState({ [event.target.name]: event.target.value });\r\n                        }}\r\n                        inputProps={{\r\n                            name: '_domainId',\r\n                            id: '_domainId',\r\n                        }}\r\n                        fullWidth\r\n                    >\r\n                        <MenuItem value=\"\">\r\n                            <em>None</em>\r\n                        </MenuItem>\r\n\r\n                        {this.props.domains.map(domain => (\r\n                            <MenuItem key={\"domain_\" + domain.id} value={domain.id}>{domain.value}</MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                    <div className=\"invalid-feedback\"></div>\r\n                </FormControl>\r\n            </div>\r\n        </Grid>;\r\n    }\r\n\r\n    /**\r\n     * getDialogFormBlockBasicAuth\r\n     */\r\n    getDialogFormBlockBasicAuth() {\r\n        return <Grid item xs={4} style={{ textAlign: 'left' }}>\r\n            <div className={\"form-group\"} style={{ textAlign: 'left' }}>\r\n                <FormControl fullWidth>\r\n                    <InputLabel htmlFor=\"_basicAuthId\">Basic Auth User</InputLabel>\r\n                    <Select\r\n                        value={this.state._basicAuthId}\r\n                        onChange={(event) => {\r\n                            this.setState({ [event.target.name]: event.target.value });\r\n                        }}\r\n                        inputProps={{\r\n                            name: '_basicAuthId',\r\n                            id: '_basicAuthId',\r\n                        }}\r\n                        fullWidth\r\n                    >\r\n                        <MenuItem value=\"\">\r\n                            <em>None</em>\r\n                        </MenuItem>\r\n\r\n                        {this.props.basicAuth.map(basicAuth => (\r\n                            <MenuItem key={\"basicAuth_\" + basicAuth.id} value={basicAuth.id}>{basicAuth.username}</MenuItem>\r\n                        ))}\r\n                    </Select>\r\n                    <div className=\"invalid-feedback\"></div>\r\n                </FormControl>\r\n            </div>\r\n        </Grid>;\r\n    }\r\n\r\n    /**\r\n     * getDialogFormBlockServerType\r\n     */\r\n    getDialogFormBlockServerTarget() {\r\n        return <Grid item xs={4} style={{ textAlign: 'left' }}>\r\n            <div className={\"form-group\"} style={{ textAlign: 'left' }}>\r\n                <FormControl fullWidth>\r\n                    <InputLabel htmlFor=\"_serverTarget\">Target server type</InputLabel>\r\n                    <Select\r\n                        required\r\n                        value={this.state._serverTarget}\r\n                        onChange={(event) => {\r\n                            let stateUpd = { [event.target.name]: event.target.value };\r\n                            if (event.target.value != 'c') {\r\n                                stateUpd._selectedContainers = [];\r\n                            }\r\n                            if (event.target.value != 'e') {\r\n                                stateUpd._port = \"\";\r\n                            }\r\n                            this.setState(stateUpd);\r\n                        }}\r\n                        inputProps={{\r\n                            name: '_serverTarget',\r\n                            id: '_serverTarget',\r\n                        }}\r\n                        fullWidth\r\n                    >\r\n                        <MenuItem key=\"serverTarget_c\" value=\"c\">Container</MenuItem>\r\n                        <MenuItem key=\"serverTarget_h\" value=\"h\">Host</MenuItem>\r\n                        <MenuItem key=\"serverTarget_e\" value=\"e\">External</MenuItem>\r\n                    </Select>\r\n                    <div className=\"invalid-feedback\"></div>\r\n                </FormControl>\r\n            </div>\r\n        </Grid>;\r\n    }\r\n\r\n    /**\r\n     * getDialogFormBlockContainers\r\n     */\r\n    getDialogFormBlockContainers() {\r\n        return <Grid item xs={4} style={{ textAlign: 'left' }}>\r\n            {this.state._serverTarget == 'c' && <div className={\"form-group\"} style={{ textAlign: 'left' }}>\r\n                <FormControl fullWidth>\r\n                    <InputLabel htmlFor=\"_selectedContainers\">Containers</InputLabel>\r\n                    <Select\r\n                        required\r\n                        multiple\r\n                        value={this.state._selectedContainers}\r\n                        onChange={(event) => {\r\n                            this.setState({ _selectedContainers: event.target.value });\r\n                        }}\r\n                        renderValue={selected => this.props.containers.filter(n => selected.indexOf(n.id) > -1).map(n => n.name).join(', ')}\r\n                        inputProps={{\r\n                            name: '_selectedContainers',\r\n                            id: '_selectedContainers',\r\n                        }}\r\n                        MenuProps={MenuProps}\r\n                        fullWidth\r\n                    >\r\n                        {this.props.containers.map((c) => {\r\n                            // if (!c.nginxConfigId || c.nginxConfigId == this.state._id) {\r\n                            return <MenuItem key={c.name} value={c.id}>\r\n                                <Checkbox checked={this.props.containers.filter(n => this.state._selectedContainers.indexOf(n.id) > -1).map(n => n.name).indexOf(c.name) > -1} />\r\n                                <ListItemText primary={c.name} />\r\n                            </MenuItem>;\r\n                            // } else {\r\n                            //     return null;\r\n                            // }\r\n                        })}\r\n                    </Select>\r\n                    <div className=\"invalid-feedback\"></div>\r\n                </FormControl>\r\n            </div>}\r\n\r\n            {this.state._serverTarget == 'e' && <div className={\"form-group\"} style={{ textAlign: 'left' }}>\r\n                <TextField\r\n                    required\r\n                    name=\"_proxyPath\"\r\n                    className={\"form-control\"}\r\n                    value={this.state._proxyPath}\r\n                    onChange={(e) => {\r\n                        this.setState({ _proxyPath: e.target.value });\r\n                    }}\r\n                    label=\"Proxy path\"\r\n                    type=\"text\"\r\n                    fullWidth />\r\n                <div className=\"invalid-feedback\"></div>\r\n            </div>}\r\n\r\n        </Grid>;\r\n    }\r\n\r\n    /**\r\n     * getDialogFormBlockProxyTarget\r\n     */\r\n    getDialogFormBlockProxyTarget() {\r\n        return <Grid item xs={8} style={{ textAlign: 'left' }}>\r\n            <div className={\"form-group\"} style={{ textAlign: 'left' }}>\r\n                <TextField\r\n                    required\r\n                    name=\"_proxyPath\"\r\n                    className={\"form-control\"}\r\n                    value={this.state._proxyPath}\r\n                    onChange={(e) => {\r\n                        this.setState({ _proxyPath: e.target.value });\r\n                    }}\r\n                    label=\"Proxy path\"\r\n                    type=\"text\"\r\n                    fullWidth />\r\n                <div className=\"invalid-feedback\"></div>\r\n            </div>\r\n        </Grid>;\r\n    }\r\n\r\n    /**\r\n     * render\r\n     */\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        let tblHeader = this.tableHeader();\r\n        return (\r\n            <Paper className={classes.paper}>\r\n                <div className={classes.tableTitleDiv}>Nginx configuration</div>\r\n                <Divider variant=\"middle\" style={{ marginLeft: 0, marginRight: 0, marginTop: 0, marginBottom: 20 }} />\r\n                <Button variant=\"contained\" color=\"primary\" style={{ textTransform: \"none\", position: 'absolute', right: 10, top: 10 }} onClick={\r\n                    this.setSelected.bind(this, \"ADD\", {})\r\n                }>New</Button>\r\n                <Table className={classes.table}>\r\n                    {tblHeader && <TableHead>\r\n                        {tblHeader}\r\n                    </TableHead>}\r\n                    <TableBody>\r\n                        {this.props.nginxConfigs.map(row => {\r\n                            let cellClasses = [classes.tableCell];\r\n                            cellClasses = cellClasses.join(' ');\r\n                            return this.tableRow(cellClasses, (this.state.selected && this.state.selected.id === row.id), this.state._id ? this.state._id : null, row);\r\n                        })}\r\n                        {this.props.nginxConfigs.length == 0 && <TableRow>\r\n                            <TableCell style={{ textAlign: 'center' }} colSpan={2}>\r\n                                <Typography variant=\"caption\">-none-</Typography>\r\n                            </TableCell>\r\n                        </TableRow>}\r\n                    </TableBody>\r\n                </Table>\r\n                {/* Loading indicator */}\r\n                {this.state.loading && <LinearProgress color=\"secondary\" />}\r\n\r\n                {/* ********************************************** EDITOR DIALOG ********************************************** */}\r\n                <Dialog\r\n                    TransitionComponent={Transition}\r\n                    open={this.state.selected ? true : false}\r\n                    onClose={this.handleDialogClose}\r\n                >\r\n                    <AppBar className={classes.appBar}>\r\n                        <Toolbar>\r\n                            <IconButton color=\"inherit\" onClick={this.handleDialogClose} aria-label=\"Close\">\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                            <Typography variant=\"h6\" color=\"inherit\" className={classes.flex}>\r\n                                {this.state.mode === \"EDIT\" ? \"Edit\" : \"Add\"} Nginx configuration\r\n                            </Typography>\r\n                            <Button color=\"inherit\" onClick={this.saveDialogData}>\r\n                                Save\r\n                            </Button>\r\n                            {this.state.mode === \"EDIT\" &&\r\n                                <Button color=\"secondary\" onClick={this.deleteDialogData}>\r\n                                    Delete\r\n                                </Button>\r\n                            }\r\n                        </Toolbar>\r\n                    </AppBar>\r\n                    <div className={classes.formDiv}>\r\n                        {this.state.selected && <ValidatorForm ref={form => (this.formEl = form)}>\r\n                            <div className={\"form-group\"}>\r\n                                <Grid container spacing={16}>\r\n                                    {this.getDialogFormBlockName()}\r\n                                    {this.getDialogFormBlockUriPath()}\r\n                                    {this.getDialogFormBlockIsSubdomain()}\r\n                                    {this.getDialogFormBlockSubdomain()}\r\n                                    {this.getDialogFormBlockDomain()}\r\n                                    {this.getDialogFormBlockBasicAuth()}\r\n                                    {this.getDialogFormBlockServerTarget()}\r\n                                    {this.state._serverTarget == 'c' && this.getDialogFormBlockContainers()}\r\n                                    {this.state._serverTarget != 'e' && this.getDialogFormBlockPort()}\r\n                                    {this.state._serverTarget == 'e' && this.getDialogFormBlockProxyTarget()}\r\n                                    {this.getDialogFormBlockPresetParams()}\r\n                                </Grid>\r\n                            </div>\r\n                        </ValidatorForm>}\r\n                    </div>\r\n                </Dialog>\r\n            </Paper>\r\n        );\r\n    }\r\n}\r\n\r\n// The function takes data from the app current state,\r\n// and insert/links it into the props of our component.\r\n// This function makes Redux know that this component needs to be passed a piece of the state\r\nconst mapStateToProps = (state, props) => ({\r\n    nginxConfigs: state.nginxConfigs,\r\n    containers: state.containers,\r\n    domains: state.domains,\r\n    basicAuth: state.basicAuth,\r\n    nginxPresetParams: state.nginxPresetParams,\r\n    nginxDockerLinks: state.nginxDockerLinks\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({ \"dispatch\": dispatch });\r\n\r\n//Connect everything\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(NginxPresetsTable));","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Grid } from '@material-ui/core';\r\nimport styles from '../styles.js';\r\nimport SharableView from '../../elements/SharableView/index';\r\nimport LoadingIndicator from \"../../elements/LoadingIndicator/index\";\r\nimport DomainsTable from '../../elements/TableEditors/domains';\r\nimport BasicAuthTable from '../../elements/TableEditors/basicAuth';\r\nimport NGinxPresetParamsTable from '../../elements/TableEditors/nginxPresetParams';\r\nimport NGinxConfigsTable from '../../elements/TableEditors/nginxConfigs';\r\n\r\nimport { Button } from '@material-ui/core';\r\nimport AlertSnackbars from '../../elements/AlertBar/index';\r\n\r\nclass NginxConfigurationsPage extends React.Component {\r\n    sharedView = null\r\n\r\n    /**\r\n     * constructor\r\n     * @param {*} props \r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loading: false,\r\n            loadingMessage: null,\r\n\r\n            snackOpen: false,\r\n            snackMessage: \"\",\r\n            snackVariant: null\r\n        };\r\n    }\r\n\r\n    /**\r\n     * openSnack\r\n     * @param {*} message \r\n     * @param {*} variant \r\n     */\r\n    openSnack(message, variant) {\r\n        this.setState({ snackOpen: true, snackMessage: message, snackVariant: variant ? variant : \"success\" });\r\n    }\r\n\r\n    /**\r\n     * loadingStateChange\r\n     * @param {*} state \r\n     * @param {*} message \r\n     */\r\n    loadingStateChange(state, message) {\r\n        this.setState({ loading: state, loadingMessage: message });\r\n    }\r\n\r\n    /**\r\n     * handleSnackClose\r\n     */\r\n    handleSnackClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        this.setState({ snackOpen: false });\r\n    };\r\n\r\n    /**\r\n     * render\r\n     */\r\n    render() {\r\n        // If loged in, redirect to boardingpass page\r\n        if (!this.props.userSession.token) {\r\n            return <Redirect to='/login' />\r\n        }\r\n\r\n        return (\r\n            <SharableView\r\n                ref={(el) => this.sharedView = el}\r\n                history={this.props.history}\r\n                pageIndex={2}\r\n                notify={this.openSnack.bind(this)}\r\n            >\r\n                {/* {!this.state.loading &&  */}\r\n                <Grid item xs={12}>\r\n                    <Grid container spacing={16}>\r\n                        <Grid item xs={4}>\r\n                            <Grid container spacing={16}>\r\n                                <Grid item xs={12}>\r\n                                    <DomainsTable notify={this.openSnack.bind(this)} setLoading={this.loadingStateChange.bind(this)}></DomainsTable>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <NGinxPresetParamsTable notify={this.openSnack.bind(this)}></NGinxPresetParamsTable>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <BasicAuthTable notify={this.openSnack.bind(this)}></BasicAuthTable>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={8}>\r\n                            <NGinxConfigsTable notify={this.openSnack.bind(this)}></NGinxConfigsTable>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                {/* } */}\r\n\r\n                <LoadingIndicator show={this.state.loading} message={this.state.loadingMessage} />\r\n\r\n                <AlertSnackbars\r\n                    open={this.state.snackOpen}\r\n                    handleClose={this.handleSnackClose}\r\n                    message={this.state.snackMessage}\r\n                    variant={this.state.snackVariant}\r\n                />\r\n\r\n            </SharableView>\r\n        );\r\n    }\r\n}\r\n\r\n// The function takes data from the app current state,\r\n// and insert/links it into the props of our component.\r\n// This function makes Redux know that this component needs to be passed a piece of the state\r\nconst mapStateToProps = (state, props) => ({\r\n    userSession: state.userSession,\r\n    domains: state.domains,\r\n    nginxConfigs: state.nginxConfigs,\r\n    nginxPresetParams: state.nginxPresetParams\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({ \"dispatch\": dispatch });\r\n\r\n//Connect everything\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(NginxConfigurationsPage));","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport ValidatorForm from \"../../elements/ValidationForm/index\";\r\nimport LoadingIndicator from \"../../elements/LoadingIndicator\";\r\nimport {\r\n    Paper,\r\n    Grid,\r\n    Button,\r\n    TextField,\r\n    Divider\r\n} from '@material-ui/core';\r\nimport styles from '../styles.js';\r\nimport SharableView from '../../elements/SharableView/index';\r\nimport AlertSnackbars from '../../elements/AlertBar/index';\r\nimport API from \"../../../services/API\";\r\n\r\nclass NginxConfigurationsPage extends React.Component {\r\n    sharedView = null\r\n\r\n    /**\r\n     * constructor\r\n     * @param {*} props \r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            // loading: false\r\n            snackOpen: false,\r\n            snackMessage: \"\",\r\n            snackVariant: null,\r\n            _nginxConfigPath: \"\",\r\n            _composeConfigPath: \"\",\r\n            _defaultNginxDomain: \"\",\r\n            _nginxHtpasswdDir: \"\"\r\n        };\r\n    }\r\n\r\n    /**\r\n     * componentDidMount\r\n     */\r\n    componentDidMount() {\r\n        this.setState({\r\n            \"loading\": true,\r\n            \"loadingMessage\": null\r\n        });\r\n        setTimeout(() => {\r\n            let stateForm = {\r\n                \"loading\": false,\r\n                \"loadingMessage\": null\r\n            };\r\n            this.props.settings.map(s => {\r\n                stateForm[\"_\" + s.name] = s.value;\r\n            });\r\n            this.setState(stateForm);\r\n        }, 1000);\r\n    }\r\n\r\n    /**\r\n     * openSnack\r\n     * @param {*} message \r\n     * @param {*} variant \r\n     */\r\n    openSnack(message, variant) {\r\n        this.setState({ snackOpen: true, snackMessage: message, snackVariant: variant ? variant : \"success\" });\r\n    }\r\n\r\n    /**\r\n     * handleSnackClose\r\n     */\r\n    handleSnackClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        this.setState({ snackOpen: false });\r\n    };\r\n\r\n    /**\r\n     * saveSettings\r\n     */\r\n    async saveSettings(event) {\r\n        let isValide = this.formEl.validate();\r\n        if (isValide) {\r\n            this.setState({\r\n                \"loading\": true,\r\n                \"loadingMessage\": \"Saving...\"\r\n            });\r\n            let newSettings = [];\r\n            for (let key in this.state) {\r\n                if (key.indexOf(\"_\") == 0) {\r\n                    let name = key.substring(1);\r\n                    let obj = {\r\n                        \"id\": this.props.settings.find(s => s.name == name).id,\r\n                        \"name\": name,\r\n                        \"value\": this.state[key]\r\n                    };\r\n                    newSettings.push(obj);\r\n                    await API.endpoints.Settings.update(obj);\r\n                }\r\n            }\r\n\r\n            this.props.dispatch({\r\n                type: \"SET_SETTINGS\",\r\n                data: newSettings\r\n            });\r\n            this.setState({\r\n                \"loading\": false,\r\n                \"loadingMessage\": null\r\n            });\r\n            this.openSnack(\"Settings saved\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * setting\r\n     */\r\n    getSettingField(setting) {\r\n        const { literals } = this.props;\r\n        return <Grid item xs={12} style={{ textAlign: 'left', paddingBottom: 20 }}>\r\n            <div className={\"form-group\"}>\r\n                <TextField\r\n                    required\r\n                    name={\"_\" + setting.name}\r\n                    className={\"form-control\"}\r\n                    value={this.state[\"_\" + setting.name]}\r\n                    onChange={(e) => {\r\n                        let state = {};\r\n                        state[\"_\" + setting.name] = e.target.value;\r\n                        this.setState(state);\r\n                    }}\r\n                    label={literals.settings[setting.name]}\r\n                    type=\"text\"\r\n                    fullWidth />\r\n                <div className=\"invalid-feedback\"></div>\r\n            </div>\r\n        </Grid>;\r\n    }\r\n\r\n    /**\r\n     * render\r\n     */\r\n    render() {\r\n        // If loged in, redirect to boardingpass page\r\n        if (!this.props.userSession.token) {\r\n            return <Redirect to='/login' />\r\n        }\r\n\r\n        const { classes } = this.props;\r\n\r\n        this.props.settings.sort((a, b) => {\r\n            if (a.id < b.id)\r\n                return -1;\r\n            if (a.id > b.id)\r\n                return 1;\r\n            return 0;\r\n        });\r\n\r\n        return (\r\n            <SharableView\r\n                ref={(el) => this.sharedView = el}\r\n                history={this.props.history}\r\n                pageIndex={3}\r\n                notify={this.openSnack.bind(this)}\r\n            >\r\n                {/* {!this.state.loading &&  */}\r\n                <Grid item xs={12}>\r\n                    <Grid container spacing={16}>\r\n                        <Grid item xs={12}>\r\n                            <Paper className={classes.paper}>\r\n                                <div className={classes.tableTitleDiv}>Settings</div>\r\n                                <Divider variant=\"middle\" style={{ marginLeft: 0, marginRight: 0, marginTop: 0, marginBottom: 20 }} />\r\n                                <Button variant=\"contained\" color=\"primary\" style={{ textTransform: \"none\", position: 'absolute', right: 10, top: 10 }} onClick={this.saveSettings.bind(this)}>Save</Button>\r\n                                <ValidatorForm ref={form => (this.formEl = form)}>\r\n                                    <div style={{ padding: 10 }}>\r\n                                        {this.props.settings.map(s => <div key={\"setting\" + s.id} className={\"form-group\"}>\r\n                                            <Grid container spacing={16}>\r\n                                                {this.getSettingField(s)}\r\n                                            </Grid>\r\n                                        </div>\r\n                                        )}\r\n                                    </div>\r\n                                </ValidatorForm>\r\n                            </Paper>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                {/* } */}\r\n\r\n                <AlertSnackbars\r\n                    open={this.state.snackOpen}\r\n                    handleClose={this.handleSnackClose}\r\n                    message={this.state.snackMessage}\r\n                    variant={this.state.snackVariant}\r\n                />\r\n\r\n                <LoadingIndicator show={this.state.loading} />\r\n            </SharableView>\r\n        );\r\n    }\r\n}\r\n\r\n// The function takes data from the app current state,\r\n// and insert/links it into the props of our component.\r\n// This function makes Redux know that this component needs to be passed a piece of the state\r\nconst mapStateToProps = (state, props) => ({\r\n    userSession: state.userSession,\r\n    settings: state.settings,\r\n    literals: state.literals\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({ \"dispatch\": dispatch });\r\n\r\n//Connect everything\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(NginxConfigurationsPage));","import React from 'react'\r\nimport logo from '../../../logo.svg';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Paper, Grid, TextField, Button } from '@material-ui/core';\r\nimport { Face, Fingerprint } from '@material-ui/icons';\r\nimport ValidatorForm from \"../../elements/ValidationForm/index\";\r\nimport Authentication from '../../../services/authentication';\r\nimport { Redirect } from 'react-router-dom';\r\nimport AlertSnackbars from '../../elements/AlertBar/index';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    title: {\r\n        fontSize: 32,\r\n        color: '#ffffff'\r\n    },\r\n    paper: {\r\n        padding: theme.spacing.unit,\r\n        width: 400,\r\n    },\r\n    margin: {\r\n        margin: theme.spacing.unit * 2,\r\n    },\r\n    padding: {\r\n        padding: theme.spacing.unit\r\n    },\r\n    modalPaper: {\r\n        position: 'absolute',\r\n        width: theme.spacing.unit * 50,\r\n        backgroundColor: theme.palette.background.paper,\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing.unit * 4,\r\n    },\r\n});\r\n\r\n/**\r\n * LoginPage\r\n */\r\nclass LoginPage extends React.Component {\r\n    /**\r\n     * constructor\r\n     * @param {*} props \r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            snackOpen: false,\r\n            snackMessage: \"\",\r\n            snackVariant: null,\r\n            username: \"admin\",\r\n            password: \"mdundek.heart\"\r\n        };\r\n    }\r\n\r\n    /**\r\n     * handleSnackClose\r\n     */\r\n    handleSnackClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        this.setState({ snackOpen: false });\r\n    };\r\n\r\n    /**\r\n     * login\r\n     */\r\n    login() {\r\n        let isValide = this.formEl.validate();\r\n        if (isValide) {\r\n            // Build return object\r\n            let formData = {\r\n                \"password\": this.state.password\r\n            };\r\n            if (this.state.username.indexOf('@') === -1) {\r\n                formData.username = this.state.username;\r\n            } else {\r\n                formData.email = this.state.username;\r\n            }\r\n\r\n            // Try to login on the sdf server\r\n            Authentication.login(formData).then(() => { }).catch((err) => {\r\n                this.setState({\r\n                    snackOpen: true,\r\n                    snackVariant: \"error\",\r\n                    snackMessage: err.status === 401 ? \"Wrong username or password\" : err.status === 403 ? \"User is not an administrator\" : \"An error occured, please try again later\"\r\n                });\r\n                console.log(\"ERROR =>\", err);\r\n            });\r\n        }\r\n        // if (this.state.username.trim().length === 0 || this.state.password.trim().length === 0) {\r\n        //     this.setState({\r\n        //         snackOpen: true,\r\n        //         snackVariant: \"error\",\r\n        //         snackMessage: \"Invalide form\"\r\n        //     });\r\n        //     return;\r\n        // }\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * getModalStyle\r\n     */\r\n    getModalStyle() {\r\n        const top = 50;\r\n        const left = 50;\r\n        return {\r\n            top: `${top}%`,\r\n            left: `${left}%`,\r\n            transform: `translate(-${top}%, -${left}%)`,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * render\r\n     */\r\n    render() {\r\n        // If loged in, redirect to boardingpass page\r\n        if (this.props.userSession.token) {\r\n            return <Redirect to='/solution' />\r\n        }\r\n\r\n        const { classes } = this.props;\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                    <p>Server Docker Farm</p>\r\n                </header>\r\n                <div className=\"App-body\">\r\n                    <Grid item xs={12} style={{ marginTop: 100 }}>\r\n                        <Grid container justify=\"center\" spacing={16}>\r\n                            <Grid item xs={12} className={classes.title}>\r\n                                LOGIN\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Paper className={classes.paper}>\r\n                                    <ValidatorForm ref={form => (this.formEl = form)}>\r\n                                        <div className={classes.margin}>\r\n                                            <Grid container spacing={32} alignItems=\"flex-end\">\r\n                                                <Grid item>\r\n                                                    <Face />\r\n                                                </Grid>\r\n                                                <Grid item md={true} sm={true} xs={true}>\r\n                                                    <div className={\"form-group\"}>\r\n                                                        <TextField\r\n                                                            id=\"username\"\r\n                                                            value={this.state.username}\r\n                                                            onChange={(e) => { this.setState({ username: e.target.value }) }}\r\n                                                            label=\"Username\"\r\n                                                            type=\"text\"\r\n                                                            fullWidth\r\n                                                            autoFocus\r\n                                                            required />\r\n                                                        <div className=\"invalid-feedback\"></div>\r\n                                                    </div>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            <Grid container spacing={32} alignItems=\"flex-end\">\r\n                                                <Grid item>\r\n                                                    <Fingerprint />\r\n                                                </Grid>\r\n                                                <Grid item md={true} sm={true} xs={true}>\r\n                                                    <div className={\"form-group\"}>\r\n                                                        <TextField\r\n                                                            id=\"password\"\r\n                                                            value={this.state.password}\r\n                                                            onChange={(e) => { this.setState({ password: e.target.value }) }}\r\n                                                            label=\"Password\"\r\n                                                            type=\"password\"\r\n                                                            fullWidth\r\n                                                            required />\r\n                                                        <div className=\"invalid-feedback\"></div>\r\n                                                    </div>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            <Grid container justify=\"center\" style={{ marginTop: '40px' }}>\r\n                                                <Button variant=\"contained\" color=\"primary\" style={{ textTransform: \"none\" }} onClick={this.login.bind(this)} fullWidth>Login</Button>\r\n                                            </Grid>\r\n                                        </div>\r\n                                    </ValidatorForm>\r\n                                </Paper>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n\r\n                <AlertSnackbars\r\n                    open={this.state.snackOpen}\r\n                    handleClose={this.handleSnackClose}\r\n                    message={this.state.snackMessage}\r\n                    variant={this.state.snackVariant}\r\n                />\r\n\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\n// The function takes data from the app current state,\r\n// and insert/links it into the props of our component.\r\n// This function makes Redux know that this component needs to be passed a piece of the state\r\nconst mapStateToProps = (state, props) => ({\r\n    userSession: state.userSession\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({ \"dispatch\": dispatch });\r\n\r\n//Connect everything\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(LoginPage));","import en from \"./en.json\";\n\nconst langs = {\n  en\n};\n\nexport default function (lang = \"en\") {\n  return langs[lang];\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './store/store';\nimport Authentication from './services/authentication';\nimport PubSubController from './services/sockerPubSub';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\nimport SolutionConfigurationPage from './components/pages/SolutionConfigurations/SolutionConfigurations';\nimport DockerConfigurationsPage from './components/pages/DockerConfigurations/DockerConfigurations';\nimport NginxConfigurationsPage from './components/pages/NGinxConfigurations/NGinxConfigurations';\nimport SettingsConfigurationsPage from './components/pages/SettingsConfigurations/SettingsConfigurations';\nimport LoginPage from './components/pages/Login/Login';\nimport loadLang from \"./i18n\";\n\nlet store = configureStore();\n// Set store instance for Authentication service\nAuthentication.store = store;\nPubSubController.store = store;\n\n// Load labels into store\nstore.dispatch({\n    type: \"LOAD_LITERALS\",\n    data: loadLang(\"en\"),\n});\n\n// Check to see if user session exists\nif (sessionStorage.accessToken && sessionStorage.accessToken !== \"null\") {\n    (async () => {\n        await Authentication.setUser(JSON.parse(sessionStorage.accessToken));\n    })();\n}\n\nconst routing = (\n    <Router basename=\"/psh-admin\">\n        <Provider store={store}>\n            <div>\n                <Route exact path=\"/\" component={App} />\n                <Route path=\"/login\" component={LoginPage} />\n                <Route path=\"/solution\" component={SolutionConfigurationPage} />\n                <Route path=\"/docker\" component={DockerConfigurationsPage} />\n                <Route path=\"/nginx\" component={NginxConfigurationsPage} />\n                <Route path=\"/config\" component={SettingsConfigurationsPage} />\n            </div>\n        </Provider>\n    </Router>\n)\n\nReactDOM.render(routing, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nexport default routing;\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}